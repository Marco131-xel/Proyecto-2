package main.analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import main.excepciones.Errores;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

import main.abstracto.*;
import main.instrucciones.*;
import main.expresiones.*;
import main.simbolo.*;

parser code
{:
    scanner s;
    String styleAttributes = "";
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();

     public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right,
                        "Verifica la Sintaxis"));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right,
                        "Ninguna"));
    }

    public LinkedList<Errores> getErrores(){
        return listaErrores;
    }

    public StringBuilder htmlContent = new StringBuilder();
    
    public void addToHtml(String tagContent){
        htmlContent.append(tagContent);
    }
    
    public void exportHtmlFile(String fileName){
        try(BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))){
            writer.write(htmlContent.toString());
        } catch (IOException e){
            e.printStackTrace();
        }
    }
:}

action code
{:
:}
// SIMBOLOS
terminal PAR1, PAR2, MAS, MENOS, UMENOS, IGUAL, EQUALS, MENOR, MAYOR;
terminal POR, DIVI, OR, AND, DIFER, NOT, FINCADENA, LLAVEA,LLAVEC;
terminal CORCHEA, CORCHEC, DOSPTS, COMA;
// CC = HTML
terminal CC, HEAD, TITLE, LINK, BODY, SPAM, INPUT,TEXTAREA;
terminal SELECT, OPTION, DIV, IMG, BR, BUTTON, TITUH, PARRA;
terminal SCRIPT;
// PARAMETROS
terminal HREF, BACKG, COLOR, FONTFA, FONTSI, TEXTALI,TYPE;
// VALORES
terminal ID, NAME, COLS, ROWS, CLASS, SRC, WIDTH, HEIGHT, ALT, ONCLICK;
// FUNCIONES CLC
terminal ASC, DESC, LETPAR, LETIMPAR, REVERSE, CARALE, NUMALE;
terminal ALEINF, EXIT, REDIRECT;
// DECLARACIONES
terminal INTEGER, BOOLEAN, STRING, DECIMAL, CHAR, TRUE, FALSE;
// INSTRUCCIONES
terminal INIT, END, INSERT;
// SENTENCIAS Y  CICLOS
terminal IF, THEN, ELSE, ELIF, REPEAT, HUNTIL, WHILE, THENWHILE, ELEMENT, GLOBAL, LOAD;
// EXPRESIONES REGULARES
terminal String enlace;
terminal String colo;
terminal String size;
terminal String family;
terminal String aling;
terminal String tipos;
terminal String clase;
terminal String th;
terminal String ENTERO;
terminal String DECI;
terminal String IDENTIFICADOR;
terminal String CADENA;
terminal String CARACTER;
terminal String VALOR;  

// CC
nonterminal START, BASE, INTRODUCCION, CONTENIDOS, CONTENIDO;
nonterminal LIST_OPT, CUAOPT, LIST_SPAN, SPAN;
nonterminal INICIO, FIN, CABEZA_I, CABEZA_F, CUERPO_I, CUERPO_F;
nonterminal TITU_I, TITU_F, DIREC_I, DIREC_F, BAN_I, BAN_F;
nonterminal INT_I, INT_F, CUAD_I, CUAD_F, SELE_I, SELE_F;
nonterminal OPT_I, OPT_F, DIV_I, DIV_F, IMG_I, IMG_F, BR_I, BR_F;
nonterminal BOTON_I, BOTON_F, TIH_I, TIH_F, PARA_I, PARA_F;
nonterminal SCRIPT_I, SCRIPT_F;
// PARAMETROS Y VALORES
nonterminal ETIQUETA1, ETIQUETA2, ETIQUETA3, ETIQUETA4, ETIQUETA5, ETIQUETA6, ETIQUETA7, ETIQUETA8, ETIQUETA9;
nonterminal LIST_VAL1, LIST_VAL2, LIST_VAL3, LIST_VAL4, LIST_VAL5, LIST_VAL6, LIST_VAL7, LIST_VAL8, LIST_VAL9;
nonterminal VALOR_1, VALOR_2, VALOR_3, VALOR_4, VALOR_5, VALOR_6, VALOR_7, VALOR_8, VALOR_9, VALOR_N;
// FUNCIONES CLC 
nonterminal LinkedList<Instruccion>INSTRUCCIONES;
nonterminal Instruccion INSTRUCCION, IMPRESION, DECLARACION, ASIGNACION;
nonterminal Instruccion EXPRESION;
nonterminal Tipo TIPOS; 
nonterminal FUNCSP, BLOINST, GET, CSP, ISTR, OPCIONES, LISTA_VAR, DECLA_ASIG, LISTA_ASIG, LISTA_OPCIONES;
nonterminal Instruccion SELIF, SIF;
nonterminal Instruccion REPETIR, CICLO;

precedence left OR, AND, DIFER;
precedence left EQUALS, MENOR, MAYOR;
precedence left MAS, MENOS;
precedence left POR, DIV;
precedence left NOT;
precedence left UMENOS;

start with START;

START ::= BASE;
    /* LA BASE DE MI CC = HTML */
BASE ::=    INICIO
            CABEZA_I INTRODUCCION CABEZA_F
            CUERPO_I CONTENIDOS CUERPO_F
            FIN;

INTRODUCCION ::= DIREC_I DIREC_F
                 TITU_I VALOR:a {: RESULT=a; addToHtml(RESULT.toString()); :} TITU_F;

CONTENIDOS ::= CONTENIDO
             | CONTENIDOS CONTENIDO; 

CONTENIDO ::= TIH_I VALOR:a {: RESULT=a; addToHtml(RESULT.toString()); :} TIH_F
            | INT_I INT_F
            | BAN_I VALOR:a {: RESULT=a; addToHtml(RESULT.toString()); :} BAN_F 
            | CUAD_I CUAD_F
            | SELE_I LIST_OPT SELE_F
            | DIV_I CONTENIDOS DIV_F
            | IMG_I IMG_F
            | BR_I BR_F
            | BOTON_I VALOR:a {: RESULT=a; addToHtml(RESULT.toString()); :} BOTON_F
            | PARA_I LIST_SPAN PARA_F
            | SCRIPT_I INSTRUCCIONES SCRIPT_F
            ;
// SELECT Y OPTION
CUAOPT ::= OPT_I VALOR:a {: RESULT=a; addToHtml(RESULT.toString()); :} OPT_F;

LIST_OPT ::= CUAOPT
           | LIST_OPT CUAOPT;

// SPAN EN P
SPAN ::= VALOR:a {: RESULT=a; addToHtml(RESULT.toString()); :}
       | BAN_I VALOR:a {: RESULT=a; addToHtml(RESULT.toString()); :} BAN_F;

LIST_SPAN ::= SPAN
            | LIST_SPAN SPAN;

    /* TODAS LAS ETIQUETAS DE MI CC = HTML*/
INICIO ::= MENOR CC {: RESULT = "<html"; addToHtml(RESULT.toString()); :} ETIQUETA1 MAYOR {: RESULT = ">\n"; addToHtml(RESULT.toString()); :};
FIN ::= MENOR DIVI CC MAYOR {: RESULT = "</html>"; addToHtml(RESULT.toString()); :};

CABEZA_I ::= MENOR HEAD MAYOR {: RESULT = "<head>\n"; addToHtml(RESULT.toString()); :};
CABEZA_F ::= MENOR DIVI HEAD MAYOR {: RESULT = "</head>\n"; addToHtml(RESULT.toString()); :};

CUERPO_I ::= MENOR BODY {: RESULT = "<body"; addToHtml(RESULT.toString()); :} ETIQUETA3 MAYOR {: RESULT = ">\n"; addToHtml(RESULT.toString()); :};
CUERPO_F ::= MENOR DIVI BODY MAYOR {: RESULT = "</body>\n"; addToHtml(RESULT.toString()); :};

/* LOS DEMAS ESTAN DENTRO*/
TITU_I ::= MENOR TITLE MAYOR {: RESULT = "<title>"; addToHtml(RESULT.toString()); :};
TITU_F ::= MENOR DIVI TITLE MAYOR {: RESULT = "</title>\n"; addToHtml(RESULT.toString()); :};

DIREC_I ::= MENOR LINK {: RESULT = "<link"; addToHtml(RESULT.toString()); :} ETIQUETA2 MAYOR {: RESULT = ">\n"; addToHtml(RESULT.toString()); :};
DIREC_F ::= MENOR DIVI LINK MAYOR;

BAN_I ::= MENOR SPAM {: RESULT = "<span"; addToHtml(RESULT.toString()); :} ETIQUETA4 MAYOR {: RESULT = ">"; addToHtml(RESULT.toString()); :};
BAN_F ::= MENOR DIVI SPAM MAYOR {: RESULT = "</span>"; addToHtml(RESULT.toString()); :};

INT_I ::= MENOR INPUT {: RESULT = "<input"; addToHtml(RESULT.toString()); :} ETIQUETA5 MAYOR {: RESULT = ">\n"; addToHtml(RESULT.toString()); :};
INT_F ::= MENOR DIVI INPUT MAYOR;

CUAD_I ::= MENOR TEXTAREA {: RESULT = "<textarea"; addToHtml(RESULT.toString()); :} ETIQUETA6 MAYOR {: RESULT = ">\n"; addToHtml(RESULT.toString()); :};
CUAD_F ::= MENOR DIVI TEXTAREA MAYOR {: RESULT = "</textarea>\n"; addToHtml(RESULT.toString()); :};

SELE_I ::= MENOR SELECT {: RESULT = "<select"; addToHtml(RESULT.toString()); :} ETIQUETA4 MAYOR {: RESULT = ">\n"; addToHtml(RESULT.toString()); :};
SELE_F ::= MENOR DIVI SELECT MAYOR {: RESULT = "</select>\n"; addToHtml(RESULT.toString()); :};

OPT_I ::= MENOR OPTION MAYOR {: RESULT = "<option>"; addToHtml(RESULT.toString()); :};
OPT_F ::= MENOR DIVI OPTION MAYOR {: RESULT = "</option>\n"; addToHtml(RESULT.toString()); :};

DIV_I ::= MENOR DIV {: RESULT = "<div"; addToHtml(RESULT.toString()); :} ETIQUETA7 MAYOR {: RESULT = ">\n"; addToHtml(RESULT.toString()); :};
DIV_F ::= MENOR DIVI DIV MAYOR {: RESULT = "</div>\n"; addToHtml(RESULT.toString()); :};

IMG_I ::= MENOR IMG {: RESULT = "<img"; addToHtml(RESULT.toString()); :} ETIQUETA8 MAYOR {: RESULT = ">\n"; addToHtml(RESULT.toString()); :};
IMG_F ::= MENOR DIVI IMG MAYOR;

BR_I ::= MENOR BR MAYOR {: RESULT = "<br>\n"; addToHtml(RESULT.toString()); :};
BR_F ::= MENOR DIVI BR MAYOR;

BOTON_I ::= MENOR BUTTON {: RESULT = "<button"; addToHtml(RESULT.toString()); :} ETIQUETA9 MAYOR {: RESULT = ">"; addToHtml(RESULT.toString()); :};
BOTON_F ::= MENOR DIVI BUTTON MAYOR {: RESULT = "</button>\n"; addToHtml(RESULT.toString()); :};

TIH_I ::= MENOR TITUH {: RESULT = "<h1"; addToHtml(RESULT.toString()); :} ETIQUETA4 MAYOR {: RESULT = ">"; addToHtml(RESULT.toString()); :};
TIH_F ::= MENOR DIVI TITUH MAYOR {: RESULT = "</h1>\n"; addToHtml(RESULT.toString()); :};

PARA_I ::= MENOR PARRA {: RESULT = "<p"; addToHtml(RESULT.toString()); :} ETIQUETA4 MAYOR {: RESULT = ">"; addToHtml(RESULT.toString()); :};
PARA_F ::= MENOR DIVI PARRA MAYOR {: RESULT = "</p>\n"; addToHtml(RESULT.toString()); :};

SCRIPT_I ::= MENOR SCRIPT MAYOR {: RESULT = "<script>\n"; addToHtml(RESULT.toString()); :};
SCRIPT_F ::= MENOR DIVI SCRIPT MAYOR {: RESULT = "</script>\n"; addToHtml(RESULT.toString()); :};

    /* PARAMETROS Y VALORES */
// ETIQUETAS
ETIQUETA1 ::= LIST_VAL1
            | /*vacio*/;

ETIQUETA2 ::= LIST_VAL2
            | /*vacio*/;

ETIQUETA3 ::= LIST_VAL3
            | /*vacio*/;

ETIQUETA4 ::= LIST_VAL4 {:
                if(!styleAttributes.isEmpty()){
                    RESULT = " style=\"" + styleAttributes.trim() + "\" ";
                    addToHtml(RESULT.toString());
                    styleAttributes = "";
                }
            :}
            | /*vacio*/;

ETIQUETA5 ::= LIST_VAL5 {:
                if(!styleAttributes.isEmpty()){
                    RESULT = " style=\"" + styleAttributes.trim() + "\" ";
                    addToHtml(RESULT.toString());
                    styleAttributes = "";
                }
            :}
            | /*vacio*/;

ETIQUETA6 ::= LIST_VAL6 {:
                if(!styleAttributes.isEmpty()){
                    RESULT = " style=\"" + styleAttributes.trim() + "\" ";
                    addToHtml(RESULT.toString());
                    styleAttributes = "";
                }
            :}
            | /*vacio*/;

ETIQUETA7 ::= LIST_VAL7 {:
                if(!styleAttributes.isEmpty()){
                    RESULT = " style=\"" + styleAttributes.trim() + "\" ";
                    addToHtml(RESULT.toString());
                    styleAttributes = "";
                }
            :}
            | /*vacio*/;

ETIQUETA8 ::= LIST_VAL8
            | /*vacio*/;

ETIQUETA9 ::= LIST_VAL9 {:
                if(!styleAttributes.isEmpty()){
                    RESULT = " style=\"" + styleAttributes.trim() + "\" ";
                    addToHtml(RESULT.toString());
                    styleAttributes = "";
                }
            :}
            | /*vacio*/;

// LISTA DE VALORES
LIST_VAL1 ::= VALOR_1
            | LIST_VAL1 VALOR_1;

LIST_VAL2 ::= VALOR_2
            | LIST_VAL2 VALOR_2;

LIST_VAL3 ::= VALOR_3
            | LIST_VAL3 VALOR_3;

LIST_VAL4 ::= VALOR_4
            | LIST_VAL4 VALOR_4;

LIST_VAL5 ::= VALOR_5
            | LIST_VAL5 VALOR_5;

LIST_VAL6 ::= VALOR_6
            | LIST_VAL6 VALOR_6;

LIST_VAL7 ::= VALOR_7
            | LIST_VAL7 VALOR_7;

LIST_VAL8 ::= VALOR_8
            | LIST_VAL8 VALOR_8;

LIST_VAL9 ::= VALOR_9
            | LIST_VAL9 VALOR_9;

// VALORES
VALOR_N ::= CORCHEA FONTSI IGUAL CADENA:a CORCHEC {: styleAttributes += "font-size: "+a+";"; :}
          | CORCHEA FONTFA IGUAL CADENA:a CORCHEC {: 
                    if (a.equals("Arial")) {
                      styleAttributes += "font-family: Arial, Helvetica, sans-serif;";
                  } else if (a.equals("Courier")) {
                      styleAttributes += "font-family: 'Courier New', Courier, monospace;";
                  } else if (a.equals("Verdana")) {
                      styleAttributes += "font-family: Verdana, Geneva, Tahoma, sans-serif;";
                  } else if (a.equals("sans-serif")) {
                      styleAttributes += "font-family:sans-serif;";
                  } else {
                      // Generar error si la fuente no es válida
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Fuente no válida: " + a, 
                          aleft, 
                          aright, 
                          "Verifica la fuente utilizada"
                      ));
                  } :}
          | CORCHEA TEXTALI IGUAL CADENA:a CORCHEC {:
                if (a.equals("left") || a.equals("right") || a.equals("center") || a.equals("Justify")) {
                      styleAttributes += "text-align: "+a+";";
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Alineacion no valida: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica las alineaciones"
                      ));
                  }
           :}
          | CORCHEA ID IGUAL CADENA:a CORCHEC {: 
            if (a.matches("[-_$][a-zA-Z0-9_$-]*")){
                      RESULT = " id=\""+a+"\" "; addToHtml(RESULT.toString());
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Id no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica la sintaxis del id"
                      ));
                  }
          :};

VALOR_1 ::= CORCHEA ID IGUAL CADENA:a CORCHEC {: 
                if (a.matches("[-_$][a-zA-Z0-9_$-]*")){
                      RESULT = " id=\""+a+"\" "; addToHtml(RESULT.toString());
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Id no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica la sintaxis del id"
                      ));
                  }
            :}
          | CORCHEA NAME IGUAL CADENA:a CORCHEC {: RESULT = " name=\""+a+"\" "; addToHtml(RESULT.toString()); :};

VALOR_2 ::= CORCHEA HREF IGUAL CADENA:a CORCHEC {: RESULT = " href=\""+a+"\" "; addToHtml(RESULT.toString()); :};

VALOR_3 ::= CORCHEA BACKG IGUAL CADENA:a CORCHEC {: 
                    if (a.matches("#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?") || 
                      a.equals("black") || 
                      a.equals("olive") || 
                      a.equals("teal") || 
                      a.equals("red") || 
                      a.equals("blue") || 
                      a.equals("maroon") || 
                      a.equals("navy") || 
                      a.equals("gray") || 
                      a.equals("lime") || 
                      a.equals("fuchsia") || 
                      a.equals("green") || 
                      a.equals("white") || 
                      a.equals("purple") || 
                      a.equals("silver") || 
                      a.equals("yellow") || 
                      a.equals("aqua")) {
                      styleAttributes += "background: " + a + ";";
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Color no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica el nombre o codigo hexa del color para Background"
                      ));
                  }
             :}; 

VALOR_4 ::= CORCHEA COLOR IGUAL CADENA:a CORCHEC {: 
                  if (a.matches("#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?") || 
                      a.equals("black") || 
                      a.equals("olive") || 
                      a.equals("teal") || 
                      a.equals("red") || 
                      a.equals("blue") || 
                      a.equals("maroon") || 
                      a.equals("navy") || 
                      a.equals("gray") || 
                      a.equals("lime") || 
                      a.equals("fuchsia") || 
                      a.equals("green") || 
                      a.equals("white") || 
                      a.equals("purple") || 
                      a.equals("silver") || 
                      a.equals("yellow") || 
                      a.equals("aqua")) {
                      styleAttributes += "color: " + a + ";";
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Color no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica el nombre o codigo hexa del color"
                      ));
                  }
        :}
          | VALOR_N;

VALOR_5 ::= CORCHEA TYPE IGUAL CADENA:a CORCHEC {: 
                if (a.equals("text") || a.equals("number") || a.equals("radio") || a.equals("checkbox")) {
                      RESULT = " type=\""+a+"\" "; addToHtml(RESULT.toString());
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "tipos no validos: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica los Tipos"
                      ));
                  }
             :}
          | CORCHEA NAME IGUAL CADENA:a CORCHEC {: RESULT = " name=\""+a+"\" "; addToHtml(RESULT.toString()); :}
          | CORCHEA COLOR IGUAL CADENA:a CORCHEC {: 
                    if (a.matches("#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?") || 
                      a.equals("black") || 
                      a.equals("olive") || 
                      a.equals("teal") || 
                      a.equals("red") || 
                      a.equals("blue") || 
                      a.equals("maroon") || 
                      a.equals("navy") || 
                      a.equals("gray") || 
                      a.equals("lime") || 
                      a.equals("fuchsia") || 
                      a.equals("green") || 
                      a.equals("white") || 
                      a.equals("purple") || 
                      a.equals("silver") || 
                      a.equals("yellow") || 
                      a.equals("aqua")) {
                      styleAttributes += "color: " + a + ";";
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Color no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica el nombre o codigo hexa del color"
                      ));
                  }
             :}
          | VALOR_N;

VALOR_6 ::= CORCHEA COLS IGUAL CADENA:a CORCHEC {: RESULT = " cols=\""+a+"\" "; addToHtml(RESULT.toString()); :}
          | CORCHEA ROWS IGUAL CADENA:a CORCHEC {: RESULT = " rows=\""+a+"\" "; addToHtml(RESULT.toString()); :}
          | VALOR_N;

VALOR_7 ::= CORCHEA COLOR IGUAL CADENA:a CORCHEC {: 
                if (a.matches("#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?") || 
                      a.equals("black") || 
                      a.equals("olive") || 
                      a.equals("teal") || 
                      a.equals("red") || 
                      a.equals("blue") || 
                      a.equals("maroon") || 
                      a.equals("navy") || 
                      a.equals("gray") || 
                      a.equals("lime") || 
                      a.equals("fuchsia") || 
                      a.equals("green") || 
                      a.equals("white") || 
                      a.equals("purple") || 
                      a.equals("silver") || 
                      a.equals("yellow") || 
                      a.equals("aqua")) {
                      styleAttributes += "color: " + a + ";";
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Color no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica el nombre o codigo hexa del color"
                      ));
                  }
            :}
          | CORCHEA BACKG IGUAL CADENA:a CORCHEC {: 
                 if (a.matches("#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?") || 
                      a.equals("black") || 
                      a.equals("olive") || 
                      a.equals("teal") || 
                      a.equals("red") || 
                      a.equals("blue") || 
                      a.equals("maroon") || 
                      a.equals("navy") || 
                      a.equals("gray") || 
                      a.equals("lime") || 
                      a.equals("fuchsia") || 
                      a.equals("green") || 
                      a.equals("white") || 
                      a.equals("purple") || 
                      a.equals("silver") || 
                      a.equals("yellow") || 
                      a.equals("aqua")) {
                      styleAttributes += "background: " + a + ";";
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Color no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica el nombre o codigo hexa del color para Background"
                      ));
                  }
           :}
          | CORCHEA CLASS IGUAL CADENA:a CORCHEC {: 
                if (a.equals("row") || a.equals("column")) {
                      styleAttributes += "font-family: "+a+";";
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "tipos de clase no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica los Tipos de Clases"
                      ));
                  }
             :}
          | VALOR_N;

VALOR_8 ::= CORCHEA ID IGUAL CADENA:a CORCHEC {: 
                if (a.matches("[-_$][a-zA-Z0-9_$-]*")){
                      RESULT = " id=\""+a+"\" "; addToHtml(RESULT.toString());
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Id no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica la sintaxis del id"
                      ));
                  }
         :}
          | CORCHEA SRC IGUAL CADENA:a CORCHEC {: RESULT = " src=\""+a+"\" "; addToHtml(RESULT.toString()); :}
          | CORCHEA WIDTH IGUAL CADENA:a CORCHEC {: RESULT = " width=\""+a+"\" "; addToHtml(RESULT.toString()); :}
          | CORCHEA HEIGHT IGUAL CADENA:a CORCHEC {: RESULT = " height=\""+a+"\" "; addToHtml(RESULT.toString()); :}
          | CORCHEA ALT IGUAL CADENA:a CORCHEC {: RESULT = " alt=\""+a+"\" "; addToHtml(RESULT.toString()); :};

VALOR_9 ::= CORCHEA COLOR IGUAL CADENA:a CORCHEC {: 
                    if (a.matches("#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?") || 
                      a.equals("black") || 
                      a.equals("olive") || 
                      a.equals("teal") || 
                      a.equals("red") || 
                      a.equals("blue") || 
                      a.equals("maroon") || 
                      a.equals("navy") || 
                      a.equals("gray") || 
                      a.equals("lime") || 
                      a.equals("fuchsia") || 
                      a.equals("green") || 
                      a.equals("white") || 
                      a.equals("purple") || 
                      a.equals("silver") || 
                      a.equals("yellow") || 
                      a.equals("aqua")) {
                      styleAttributes += "color: " + a + ";";
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Color no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica el nombre o codigo hexa del color"
                      ));
                  }
             :}
          | CORCHEA BACKG IGUAL CADENA:a CORCHEC {: 
             if (a.matches("#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?") || 
                      a.equals("black") || 
                      a.equals("olive") || 
                      a.equals("teal") || 
                      a.equals("red") || 
                      a.equals("blue") || 
                      a.equals("maroon") || 
                      a.equals("navy") || 
                      a.equals("gray") || 
                      a.equals("lime") || 
                      a.equals("fuchsia") || 
                      a.equals("green") || 
                      a.equals("white") || 
                      a.equals("purple") || 
                      a.equals("silver") || 
                      a.equals("yellow") || 
                      a.equals("aqua")) {
                      styleAttributes += "background: " + a + ";";
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Color no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica el nombre o codigo hexa del color para Background"
                      ));
                  }
           :}
          | CORCHEA ONCLICK IGUAL CADENA:a CORCHEC {: RESULT = " onclick=\""+a+"\" "; addToHtml(RESULT.toString()); :}
          | VALOR_N;

// FUNCIONES CLC
INSTRUCCIONES ::= INSTRUCCION:a {: RESULT = new LinkedList<>(); RESULT.add(a); :}
                | INSTRUCCIONES:a INSTRUCCION:b {: RESULT = a; RESULT.add(b); :};

INSTRUCCION ::= IMPRESION:a   {:   RESULT=a;   :}
              | DECLARACION:a {:   RESULT=a;   :}
              | ASIGNACION:a  {:   RESULT=a;   :}
              | DECLA_ASIG
              | ISTR
              | BLOINST
              | SIF:a         {:   RESULT=a;   :}
              | REPETIR:a     {:   RESULT=a;   :}
              | CICLO:a       {:   RESULT=a;   :}
              | IDENTIFICADOR PAR1 PAR2 CORCHEA INSTRUCCIONES CORCHEC
              | LOAD PAR1 PAR2 CORCHEA INSTRUCCIONES CORCHEC;

IMPRESION ::= FUNCSP:a PAR1 EXPRESION:b PAR2 FINCADENA{:
              Impresion imp = new Impresion(a.toString(), b.generarCodigo());
              String jscode = imp.interprete();
              addToHtml(jscode);
              :};

FUNCSP ::= ASC {: RESULT = "ASC"; :}
         | DESC {: RESULT = "DESC"; :}
         | LETPAR {: RESULT = "LETPAR"; :}
         | LETIMPAR {: RESULT = "LETIMPAR"; :}
         | REVERSE {: RESULT = "REVERSE"; :}
         | CARALE {: RESULT = "CARACTER_ALEATORIO"; :}
         | NUMALE {: RESULT = "NUM_ALEATORIO"; :}
         | ALEINF {: RESULT = "ALERT_INFO"; :}
;

CSP ::= EXIT PAR1 PAR2 FINCADENA
      | REDIRECT PAR1 PAR2 FINCADENA;

ASIGNACION ::= LISTA_VAR IGUAL EXPRESION FINCADENA;

DECLARACION ::= TIPOS LISTA_VAR FINCADENA
              | TIPOS GLOBAL LISTA_VAR FINCADENA;

LISTA_VAR ::= IDENTIFICADOR
            | LISTA_VAR COMA IDENTIFICADOR;              

DECLA_ASIG ::= TIPOS LISTA_ASIG FINCADENA
             | TIPOS GLOBAL LISTA_ASIG FINCADENA;

LISTA_ASIG ::= IDENTIFICADOR IGUAL EXPRESION
             | LISTA_ASIG COMA IDENTIFICADOR IGUAL EXPRESION;
             
TIPOS ::= INTEGER {:   RESULT=new Tipo(TipoDato.INTEGER);   :}
        | DECIMAL {:   RESULT=new Tipo(TipoDato.DECIMAL);   :}
        | STRING  {:   RESULT=new Tipo(TipoDato.STRING);   :}
        | CHAR    {:   RESULT=new Tipo(TipoDato.CHAR);   :}
        | BOOLEAN {:   RESULT=new Tipo(TipoDato.BOOLEAN);   :}
;

GET ::= ELEMENT PAR1 CARACTER PAR2;

ISTR ::= INSERT PAR1 CARACTER PAR2 FINCADENA;

EXPRESION ::= MENOS EXPRESION:a {: RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); :} %prec UMENOS
            | DIFER EXPRESION:a {: RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright); :} %prec NOT
            | EXPRESION:a MAS EXPRESION:b    {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); :}
            | EXPRESION:a MENOS EXPRESION:b  {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); :}   
            | EXPRESION:a POR EXPRESION:b    {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); :}
            | EXPRESION:a DIV EXPRESION:b    {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); :}
            | EXPRESION:a IGUAL IGUAL EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.EQUALS, aleft, aright); :} %prec EQUALS 
            | EXPRESION:a DIFER IGUAL EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.NOTEQUALS, aleft, aright); :} %prec EQUALS
            | EXPRESION:a MENOR IGUAL EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORIGUAL, aleft, aright); :} %prec EQUALS
            | EXPRESION:a MAYOR IGUAL EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORIGUAL, aleft, aright); :} %prec EQUALS
            | EXPRESION:a MENOR EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright); :}
            | EXPRESION:a MAYOR EXPRESION:b {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright); :}
            | EXPRESION:a OR EXPRESION:b {: RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); :}
            | EXPRESION:a AND EXPRESION:b {: RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright); :}
            | CADENA:a    {: RESULT = new Nativo(a, new Tipo(TipoDato.STRING), aleft, aright); :}
            | CARACTER:a    {: RESULT = new Nativo(a, new Tipo(TipoDato.CHAR), aleft, aright); :}
            | GET
            | IDENTIFICADOR:a {: RESULT = new Variables(a, aleft, aright); :}
            | ENTERO:a    {: RESULT = new Nativo(a, new Tipo(TipoDato.INTEGER), aleft, aright); :}
            | DECI:a      {: RESULT = new Nativo(a, new Tipo(TipoDato.DECIMAL), aleft, aright); :}
            | TRUE:a      {: RESULT = new Nativo(true, new Tipo(TipoDato.BOOLEAN), aleft, aright); :}
            | FALSE:a     {: RESULT = new Nativo(false, new Tipo(TipoDato.BOOLEAN), aleft, aright); :}
            | PAR1 EXPRESION:a PAR2 {: RESULT = a; :};

LISTA_OPCIONES ::= OPCIONES
                 | LISTA_OPCIONES OPCIONES;

OPCIONES ::= IMPRESION
           | CSP
           | ISTR;
//INSTRUCCION
BLOINST ::= INIT LLAVEA DOSPTS 
                LISTA_OPCIONES
            DOSPTS LLAVEC END;

// SENTENCIAS IF 
SIF ::= IF PAR1 EXPRESION PAR2 THEN BLOINST
      | IF PAR1 EXPRESION PAR2 THEN BLOINST ELSE BLOINST
      | IF PAR1 EXPRESION PAR2 THEN BLOINST SELIF
      | IF PAR1 EXPRESION PAR2 THEN BLOINST SELIF ELSE BLOINST;

// BLOQUE DE REPETICION 
SELIF ::= ELIF PAR1 EXPRESION PAR2 THEN BLOINST
        | SELIF ELIF IF PAR1 EXPRESION PAR2 THEN BLOINST;

// CICLOS REPEAT Y WHILE
REPETIR ::= REPEAT PAR1 EXPRESION PAR2 
            HUNTIL PAR1 EXPRESION PAR2 
            BLOINST;

CICLO ::= WHILE PAR1 EXPRESION PAR2 
          THENWHILE BLOINST;