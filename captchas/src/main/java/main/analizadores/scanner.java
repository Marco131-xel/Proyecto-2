// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/java/main/analizadores/lexico.jflex

package main.analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import main.excepciones.Errores;


@SuppressWarnings("fallthrough")
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  4,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  5,  6,  0,  7,  0,  8,  9, 10, 11, 12, 13, 14, 15,  0, 16, 
    17, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 21, 22, 23, 24,  0, 
    25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
    41, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,  0, 54, 
     0, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
    41, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\2\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\1\21\4\1\22\1\23"+
    "\1\24\1\1\1\25\1\2\1\0\1\26\1\27\1\0"+
    "\1\30\4\0\23\4\1\31\1\32\17\4\1\33\1\34"+
    "\3\0\1\4\1\35\1\36\15\4\1\37\6\4\1\40"+
    "\23\4\1\41\7\4\1\42\2\0\4\4\1\43\2\4"+
    "\1\44\1\4\1\45\1\4\1\46\1\4\1\47\13\4"+
    "\1\50\1\51\1\52\1\53\4\4\1\54\1\4\1\55"+
    "\4\4\1\56\6\4\1\57\2\4\1\60\1\61\1\62"+
    "\2\4\1\42\2\0\4\4\1\63\1\64\2\4\1\65"+
    "\1\4\1\66\11\4\1\67\21\4\1\70\1\71\1\42"+
    "\2\0\4\4\1\72\1\4\1\73\1\4\1\74\3\4"+
    "\1\75\6\4\1\76\1\77\1\100\2\4\1\101\4\4"+
    "\1\102\1\4\1\103\2\4\1\42\1\2\1\104\2\4"+
    "\1\105\2\4\1\106\4\4\1\107\1\110\3\4\1\111"+
    "\2\4\1\112\1\113\1\4\1\114\5\4\1\115\1\116"+
    "\1\4\1\117\4\4\1\120\1\4\1\121\10\4\1\122"+
    "\3\4\1\123\1\124\1\125\2\4\1\126\3\4\1\127"+
    "\1\4\1\130\1\131\6\4\1\132\1\133\4\4\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\72\0\72\0\72\0\72\0\72\0\u0122\0\72\0\u01d0"+
    "\0\u020a\0\72\0\72\0\u0244\0\72\0\72\0\u027e\0\u02b8"+
    "\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488"+
    "\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658"+
    "\0\72\0\72\0\72\0\u0692\0\72\0\u06cc\0\350\0\72"+
    "\0\72\0\u0196\0\72\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee"+
    "\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be"+
    "\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e"+
    "\0\u0bc8\0\u0c02\0\u04c2\0\u04c2\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea"+
    "\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba"+
    "\0\u0ef4\0\u0f2e\0\u0f68\0\72\0\u0706\0\u0fa2\0\u0fdc\0\u1016"+
    "\0\u1050\0\u04c2\0\u04c2\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172"+
    "\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342"+
    "\0\u04c2\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e\0\u04c2"+
    "\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e"+
    "\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e"+
    "\0\u1878\0\u18b2\0\u18ec\0\u04c2\0\u1926\0\u1960\0\u199a\0\u19d4"+
    "\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4"+
    "\0\u1bde\0\u1c18\0\u04c2\0\u1c52\0\u1c8c\0\u04c2\0\u1cc6\0\u04c2"+
    "\0\u1d00\0\u04c2\0\u1d3a\0\u04c2\0\u1d74\0\u1dae\0\u1de8\0\u1e22"+
    "\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u04c2"+
    "\0\u04c2\0\u04c2\0\u04c2\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u04c2"+
    "\0\u20da\0\u04c2\0\u2114\0\u214e\0\u2188\0\u21c2\0\u04c2\0\u21fc"+
    "\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u04c2\0\u2358\0\u2392"+
    "\0\u23cc\0\u04c2\0\u04c2\0\u2406\0\u2440\0\u247a\0\u24b4\0\u24ee"+
    "\0\u2528\0\u2562\0\u259c\0\u25d6\0\u04c2\0\u04c2\0\u2610\0\u264a"+
    "\0\u04c2\0\u2684\0\u04c2\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6"+
    "\0\u27e0\0\u281a\0\u2854\0\u288e\0\u04c2\0\u28c8\0\u2902\0\u293c"+
    "\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c"+
    "\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u04c2\0\u04c2"+
    "\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u04c2"+
    "\0\u2e38\0\u04c2\0\u2e72\0\u04c2\0\u2eac\0\u2ee6\0\u2f20\0\u04c2"+
    "\0\u2f5a\0\u2f94\0\u2fce\0\u3008\0\u3042\0\u307c\0\u04c2\0\u04c2"+
    "\0\u04c2\0\u30b6\0\u30f0\0\u04c2\0\u312a\0\u3164\0\u319e\0\u31d8"+
    "\0\u04c2\0\u3212\0\u04c2\0\u324c\0\u3286\0\72\0\72\0\72"+
    "\0\u32c0\0\u32fa\0\u04c2\0\u3334\0\u336e\0\u04c2\0\u33a8\0\u33e2"+
    "\0\u341c\0\u3456\0\u04c2\0\u04c2\0\u3490\0\u34ca\0\u3504\0\u04c2"+
    "\0\u353e\0\u3578\0\u04c2\0\u04c2\0\u35b2\0\u04c2\0\u35ec\0\u3626"+
    "\0\u3660\0\u369a\0\u36d4\0\u04c2\0\u04c2\0\u370e\0\u04c2\0\u3748"+
    "\0\u3782\0\u37bc\0\u37f6\0\u04c2\0\u3830\0\u04c2\0\u386a\0\u38a4"+
    "\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6\0\u3a00\0\u0122\0\u3a3a"+
    "\0\u3a74\0\u3aae\0\u04c2\0\u04c2\0\u04c2\0\u3ae8\0\u3b22\0\u04c2"+
    "\0\u3b5c\0\u3b96\0\u3bd0\0\u0122\0\u3c0a\0\u04c2\0\u0122\0\u3c44"+
    "\0\u3c7e\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66\0\u04c2\0\u04c2\0\u3da0"+
    "\0\u3dda\0\u3e14\0\u3e4e\0\u04c2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\2\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\2\41\1\42\1\41\1\43\1\44\1\41\1\45"+
    "\1\46\1\47\2\41\1\50\3\41\1\51\1\2\1\52"+
    "\1\41\1\53\1\54\1\55\73\0\2\3\1\0\1\3"+
    "\72\0\1\56\64\0\6\57\1\60\63\57\7\0\1\6"+
    "\7\0\1\6\1\0\3\6\6\0\31\6\3\0\1\6"+
    "\13\0\1\61\61\0\11\62\1\63\60\62\1\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\31\41"+
    "\1\0\1\65\1\0\1\41\4\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\3\21\6\0\31\41\1\0\1\65"+
    "\1\0\1\41\10\0\1\66\124\0\1\67\32\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\13\41"+
    "\1\70\5\41\1\71\7\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\1\72"+
    "\15\41\1\73\12\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\1\74\6\41"+
    "\1\75\3\41\1\76\2\41\1\77\12\41\3\0\1\100"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\4\41\1\101\24\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\13\41"+
    "\1\102\1\41\1\103\10\41\1\104\2\41\3\0\1\41"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\1\105\15\41\1\106\12\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\4\41\1\107\24\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\4\41\1\110"+
    "\13\41\1\111\2\41\1\112\5\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\3\41\1\113\1\41\1\114\7\41\1\115\13\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\31\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\4\41\1\116"+
    "\24\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\1\117\22\41\1\120\5\41"+
    "\3\0\1\41\4\0\1\64\5\0\1\6\7\0\1\6"+
    "\1\0\3\41\6\0\15\41\1\121\13\41\3\0\1\41"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\4\41\1\122\11\41\1\123\12\41\3\0\1\41"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\20\41\1\124\1\41\1\125\6\41\3\0\1\41"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\4\41\1\126\2\41\1\127\10\41\1\130\6\41"+
    "\1\131\1\41\3\0\1\41\4\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\3\41\6\0\7\41\1\132\1\133"+
    "\20\41\3\0\1\41\73\0\1\134\1\0\2\56\1\0"+
    "\67\56\1\0\1\64\17\0\3\135\6\0\31\135\3\0"+
    "\1\135\3\0\2\136\3\0\65\136\17\0\1\137\117\0"+
    "\1\140\25\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\4\41\1\141\15\41\1\142\6\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\2\41\1\143\26\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\2\41\1\144\26\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\16\41\1\145"+
    "\12\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\20\41\1\146\10\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\1\147\30\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\1\150"+
    "\30\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\13\41\1\151\15\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\1\41\1\152\1\153\1\154\3\41\1\155"+
    "\1\156\2\41\1\157\2\41\1\160\1\161\1\41\1\162"+
    "\1\163\6\41\3\0\1\41\4\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\3\41\6\0\2\41\1\164\16\41"+
    "\1\165\7\41\3\0\1\41\4\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\3\41\6\0\10\41\1\166\10\41"+
    "\1\167\7\41\3\0\1\41\4\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\3\41\6\0\3\41\1\170\25\41"+
    "\3\0\1\41\4\0\1\64\5\0\1\6\7\0\1\6"+
    "\1\0\3\41\6\0\10\41\1\171\20\41\3\0\1\41"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\13\41\1\172\15\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\15\41"+
    "\1\173\13\41\3\0\1\41\4\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\3\41\6\0\22\41\1\174\6\41"+
    "\3\0\1\41\4\0\1\64\5\0\1\6\7\0\1\6"+
    "\1\0\3\41\6\0\10\41\1\175\20\41\3\0\1\41"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\4\41\1\176\24\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\15\41"+
    "\1\177\13\41\3\0\1\41\4\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\3\41\6\0\10\41\1\200\10\41"+
    "\1\201\1\202\6\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\22\41\1\203"+
    "\6\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\14\41\1\204\14\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\14\41\1\205\14\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\2\41\1\206\26\41\3\0\1\207\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\3\41\1\210"+
    "\13\41\1\211\4\41\1\212\4\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\25\41\1\213\3\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\2\41\1\214"+
    "\26\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\20\41\1\215\10\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\26\41\1\216\2\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\4\41\1\217\24\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\23\41\1\220"+
    "\5\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\17\41\1\221\11\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\10\41\1\222\20\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\3\41\1\223\25\41\3\0\1\41\24\0\3\224\65\0"+
    "\1\225\122\0\1\226\22\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\20\41\1\227\10\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\12\41\1\230\16\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\13\41\1\231\15\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\1\232\30\41"+
    "\3\0\1\41\4\0\1\64\5\0\1\6\7\0\1\6"+
    "\1\0\3\41\6\0\20\41\1\233\10\41\3\0\1\41"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\21\41\1\234\7\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\16\41"+
    "\1\235\2\41\1\236\7\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\16\41"+
    "\1\237\1\41\1\240\2\41\1\241\5\41\3\0\1\41"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\2\41\1\242\26\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\10\41"+
    "\1\243\20\41\3\0\1\41\4\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\1\41\1\244\1\41\6\0\4\41"+
    "\1\245\24\41\3\0\1\41\4\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\3\41\6\0\14\41\1\246\1\247"+
    "\13\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\10\41\1\250\20\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\17\41\1\251\11\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\2\41\1\252\1\41\1\253\12\41\1\254\11\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\4\41\1\255\3\41\1\256\20\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\10\41\1\257\20\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\2\41\1\260\26\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\5\41\1\261"+
    "\23\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\4\41\1\262\24\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\22\41\1\263\6\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\21\41\1\264\7\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\22\41\1\265"+
    "\6\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\4\41\1\266\24\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\6\41\1\267\22\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\5\41\1\270\23\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\22\41\1\271"+
    "\6\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\22\41\1\272\6\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\4\41\1\273\24\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\4\41\1\274\24\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\10\41\1\275"+
    "\6\41\1\276\11\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\4\41\1\277"+
    "\24\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\31\41\3\0\1\300\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\13\41\1\301\15\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\13\41\1\302"+
    "\15\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\10\41\1\303\20\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\4\41\1\304\24\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\4\41\1\305\24\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\21\41\1\306"+
    "\7\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\10\41\1\307\20\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\22\41\1\310\6\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\15\41\1\311\13\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\4\41\1\312"+
    "\24\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\4\41\1\313\24\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\13\41\1\314\15\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\22\41\1\315\6\41\3\0\1\41\24\0\3\316\46\0"+
    "\17\225\1\317\52\225\33\0\1\320\37\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\22\41\1\321"+
    "\6\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\6\41\1\322\22\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\4\41\1\323\24\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\2\41\1\324\26\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\21\41\1\325"+
    "\7\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\20\41\1\326\10\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\3\41\1\327\25\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\22\41\1\330\6\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\24\41\1\331"+
    "\4\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\1\332\30\41\3\0\1\41"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\6\41\1\333\22\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\17\41"+
    "\1\334\11\41\3\0\1\41\4\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\3\41\6\0\15\41\1\335\13\41"+
    "\3\0\1\41\4\0\1\64\5\0\1\6\7\0\1\6"+
    "\1\0\3\41\6\0\22\41\1\336\6\41\3\0\1\41"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\20\41\1\337\10\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\13\41"+
    "\1\340\15\41\3\0\1\41\4\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\3\41\6\0\1\341\30\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\26\41\1\342\2\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\22\41\1\343\6\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\14\41\1\344"+
    "\14\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\4\41\1\345\24\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\346\1\0"+
    "\3\41\6\0\31\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\13\41\1\347"+
    "\15\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\7\41\1\350\21\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\10\41\1\351\20\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\20\41\1\352\10\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\6\41\1\353"+
    "\22\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\14\41\1\354\14\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\1\355\30\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\1\356"+
    "\30\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\10\41\1\357\20\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\16\41\1\360\12\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\20\41\1\361\10\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\1\362\30\41"+
    "\3\0\1\41\4\0\1\64\5\0\1\6\7\0\1\6"+
    "\1\0\3\41\6\0\20\41\1\363\10\41\3\0\1\41"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\15\41\1\364\13\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\365\1\0\3\41\6\0\31\41"+
    "\3\0\1\41\4\0\1\64\5\0\1\6\7\0\1\6"+
    "\1\0\3\41\6\0\25\41\1\366\3\41\3\0\1\41"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\4\41\1\367\24\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\7\41"+
    "\1\370\21\41\3\0\1\41\24\0\3\371\46\0\17\225"+
    "\1\372\52\225\32\0\1\373\40\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\3\41\6\0\31\41\3\0\1\374"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\20\41\1\375\10\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\1\376"+
    "\30\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\22\41\1\377\6\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\27\41\1\u0100\1\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\22\41\1\u0101\6\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\3\41\1\u0102"+
    "\25\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\23\41\1\u0103\5\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\12\41\1\u0104\16\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\10\41\1\u0105\20\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\10\41\1\u0106"+
    "\20\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\4\41\1\u0107\24\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\14\41\1\u0108\14\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\22\41\1\u0109\6\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\13\41\1\u010a"+
    "\15\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\1\u010b\30\41\3\0\1\41"+
    "\12\0\1\6\7\0\1\6\1\0\3\6\6\0\5\6"+
    "\1\u010c\13\6\1\u010d\7\6\3\0\1\6\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\4\41"+
    "\1\u010e\24\41\3\0\1\41\4\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\3\41\6\0\22\41\1\u010f\6\41"+
    "\3\0\1\41\4\0\1\64\5\0\1\6\7\0\1\6"+
    "\1\0\3\41\6\0\13\41\1\u0110\15\41\3\0\1\41"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\22\41\1\u0111\6\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\4\41"+
    "\1\u0112\24\41\3\0\1\41\4\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\3\41\6\0\17\41\1\u0113\11\41"+
    "\3\0\1\41\4\0\1\64\5\0\1\6\7\0\1\6"+
    "\1\0\3\41\6\0\20\41\1\u0114\10\41\3\0\1\41"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\13\41\1\u0115\15\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\2\41"+
    "\1\u0116\26\41\3\0\1\41\4\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\3\41\6\0\1\u0117\30\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\4\41\1\u0118\24\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\22\41\1\u0119\6\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\21\41\1\u011a"+
    "\7\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\6\41\1\u011b\22\41\3\0"+
    "\1\41\12\0\1\6\7\0\1\6\1\0\3\6\6\0"+
    "\1\u011c\30\6\3\0\1\6\4\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\3\41\6\0\7\41\1\u011d\21\41"+
    "\3\0\1\41\24\0\3\u011e\46\0\17\225\1\372\10\225"+
    "\1\u011f\41\225\45\0\1\u0120\25\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\3\41\6\0\10\41\1\u0121\20\41"+
    "\3\0\1\41\4\0\1\64\5\0\1\6\7\0\1\6"+
    "\1\0\3\41\6\0\16\41\1\u0122\12\41\3\0\1\41"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\15\41\1\u0123\13\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\4\41"+
    "\1\u0124\24\41\3\0\1\41\4\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\3\41\6\0\16\41\1\u0125\12\41"+
    "\3\0\1\41\4\0\1\64\5\0\1\6\7\0\1\6"+
    "\1\0\3\41\6\0\22\41\1\u0126\6\41\3\0\1\41"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\16\41\1\u0127\12\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\17\41"+
    "\1\u0128\11\41\3\0\1\41\4\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\3\41\6\0\2\41\1\u0129\26\41"+
    "\3\0\1\41\4\0\1\64\5\0\1\6\7\0\1\6"+
    "\1\0\3\41\6\0\1\u012a\30\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\4\41\1\u012b\24\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\13\41\1\u012c"+
    "\15\41\3\0\1\41\12\0\1\6\7\0\1\6\1\0"+
    "\3\6\6\0\1\u012d\30\6\3\0\1\6\12\0\1\6"+
    "\7\0\1\6\1\0\3\6\6\0\10\6\1\u012e\20\6"+
    "\3\0\1\6\4\0\1\64\5\0\1\6\7\0\1\6"+
    "\1\0\3\41\6\0\14\41\1\u012f\14\41\3\0\1\41"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\20\41\1\u0130\10\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\1\u0131"+
    "\30\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\4\41\1\u0132\24\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\12\41\1\u0133\16\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\3\41\1\u0134\25\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\2\41\1\u0135"+
    "\26\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\4\41\1\u0136\24\41\3\0"+
    "\1\41\12\0\1\6\7\0\1\6\1\0\3\6\6\0"+
    "\13\6\1\u0137\15\6\3\0\1\6\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\10\41\1\u0138"+
    "\20\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\15\41\1\u0139\13\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\23\41\1\u013a\5\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\20\41\1\u013b\10\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\15\41\1\u013c"+
    "\13\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\15\41\1\u013d\13\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\22\41\1\u013e\6\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\22\41\1\u013f\6\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\20\41\1\u0140"+
    "\10\41\3\0\1\41\12\0\1\6\7\0\1\6\1\0"+
    "\3\6\6\0\14\6\1\u0141\14\6\3\0\1\6\12\0"+
    "\1\6\7\0\1\6\1\0\3\6\6\0\30\6\1\u0142"+
    "\3\0\1\6\4\0\1\64\5\0\1\6\7\0\1\6"+
    "\1\0\3\41\6\0\4\41\1\u0143\24\41\3\0\1\41"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\20\41\1\u0144\10\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\1\u0145"+
    "\30\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\22\41\1\u0146\6\41\3\0"+
    "\1\41\12\0\1\6\7\0\1\6\1\0\3\6\6\0"+
    "\10\6\1\u0147\20\6\3\0\1\6\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\13\41\1\u0148"+
    "\15\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\5\41\1\u0149\23\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\15\41\1\u014a\13\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\31\41\3\0\1\u014b\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\10\41\1\u014c\20\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\4\41\1\u014d\24\41\3\0\1\41\12\0"+
    "\1\6\7\0\1\6\1\0\3\6\6\0\10\6\1\u014e"+
    "\20\6\3\0\1\6\12\0\1\6\7\0\1\6\1\0"+
    "\3\6\6\0\4\6\1\u014f\24\6\3\0\1\6\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\15\41\1\u0150\13\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\22\41\1\u0151"+
    "\6\41\3\0\1\41\12\0\1\6\7\0\1\6\1\0"+
    "\3\6\6\0\6\6\1\u0152\22\6\3\0\1\6\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\4\41\1\u0153\24\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\16\41\1\u0154"+
    "\12\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\3\41\1\u0155\25\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\1\u0156\30\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\15\41"+
    "\1\u0157\13\41\3\0\1\41\4\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\3\41\6\0\1\u0158\30\41\3\0"+
    "\1\41\12\0\1\6\7\0\1\6\1\0\3\6\6\0"+
    "\13\6\1\u0159\15\6\3\0\1\6\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\1\41\1\u015a"+
    "\27\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\16\41\1\u015b\12\41\3\0"+
    "\1\41\12\0\1\6\7\0\1\6\1\0\3\6\6\0"+
    "\15\6\1\u015c\13\6\3\0\1\6\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\13\41\1\u015d"+
    "\15\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\6\41\1\u015e\22\41\3\0"+
    "\1\41\12\0\1\6\7\0\1\6\1\0\3\6\6\0"+
    "\27\6\1\u015f\1\6\3\0\1\6\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\27\41\1\u0160"+
    "\1\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\20\41\1\u0161\10\41\3\0"+
    "\1\41\4\0\1\64\5\0\1\6\7\0\1\6\1\0"+
    "\3\41\6\0\4\41\1\u0162\24\41\3\0\1\41\4\0"+
    "\1\64\5\0\1\6\7\0\1\6\1\0\3\41\6\0"+
    "\10\41\1\u0163\20\41\3\0\1\41\4\0\1\64\5\0"+
    "\1\6\7\0\1\6\1\0\3\41\6\0\10\41\1\u0164"+
    "\20\41\3\0\1\41\4\0\1\64\5\0\1\6\7\0"+
    "\1\6\1\0\3\41\6\0\1\u0165\30\41\3\0\1\41"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\3\41\1\u0166\25\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\16\41"+
    "\1\u0167\12\41\3\0\1\41\4\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\3\41\6\0\22\41\1\u0168\6\41"+
    "\3\0\1\41\4\0\1\64\5\0\1\6\7\0\1\6"+
    "\1\0\3\41\6\0\16\41\1\u0169\12\41\3\0\1\41"+
    "\4\0\1\64\5\0\1\6\7\0\1\6\1\0\3\41"+
    "\6\0\20\41\1\u016a\10\41\3\0\1\41\4\0\1\64"+
    "\5\0\1\6\7\0\1\6\1\0\3\41\6\0\10\41"+
    "\1\u016b\20\41\3\0\1\41\4\0\1\64\5\0\1\6"+
    "\7\0\1\6\1\0\3\41\6\0\16\41\1\u016c\12\41"+
    "\3\0\1\41\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[16008];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\5\11\1\1\1\11\2\1\2\11"+
    "\1\1\2\11\22\1\3\11\1\1\1\11\1\1\1\0"+
    "\2\11\1\0\1\11\4\0\44\1\1\11\1\1\3\0"+
    "\64\1\2\0\70\1\2\0\51\1\2\0\42\1\3\11"+
    "\114\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public LinkedList<Errores> listaErrores = new LinkedList<>();

    public LinkedList<Errores> getErrores(){
        return listaErrores;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
      yyline = 1;
    yycolumn = 1;
    listaErrores = new LinkedList<>();
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { listaErrores.add(new Errores("LEXICO","El caracter "+
                yytext() + " No pertenece al lenguaje", yyline, yycolumn, "Eliminar Caracter: "+ yytext()));
            }
          // fall through
          case 93: break;
          case 2:
            { 
            }
          // fall through
          case 94: break;
          case 3:
            { return new Symbol(sym.DIFER, yyline, yycolumn,yytext());
            }
          // fall through
          case 95: break;
          case 4:
            { return new Symbol(sym.IDENTIFICADOR, yyline, yycolumn,yytext());
            }
          // fall through
          case 96: break;
          case 5:
            { return new Symbol(sym.PAR1, yyline, yycolumn,yytext());
            }
          // fall through
          case 97: break;
          case 6:
            { return new Symbol(sym.PAR2, yyline, yycolumn,yytext());
            }
          // fall through
          case 98: break;
          case 7:
            { return new Symbol(sym.POR, yyline, yycolumn,yytext());
            }
          // fall through
          case 99: break;
          case 8:
            { return new Symbol(sym.MAS, yyline, yycolumn,yytext());
            }
          // fall through
          case 100: break;
          case 9:
            { return new Symbol(sym.COMA, yyline, yycolumn,yytext());
            }
          // fall through
          case 101: break;
          case 10:
            { return new Symbol(sym.MENOS, yyline, yycolumn,yytext());
            }
          // fall through
          case 102: break;
          case 11:
            { return new Symbol(sym.DIVI, yyline, yycolumn,yytext());
            }
          // fall through
          case 103: break;
          case 12:
            { return new Symbol(sym.ENTERO, yyline, yycolumn,yytext());
            }
          // fall through
          case 104: break;
          case 13:
            { return new Symbol(sym.DOSPTS, yyline, yycolumn,yytext());
            }
          // fall through
          case 105: break;
          case 14:
            { return new Symbol(sym.FINCADENA, yyline, yycolumn,yytext());
            }
          // fall through
          case 106: break;
          case 15:
            { return new Symbol(sym.MENOR, yyline, yycolumn,yytext());
            }
          // fall through
          case 107: break;
          case 16:
            { return new Symbol(sym.IGUAL, yyline, yycolumn,yytext());
            }
          // fall through
          case 108: break;
          case 17:
            { return new Symbol(sym.MAYOR, yyline, yycolumn,yytext());
            }
          // fall through
          case 109: break;
          case 18:
            { return new Symbol(sym.CORCHEA, yyline, yycolumn,yytext());
            }
          // fall through
          case 110: break;
          case 19:
            { return new Symbol(sym.CORCHEC, yyline, yycolumn,yytext());
            }
          // fall through
          case 111: break;
          case 20:
            { return new Symbol(sym.LLAVEA, yyline, yycolumn,yytext());
            }
          // fall through
          case 112: break;
          case 21:
            { return new Symbol(sym.LLAVEC, yyline, yycolumn,yytext());
            }
          // fall through
          case 113: break;
          case 22:
            { String cadena = yytext();
    cadena = cadena.substring(1, cadena.length()-1);
    return new Symbol(sym.CADENA, yyline, yycolumn,cadena);
            }
          // fall through
          case 114: break;
          case 23:
            { return new Symbol(sym.AND, yyline, yycolumn,yytext());
            }
          // fall through
          case 115: break;
          case 24:
            { String caracter = yytext();
    caracter = caracter.substring(1, caracter.length()-1);
    return new Symbol(sym.CARACTER, yyline, yycolumn, caracter);
            }
          // fall through
          case 116: break;
          case 25:
            { return new Symbol(sym.ID, yyline, yycolumn,yytext());
            }
          // fall through
          case 117: break;
          case 26:
            { return new Symbol(sym.IF, yyline, yycolumn,yytext());
            }
          // fall through
          case 118: break;
          case 27:
            { return new Symbol(sym.OR, yyline, yycolumn,yytext());
            }
          // fall through
          case 119: break;
          case 28:
            { return new Symbol(sym.VALOR, yyline, yycolumn,yytext());
            }
          // fall through
          case 120: break;
          case 29:
            { return new Symbol(sym.ALT, yyline, yycolumn,yytext());
            }
          // fall through
          case 121: break;
          case 30:
            { return new Symbol(sym.ASC, yyline, yycolumn,yytext());
            }
          // fall through
          case 122: break;
          case 31:
            { return new Symbol(sym.PARRA, yyline, yycolumn,yytext());
            }
          // fall through
          case 123: break;
          case 32:
            { return new Symbol(sym.END, yyline, yycolumn,yytext());
            }
          // fall through
          case 124: break;
          case 33:
            { return new Symbol(sym.SRC, yyline, yycolumn,yytext());
            }
          // fall through
          case 125: break;
          case 34:
            { return new Symbol(sym.DECI, yyline, yycolumn,yytext());
            }
          // fall through
          case 126: break;
          case 35:
            { return new Symbol(sym.CHAR, yyline, yycolumn,yytext());
            }
          // fall through
          case 127: break;
          case 36:
            { return new Symbol(sym.COLS, yyline, yycolumn,yytext());
            }
          // fall through
          case 128: break;
          case 37:
            { return new Symbol(sym.BR, yyline, yycolumn,yytext());
            }
          // fall through
          case 129: break;
          case 38:
            { return new Symbol(sym.CC, yyline, yycolumn,yytext());
            }
          // fall through
          case 130: break;
          case 39:
            { return new Symbol(sym.TITUH, yyline, yycolumn,yytext());
            }
          // fall through
          case 131: break;
          case 40:
            { return new Symbol(sym.DESC, yyline, yycolumn,yytext());
            }
          // fall through
          case 132: break;
          case 41:
            { return new Symbol(sym.ELIF, yyline, yycolumn,yytext());
            }
          // fall through
          case 133: break;
          case 42:
            { return new Symbol(sym.ELSE, yyline, yycolumn,yytext());
            }
          // fall through
          case 134: break;
          case 43:
            { return new Symbol(sym.EXIT, yyline, yycolumn,yytext());
            }
          // fall through
          case 135: break;
          case 44:
            { return new Symbol(sym.HREF, yyline, yycolumn,yytext());
            }
          // fall through
          case 136: break;
          case 45:
            { return new Symbol(sym.INIT, yyline, yycolumn,yytext());
            }
          // fall through
          case 137: break;
          case 46:
            { return new Symbol(sym.NAME, yyline, yycolumn,yytext());
            }
          // fall through
          case 138: break;
          case 47:
            { return new Symbol(sym.ROWS, yyline, yycolumn,yytext());
            }
          // fall through
          case 139: break;
          case 48:
            { return new Symbol(sym.THEN, yyline, yycolumn,yytext());
            }
          // fall through
          case 140: break;
          case 49:
            { return new Symbol(sym.TRUE, yyline, yycolumn,yytext());
            }
          // fall through
          case 141: break;
          case 50:
            { return new Symbol(sym.TYPE, yyline, yycolumn,yytext());
            }
          // fall through
          case 142: break;
          case 51:
            { return new Symbol(sym.CLASS, yyline, yycolumn,yytext());
            }
          // fall through
          case 143: break;
          case 52:
            { return new Symbol(sym.COLOR, yyline, yycolumn,yytext());
            }
          // fall through
          case 144: break;
          case 53:
            { return new Symbol(sym.DIV, yyline, yycolumn,yytext());
            }
          // fall through
          case 145: break;
          case 54:
            { return new Symbol(sym.IMG, yyline, yycolumn,yytext());
            }
          // fall through
          case 146: break;
          case 55:
            { return new Symbol(sym.FALSE, yyline, yycolumn,yytext());
            }
          // fall through
          case 147: break;
          case 56:
            { return new Symbol(sym.WHILE, yyline, yycolumn,yytext());
            }
          // fall through
          case 148: break;
          case 57:
            { return new Symbol(sym.WIDTH, yyline, yycolumn,yytext());
            }
          // fall through
          case 149: break;
          case 58:
            { return new Symbol(sym.BODY, yyline, yycolumn,yytext());
            }
          // fall through
          case 150: break;
          case 59:
            { return new Symbol(sym.HEAD, yyline, yycolumn,yytext());
            }
          // fall through
          case 151: break;
          case 60:
            { return new Symbol(sym.LINK, yyline, yycolumn,yytext());
            }
          // fall through
          case 152: break;
          case 61:
            { return new Symbol(sym.SPAM, yyline, yycolumn,yytext());
            }
          // fall through
          case 153: break;
          case 62:
            { return new Symbol(sym.HEIGHT, yyline, yycolumn,yytext());
            }
          // fall through
          case 154: break;
          case 63:
            { return new Symbol(sym.HUNTIL, yyline, yycolumn,yytext());
            }
          // fall through
          case 155: break;
          case 64:
            { return new Symbol(sym.INSERT, yyline, yycolumn,yytext());
            }
          // fall through
          case 156: break;
          case 65:
            { return new Symbol(sym.LETPAR, yyline, yycolumn,yytext());
            }
          // fall through
          case 157: break;
          case 66:
            { return new Symbol(sym.REPEAT, yyline, yycolumn,yytext());
            }
          // fall through
          case 158: break;
          case 67:
            { return new Symbol(sym.STRING, yyline, yycolumn,yytext());
            }
          // fall through
          case 159: break;
          case 68:
            { return new Symbol(sym.GLOBAL, yyline, yycolumn,yytext());
            }
          // fall through
          case 160: break;
          case 69:
            { return new Symbol(sym.BOOLEAN, yyline, yycolumn,yytext());
            }
          // fall through
          case 161: break;
          case 70:
            { return new Symbol(sym.INPUT, yyline, yycolumn,yytext());
            }
          // fall through
          case 162: break;
          case 71:
            { return new Symbol(sym.TITLE, yyline, yycolumn,yytext());
            }
          // fall through
          case 163: break;
          case 72:
            { return new Symbol(sym.DECIMAL, yyline, yycolumn,yytext());
            }
          // fall through
          case 164: break;
          case 73:
            { return new Symbol(sym.INTEGER, yyline, yycolumn,yytext());
            }
          // fall through
          case 165: break;
          case 74:
            { return new Symbol(sym.ONCLICK, yyline, yycolumn,yytext());
            }
          // fall through
          case 166: break;
          case 75:
            { return new Symbol(sym.LOAD, yyline, yycolumn,yytext());
            }
          // fall through
          case 167: break;
          case 76:
            { return new Symbol(sym.REVERSE, yyline, yycolumn,yytext());
            }
          // fall through
          case 168: break;
          case 77:
            { return new Symbol(sym.BUTTON, yyline, yycolumn,yytext());
            }
          // fall through
          case 169: break;
          case 78:
            { return new Symbol(sym.OPTION, yyline, yycolumn,yytext());
            }
          // fall through
          case 170: break;
          case 79:
            { return new Symbol(sym.SELECT, yyline, yycolumn,yytext());
            }
          // fall through
          case 171: break;
          case 80:
            { return new Symbol(sym.LETIMPAR, yyline, yycolumn,yytext());
            }
          // fall through
          case 172: break;
          case 81:
            { return new Symbol(sym.REDIRECT, yyline, yycolumn,yytext());
            }
          // fall through
          case 173: break;
          case 82:
            { return new Symbol(sym.FONTSI, yyline, yycolumn,yytext());
            }
          // fall through
          case 174: break;
          case 83:
            { return new Symbol(sym.THENWHILE, yyline, yycolumn,yytext());
            }
          // fall through
          case 175: break;
          case 84:
            { return new Symbol(sym.ALEINF, yyline, yycolumn,yytext());
            }
          // fall through
          case 176: break;
          case 85:
            { return new Symbol(sym.BACKG, yyline, yycolumn,yytext());
            }
          // fall through
          case 177: break;
          case 86:
            { return new Symbol(sym.TEXTAREA, yyline, yycolumn,yytext());
            }
          // fall through
          case 178: break;
          case 87:
            { return new Symbol(sym.TEXTALI, yyline, yycolumn,yytext());
            }
          // fall through
          case 179: break;
          case 88:
            { return new Symbol(sym.SCRIPT, yyline, yycolumn,yytext());
            }
          // fall through
          case 180: break;
          case 89:
            { return new Symbol(sym.FONTFA, yyline, yycolumn,yytext());
            }
          // fall through
          case 181: break;
          case 90:
            { return new Symbol(sym.ELEMENT, yyline, yycolumn,yytext());
            }
          // fall through
          case 182: break;
          case 91:
            { return new Symbol(sym.NUMALE, yyline, yycolumn,yytext());
            }
          // fall through
          case 183: break;
          case 92:
            { return new Symbol(sym.CARALE, yyline, yycolumn,yytext());
            }
          // fall through
          case 184: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
