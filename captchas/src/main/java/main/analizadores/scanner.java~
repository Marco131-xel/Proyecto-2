// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/java/main/analizadores/lexico.jflex

package main.analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import main.excepciones.Errores;


@SuppressWarnings("fallthrough")
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  1,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
    20, 21, 22, 23, 23, 23, 23, 23, 23, 24, 25, 26, 27, 28, 29, 30, 
    31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 
    47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,  0, 59,  0, 60, 
     0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 
    47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 64,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\26\21\1\22\1\23\1\24\1\1\1\25"+
    "\1\2\1\0\1\26\2\0\1\27\1\0\16\21\1\0"+
    "\15\21\1\30\1\31\32\21\1\32\1\0\1\33\1\0"+
    "\1\21\1\34\2\21\1\35\22\21\1\36\2\21\2\0"+
    "\3\21\1\37\30\21\1\40\3\21\1\41\2\21\1\42"+
    "\12\21\1\40\1\0\1\21\1\40\6\21\1\43\3\21"+
    "\1\44\3\21\1\45\1\21\1\46\1\21\1\47\12\21"+
    "\1\0\1\50\1\21\1\51\1\52\1\53\6\21\1\54"+
    "\2\21\1\55\3\21\1\56\3\21\1\57\10\21\1\60"+
    "\3\21\1\61\1\62\1\63\1\64\4\21\2\0\1\21"+
    "\1\65\5\21\1\66\1\67\4\21\1\70\1\21\1\71"+
    "\10\21\1\0\1\21\1\72\16\21\1\61\11\21\1\73"+
    "\1\74\1\21\2\0\5\21\1\41\1\21\1\75\1\21"+
    "\1\76\1\21\1\77\3\21\1\100\2\21\1\0\3\21"+
    "\1\101\1\0\1\102\1\103\3\21\1\104\3\21\1\105"+
    "\2\21\1\106\2\21\1\40\1\2\2\21\1\107\3\21"+
    "\1\110\4\21\1\111\1\0\1\112\2\21\1\0\1\113"+
    "\2\21\1\114\1\21\1\115\6\21\1\116\1\117\1\21"+
    "\1\120\1\21\1\121\2\21\1\0\1\122\1\21\1\123"+
    "\11\21\1\124\1\0\3\21\1\125\1\126\1\127\2\21"+
    "\1\130\1\21\1\0\1\21\1\65\1\131\1\21\1\132"+
    "\1\133\1\0\2\21\1\0\2\21\1\0\1\134\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\135"+
    "\72\0\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[508];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\101\0\u0104\0\u0145\0\101"+
    "\0\101\0\101\0\101\0\101\0\101\0\u0186\0\101\0\101"+
    "\0\u01c7\0\101\0\101\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c"+
    "\0\u034d\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514"+
    "\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c"+
    "\0\u075d\0\101\0\101\0\101\0\u079e\0\101\0\u07df\0\u0820"+
    "\0\101\0\u0861\0\u08a2\0\u0861\0\u08e3\0\u0924\0\u0965\0\u09a6"+
    "\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae"+
    "\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6"+
    "\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe"+
    "\0\u0fff\0\u0492\0\u0492\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144"+
    "\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c"+
    "\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554"+
    "\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699\0\101\0\u16da\0\u08a2"+
    "\0\u171b\0\u175c\0\u0492\0\u179d\0\u17de\0\u0492\0\u181f\0\u1860"+
    "\0\u18a1\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68"+
    "\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70"+
    "\0\u0492\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37"+
    "\0\u0492\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe"+
    "\0\u203f\0\u2080\0\u20c1\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206"+
    "\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e"+
    "\0\u244f\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616"+
    "\0\u0492\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd"+
    "\0\u281e\0\u285f\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u0492\0\u29a4"+
    "\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u0492\0\u2b2a\0\u2b6b"+
    "\0\u2bac\0\u0492\0\u2bed\0\u2c2e\0\u2c6f\0\u0492\0\u2cb0\0\u0492"+
    "\0\u2cf1\0\u0492\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u2e77"+
    "\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\101\0\u2ffd\0\u0492"+
    "\0\u0492\0\u0492\0\u303e\0\u307f\0\u30c0\0\u3101\0\u3142\0\u3183"+
    "\0\u0492\0\u31c4\0\u3205\0\u0492\0\u3246\0\u3287\0\u32c8\0\u0492"+
    "\0\u3309\0\u334a\0\u338b\0\u0492\0\u33cc\0\u340d\0\u344e\0\u348f"+
    "\0\u34d0\0\u3511\0\u3552\0\u3593\0\u0492\0\u35d4\0\u3615\0\u3656"+
    "\0\u3697\0\u36d8\0\u0492\0\u0492\0\u3719\0\u375a\0\u379b\0\u37dc"+
    "\0\u381d\0\u385e\0\u389f\0\u0492\0\u38e0\0\u3921\0\u3962\0\u39a3"+
    "\0\u39e4\0\u0492\0\u0492\0\u3a25\0\u3a66\0\u3aa7\0\u3ae8\0\u0492"+
    "\0\u3b29\0\u0492\0\u3b6a\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e\0\u3caf"+
    "\0\u3cf0\0\u3d31\0\u3d72\0\u3db3\0\u0492\0\u3df4\0\u3e35\0\u3e76"+
    "\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d\0\u407e"+
    "\0\u40bf\0\u4100\0\u4141\0\u0492\0\u4182\0\u41c3\0\u4204\0\u4245"+
    "\0\u4286\0\u42c7\0\u4308\0\u4349\0\u438a\0\u0492\0\u0492\0\u43cb"+
    "\0\u440c\0\u444d\0\u448e\0\u44cf\0\u4510\0\u4551\0\u4592\0\u0492"+
    "\0\u45d3\0\u0492\0\u4614\0\u0492\0\u4655\0\u0492\0\u4696\0\u46d7"+
    "\0\u4718\0\u0492\0\u4759\0\u479a\0\u47db\0\u481c\0\u485d\0\u489e"+
    "\0\u0492\0\u48df\0\u0492\0\u0492\0\u4920\0\u4961\0\u49a2\0\u0492"+
    "\0\u49e3\0\u4a24\0\u4a65\0\u0492\0\u4aa6\0\u4ae7\0\u0492\0\u4b28"+
    "\0\u4b69\0\101\0\101\0\u4baa\0\u4beb\0\u0492\0\u4c2c\0\u4c6d"+
    "\0\u4cae\0\u0492\0\u4cef\0\u4d30\0\u4d71\0\u4db2\0\u0492\0\u4df3"+
    "\0\u0492\0\u4e34\0\u4e75\0\u4eb6\0\u0492\0\u4ef7\0\u4f38\0\u0492"+
    "\0\u4f79\0\u0492\0\u4fba\0\u4ffb\0\u503c\0\u507d\0\u50be\0\u50ff"+
    "\0\u0492\0\u0492\0\u5140\0\u0492\0\u5181\0\101\0\u51c2\0\u5203"+
    "\0\u5244\0\u0492\0\u5285\0\u0492\0\u52c6\0\u5307\0\u5348\0\u5389"+
    "\0\u53ca\0\u540b\0\u544c\0\u548d\0\u54ce\0\u0924\0\u550f\0\u5550"+
    "\0\u5591\0\u55d2\0\u0492\0\u0492\0\u0492\0\u5613\0\u5654\0\u0492"+
    "\0\u5695\0\u56d6\0\u5717\0\u0924\0\u0924\0\u5758\0\u0492\0\u0924"+
    "\0\u5799\0\u57da\0\u581b\0\u585c\0\u589d\0\u58de\0\u591f\0\u0492"+
    "\0\u5960\0\u59a1\0\u59e2\0\u5a23\0\u5a64\0\u5aa5\0\u5ae6\0\u5b27"+
    "\0\u0492\0\u5b68\0\u5ba9\0\u5bea\0\u5c2b\0\u5c6c\0\u5cad\0\u5cee"+
    "\0\u5d2f\0\u5d70\0\u5db1\0\u5df2\0\u5e33\0\u5e74\0\u5eb5\0\u5ef6"+
    "\0\u5f37\0\u5f78\0\u5fb9\0\u5ffa\0\u603b\0\u607c\0\u60bd\0\u60fe"+
    "\0\u613f\0\u6180\0\u61c1\0\u6202\0\u6243\0\u6284\0\u62c5\0\u6306"+
    "\0\u6347\0\u6388\0\u63c9\0\u640a\0\u644b\0\u648c\0\u64cd\0\u650e"+
    "\0\u654f\0\u6590\0\u65d1\0\u6612\0\u6653\0\u6694\0\u66d5\0\u6716"+
    "\0\u6757\0\u6798\0\u67d9\0\u681a\0\u685b\0\u689c\0\u68dd\0\u691e"+
    "\0\u695f\0\u69a0\0\u69e1\0\101";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[508];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\2\2"+
    "\1\7\1\2\1\10\1\11\1\12\1\13\1\2\1\14"+
    "\1\2\1\15\5\16\1\17\1\20\1\21\1\22\1\23"+
    "\2\2\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\36\1\44\1\45\1\46\1\36\1\47\1\50"+
    "\1\36\1\51\1\36\1\52\1\53\1\2\1\54\1\55"+
    "\1\56\1\2\102\0\2\3\1\0\1\3\101\0\1\57"+
    "\117\0\5\60\7\0\6\60\45\0\1\61\72\0\1\62"+
    "\15\0\1\63\1\0\5\16\7\0\32\64\2\0\1\62"+
    "\11\0\1\65\77\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\13\36\1\67\4\36\1\70\1\71"+
    "\1\72\7\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\1\73\12\36\1\74"+
    "\2\36\1\75\13\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\1\76\3\36"+
    "\1\77\2\36\1\100\3\36\1\101\2\36\1\102\13\36"+
    "\2\0\1\103\10\0\1\62\3\0\1\66\6\0\1\104"+
    "\1\0\1\66\2\0\5\36\7\0\4\36\1\105\25\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\13\36\1\106\1\36\1\107\11\36"+
    "\1\110\2\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\1\111\15\36\1\112"+
    "\5\36\1\113\5\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\4\36\1\114"+
    "\14\36\1\115\10\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\4\36\1\116"+
    "\14\36\1\117\1\36\1\120\1\121\5\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\3\36\1\122\1\36\1\123\7\36\1\124\14\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\24\36\1\125\5\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\32\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\4\36\1\126\3\36"+
    "\1\127\21\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\1\130\31\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\1\131\23\36\1\132\5\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\13\36\1\133\1\36\1\134\14\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\24\36\1\135\5\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\1\136"+
    "\3\36\1\137\3\36\1\140\5\36\1\141\13\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\1\142\7\36\1\143\10\36\1\144\1\36"+
    "\1\145\6\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\4\36\1\146\2\36"+
    "\1\147\11\36\1\150\6\36\1\151\1\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\4\36\1\152\25\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\7\36"+
    "\1\153\1\154\21\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\4\36\1\155"+
    "\25\36\2\0\1\36\102\0\1\156\2\0\2\57\1\0"+
    "\11\57\2\0\60\57\1\0\2\57\24\0\5\157\7\0"+
    "\6\157\37\0\1\62\17\0\5\64\7\0\32\64\2\0"+
    "\1\62\30\0\5\160\71\0\1\161\67\0\1\66\10\0"+
    "\1\66\2\0\5\66\7\0\32\66\2\0\1\66\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\4\36\1\162\16\36\1\163\6\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\24\36\1\164\5\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\10\36\1\165"+
    "\21\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\2\36\1\166\27\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\2\36\1\167\27\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\1\170\23\36\1\171\5\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\16\36"+
    "\1\172\13\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\21\36\1\173\10\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\15\36\1\174\14\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\1\175\3\36\1\176\25\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\1\177\31\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\13\36\1\200\10\36"+
    "\1\201\5\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\1\36\1\202\1\203"+
    "\1\204\3\36\1\205\1\206\2\36\1\207\2\36\1\210"+
    "\1\211\2\36\1\212\1\213\6\36\2\0\1\36\20\0"+
    "\1\214\42\0\1\215\25\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\2\36\1\216\17\36\1\217"+
    "\7\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\22\36\1\220\7\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\3\36\1\221\26\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\10\36\1\222\21\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\13\36\1\223"+
    "\16\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\15\36\1\224\14\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\2\36\1\225\27\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\15\36\1\226\14\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\1\227\3\36"+
    "\1\230\25\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\10\36\1\231\21\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\4\36\1\232\25\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\23\36\1\233\6\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\15\36"+
    "\1\234\14\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\10\36\1\235\11\36"+
    "\1\236\1\237\6\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\22\36\1\240"+
    "\7\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\5\36\1\241\15\36\1\242"+
    "\6\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\14\36\1\171\15\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\21\36\1\243\10\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\14\36\1\244\10\36\1\227\4\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\14\36\1\245\15\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\10\36\1\246"+
    "\21\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\2\36\1\247\27\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\21\36\1\250\10\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\3\36\1\251\26\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\3\36\1\252"+
    "\13\36\1\253\5\36\1\254\4\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\6\36\1\255\23\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\26\36\1\256"+
    "\3\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\15\36\1\257\14\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\13\36\1\260\16\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\2\36\1\261\27\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\21\36\1\262"+
    "\10\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\1\263\26\36\1\264\2\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\4\36\1\265\25\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\24\36\1\266\5\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\17\36"+
    "\1\267\12\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\21\36\1\270\10\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\10\36\1\271\21\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\3\36\1\272\26\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\13\36"+
    "\1\273\16\36\2\0\1\36\30\0\5\274\7\0\6\274"+
    "\54\0\1\275\63\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\21\36\1\276\10\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\1\277\31\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\1\300\31\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\12\36\1\301\17\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\2\36\1\302\27\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\4\36"+
    "\1\277\25\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\13\36\1\303\16\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\1\304\31\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\23\36\1\305\6\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\21\36\1\306"+
    "\10\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\2\36\1\307\27\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\22\36\1\310\7\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\16\36\1\311\3\36\1\312\1\36\1\313\5\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\21\36\1\314\10\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\16\36\1\315\2\36\1\316\2\36\1\317\5\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\2\36\1\320\27\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\10\36\1\321\21\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\1\36\1\322\3\36\7\0"+
    "\4\36\1\323\25\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\14\36\1\324"+
    "\1\325\14\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\10\36\1\326\21\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\17\36\1\327\12\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\2\36\1\330\1\36\1\331\12\36\1\332\12\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\4\36\1\333\3\36\1\334\21\36"+
    "\2\0\1\36\63\0\1\335\110\0\1\336\15\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\10\36"+
    "\1\337\21\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\2\36\1\340\27\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\4\36\1\341\25\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\23\36\1\342\6\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\22\36"+
    "\1\343\7\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\23\36\1\344\6\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\7\36\1\345\22\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\4\36\1\346\25\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\30\36"+
    "\1\277\1\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\4\36\1\347\25\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\6\36\1\350\23\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\5\36\1\351\24\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\17\36"+
    "\1\352\12\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\23\36\1\353\6\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\23\36\1\354\6\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\4\36\1\355\25\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\4\36"+
    "\1\356\25\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\23\36\1\357\6\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\23\36\1\360\6\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\10\36\1\361\6\36\1\362\12\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\16\36\1\363\13\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\4\36"+
    "\1\364\25\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\1\36\1\365\30\36"+
    "\2\0\1\366\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\25\36\1\171\4\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\13\36\1\367\16\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\17\36"+
    "\1\370\12\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\10\36\1\371\21\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\10\36\1\372\21\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\4\36\1\373\25\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\4\36"+
    "\1\374\25\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\7\36\1\241\22\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\22\36\1\375\7\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\22\36\1\376\7\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\25\36"+
    "\1\377\4\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\10\36\1\u0100\21\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\13\36\1\277\16\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\23\36\1\u0101\6\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\15\36"+
    "\1\u0102\14\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\4\36\1\u0103\25\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\4\36\1\u0104\25\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\3\36\1\u0105\26\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\13\36"+
    "\1\u0106\7\36\1\171\6\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\23\36"+
    "\1\u0107\6\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\13\36\1\u0108\16\36"+
    "\2\0\1\36\30\0\5\u0109\7\0\6\u0109\33\0\21\275"+
    "\1\u010a\13\275\1\0\43\275\4\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\23\36\1\u010b\6\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\13\36\1\u010c\16\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\6\36\1\u010d\23\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\12\36"+
    "\1\277\17\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\4\36\1\u010e\25\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\2\36\1\u010f\27\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\4\36\1\u0110\25\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\12\36"+
    "\1\u0111\17\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\22\36\1\u0112\7\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\21\36\1\u0113\10\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\14\36\1\u0114\15\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\10\36"+
    "\1\u0115\21\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\3\36\1\u0116\26\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\23\36\1\u0117\6\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\25\36\1\u0118\4\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\1\u0119"+
    "\31\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\6\36\1\u011a\23\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\17\36\1\u011b\12\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\15\36\1\u011c\14\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\23\36\1\u011d"+
    "\6\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\21\36\1\u011e\10\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\13\36\1\u011f\16\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\1\u0120\31\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\27\36\1\u0121\2\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\23\36\1\u0122\6\36\2\0\1\36"+
    "\73\0\1\u0123\15\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\14\36\1\u0124\15\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\4\36\1\u0125\25\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\u0126\2\0\5\36\7\0\32\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\22\36\1\u0127\7\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\25\36\1\u0128\4\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\15\36"+
    "\1\277\14\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\7\36\1\u0129\22\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\22\36\1\u012a\7\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\10\36\1\u012b\21\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\21\36"+
    "\1\u012c\10\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\6\36\1\u012d\23\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\10\36\1\u012e\21\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\14\36\1\u012f\15\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\1\u0130"+
    "\31\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\16\36\1\347\13\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\4\36\1\u0131\25\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\1\u0132\31\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\10\36\1\u0133\21\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\13\36\1\171\16\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\16\36\1\u0134\13\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\21\36"+
    "\1\u0135\10\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\1\u0136\31\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\21\36\1\u0137\10\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\u0138\2\0\5\36\7\0"+
    "\32\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\4\36\1\u0139\25\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\15\36\1\u013a\14\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\u013b\2\0\5\36\7\0"+
    "\32\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\26\36\1\u013c\3\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\1\u013d\31\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\4\36"+
    "\1\u013e\25\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\7\36\1\u013f\22\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\16\36\1\u0140\13\36\2\0\1\36"+
    "\30\0\5\u0141\7\0\6\u0141\33\0\21\275\1\u0142\13\275"+
    "\1\0\43\275\4\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\32\36\2\0\1\u0143\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\21\36"+
    "\1\u0144\10\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\1\u0145\31\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\23\36\1\u0146\6\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\21\36\1\360\10\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\1\36\1\u0147"+
    "\30\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\15\36\1\u0148\14\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\4\36\1\u0149\25\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\30\36\1\u014a\1\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\23\36\1\u014b"+
    "\6\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\3\36\1\u014c\26\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\24\36\1\u014d\5\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\12\36\1\u014e\17\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\10\36\1\u014f"+
    "\21\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\10\36\1\u0150\21\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\4\36\1\u0151\25\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\14\36\1\u0152\15\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\23\36\1\u0153"+
    "\6\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\13\36\1\u0154\16\36\2\0"+
    "\1\36\102\0\1\u0155\6\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\1\u0156\31\36\2\0\1\36"+
    "\14\0\1\66\10\0\1\66\2\0\5\66\7\0\5\66"+
    "\1\u0157\14\66\1\u0158\7\66\2\0\1\66\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\10\36"+
    "\1\164\21\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\1\u010c\31\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\23\36\1\u0159\6\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\5\0"+
    "\1\u015a\1\0\32\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\13\36\1\u015b"+
    "\16\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\23\36\1\u015c\6\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\4\36\1\u015d\25\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\5\36\1\u015e\24\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\17\36\1\u015f"+
    "\12\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\21\36\1\u0160\10\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\21\36\1\u0134\10\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\13\36\1\u0161\16\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\2\36\1\u0162"+
    "\27\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\4\36\1\u0163\25\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\23\36\1\u0164\6\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\22\36\1\u0165\7\36\2\0\1\36\14\0\1\66\10\0"+
    "\1\66\2\0\5\66\7\0\22\66\1\u0166\7\66\2\0"+
    "\1\66\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\21\36\1\277\10\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\6\36\1\u0167\23\36\2\0\1\36\14\0\1\66\10\0"+
    "\1\66\2\0\5\66\7\0\1\u0168\31\66\2\0\1\66"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\7\36\1\u0169\22\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\15\36"+
    "\1\u0128\14\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\26\36\1\277\3\36"+
    "\2\0\1\36\30\0\5\u016a\7\0\6\u016a\33\0\21\275"+
    "\1\u0142\13\275\1\u016b\43\275\4\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\10\36\1\u016c\21\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\16\36\1\u016d\13\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\15\36\1\u016e\14\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\4\36"+
    "\1\u016f\25\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\16\36\1\u0170\13\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\21\36\1\u010c\10\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\16\36\1\u0171\13\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\23\36"+
    "\1\u0172\6\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\16\36\1\u0173\13\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\17\36\1\u0174\12\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\2\36\1\u0175\27\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\1\u0176"+
    "\31\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\4\36\1\u0177\25\36\2\0"+
    "\1\36\15\0\1\u0178\73\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\13\36\1\u0179\16\36\2\0"+
    "\1\36\14\0\1\66\10\0\1\66\2\0\5\66\7\0"+
    "\1\u017a\31\66\2\0\1\66\14\0\1\66\10\0\1\66"+
    "\2\0\5\66\7\0\10\66\1\u017b\21\66\2\0\1\66"+
    "\35\0\1\u017c\53\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\21\36\1\u017d\10\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\30\36\1\360\1\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\1\u017e"+
    "\31\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\4\36\1\u017f\25\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\12\36\1\u0180\17\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\2\36\1\u0181\27\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\4\36\1\u0182"+
    "\25\36\2\0\1\36\14\0\1\66\10\0\1\66\2\0"+
    "\5\66\7\0\4\66\1\u0183\25\66\2\0\1\66\14\0"+
    "\1\66\10\0\1\66\2\0\5\66\7\0\13\66\1\u0184"+
    "\16\66\2\0\1\66\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\10\36\1\u0185\21\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\15\36\1\u0186\14\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\24\36\1\u0187\5\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\21\36\1\u0188"+
    "\10\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\27\36\1\u0134\2\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\15\36\1\u0189\14\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\15\36\1\u018a\14\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\23\36\1\u018b"+
    "\6\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\23\36\1\u018c\6\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\21\36\1\u018d\10\36\2\0\1\36\21\0"+
    "\1\u018e\73\0\1\66\10\0\1\66\2\0\5\66\7\0"+
    "\14\66\1\u018f\15\66\2\0\1\66\14\0\1\66\10\0"+
    "\1\66\2\0\5\66\7\0\31\66\1\u0190\2\0\1\66"+
    "\27\0\1\u0191\61\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\21\36\1\u0192\10\36\2\0\1\36"+
    "\10\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\1\u0193\31\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\23\36\1\u0194"+
    "\6\36\2\0\1\36\14\0\1\66\10\0\1\66\2\0"+
    "\5\66\7\0\21\66\1\u0195\10\66\2\0\1\66\14\0"+
    "\1\66\10\0\1\66\2\0\5\66\7\0\10\66\1\u0196"+
    "\21\66\2\0\1\66\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\13\36\1\u0197\16\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\5\36\1\u0198\24\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\15\36\1\u0199\14\36\2\0\1\36\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\32\36\2\0"+
    "\1\u019a\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\10\36\1\u019b\21\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\4\36\1\u019c\25\36\2\0\1\36\14\0\1\66\10\0"+
    "\1\66\2\0\5\66\7\0\10\66\1\u019d\21\66\2\0"+
    "\1\66\14\0\1\66\10\0\1\66\2\0\5\66\7\0"+
    "\4\66\1\u019e\25\66\2\0\1\66\27\0\1\u019f\61\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\23\36\1\u01a0\6\36\2\0\1\36\14\0\1\66\10\0"+
    "\1\66\2\0\5\66\7\0\10\66\1\u01a1\21\66\2\0"+
    "\1\66\14\0\1\66\10\0\1\66\2\0\5\66\7\0"+
    "\6\66\1\u01a2\23\66\2\0\1\66\10\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\4\36\1\u01a3"+
    "\25\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\16\36\1\u01a4\13\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\3\36\1\u01a5\26\36\2\0\1\36\10\0"+
    "\1\62\3\0\1\66\10\0\1\66\2\0\5\36\7\0"+
    "\1\u01a6\31\36\2\0\1\36\10\0\1\62\3\0\1\66"+
    "\10\0\1\66\2\0\5\36\7\0\15\36\1\u01a7\14\36"+
    "\2\0\1\36\10\0\1\62\3\0\1\66\10\0\1\66"+
    "\2\0\5\36\7\0\1\u01a8\31\36\2\0\1\36\14\0"+
    "\1\66\10\0\1\66\2\0\5\66\7\0\13\66\1\u01a9"+
    "\16\66\2\0\1\66\76\0\1\u01aa\12\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\16\36\1\u01ab"+
    "\13\36\2\0\1\36\14\0\1\66\10\0\1\66\2\0"+
    "\5\66\7\0\5\66\1\u01ac\24\66\2\0\1\66\14\0"+
    "\1\66\10\0\1\66\2\0\5\66\7\0\15\66\1\u01ad"+
    "\14\66\2\0\1\66\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\13\36\1\u01ae\16\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\6\36\1\u01af\23\36\2\0\1\36\14\0"+
    "\1\66\10\0\1\66\2\0\5\66\7\0\30\66\1\u01b0"+
    "\1\66\2\0\1\66\44\0\1\u01b1\44\0\1\62\3\0"+
    "\1\66\10\0\1\66\2\0\5\36\7\0\21\36\1\u01b2"+
    "\10\36\2\0\1\36\10\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\4\36\1\u01b3\25\36\2\0"+
    "\1\36\25\0\1\u01b4\63\0\1\62\3\0\1\66\10\0"+
    "\1\66\2\0\5\36\7\0\10\36\1\u01b5\21\36\2\0"+
    "\1\36\10\0\1\62\3\0\1\66\10\0\1\66\2\0"+
    "\5\36\7\0\1\u01b6\31\36\2\0\1\36\75\0\1\u01b7"+
    "\13\0\1\62\3\0\1\66\10\0\1\66\2\0\5\36"+
    "\7\0\16\36\1\u01b8\13\36\2\0\1\36\10\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\23\36"+
    "\1\u01b9\6\36\2\0\1\36\44\0\1\u01ba\44\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\16\36"+
    "\1\u01bb\13\36\2\0\1\36\25\0\1\u01bc\63\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\21\36"+
    "\1\u01bd\10\36\2\0\1\36\75\0\1\u01be\13\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\10\36"+
    "\1\u01bf\21\36\2\0\1\36\30\0\1\u01c0\60\0\1\62"+
    "\3\0\1\66\10\0\1\66\2\0\5\36\7\0\16\36"+
    "\1\u01c1\13\36\2\0\1\36\25\0\1\u01c2\107\0\1\u01c3"+
    "\72\0\1\u01c4\77\0\1\u01c5\152\0\1\u01c6\24\0\1\u01c7"+
    "\75\0\1\u01c8\106\0\1\u01c9\150\0\1\u01ca\46\0\1\u01cb"+
    "\61\0\1\u01cc\150\0\1\u01cd\47\0\1\u01ce\61\0\1\u01cf"+
    "\150\0\1\u01d0\102\0\1\u01d1\102\0\1\u01d2\31\0\1\u01d3"+
    "\72\0\1\u01d4\157\0\1\u01d5\16\0\1\u01d6\102\0\1\u01d7"+
    "\75\0\1\u01d8\107\0\1\u01d9\147\0\1\u01da\46\0\1\u01db"+
    "\61\0\1\u01dc\150\0\1\u01dd\47\0\1\u01de\61\0\1\u01df"+
    "\150\0\1\u01e0\33\0\1\u01e1\75\0\1\u01e2\107\0\1\u01e3"+
    "\72\0\1\u01e4\152\0\1\u01e5\104\0\1\u01e6\31\0\1\u01e7"+
    "\72\0\1\u01e8\113\0\1\u01e9\51\0\1\u01ea\130\0\1\u01eb"+
    "\46\0\1\u01ec\103\0\1\u01ed\102\0\1\u01ee\101\0\1\u01ef"+
    "\101\0\1\u01f0\101\0\1\u01f1\101\0\1\u01f2\101\0\1\u01f3"+
    "\101\0\1\u01f4\112\0\1\u01f5\102\0\1\u01f6\55\0\1\u01f7"+
    "\110\0\1\u01f8\152\0\1\u01f9\23\0\1\u01fa\77\0\1\u01fb"+
    "\121\0\1\u01fc\42\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[27170];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\2\1\6\11\1\1\2\11"+
    "\1\1\2\11\26\1\3\11\1\1\1\11\1\1\1\0"+
    "\1\11\2\0\1\1\1\0\16\1\1\0\51\1\1\11"+
    "\1\0\1\1\1\0\32\1\2\0\57\1\1\0\37\1"+
    "\1\0\1\11\52\1\2\0\30\1\1\0\35\1\2\0"+
    "\22\1\1\0\4\1\1\0\17\1\2\11\14\1\1\0"+
    "\3\1\1\0\21\1\1\11\2\1\1\0\15\1\1\0"+
    "\12\1\1\0\6\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\72\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[508];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public LinkedList<Errores> listaErrores = new LinkedList<>();

    public LinkedList<Errores> getErrores(){
        return listaErrores;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
      yyline = 1;
    yycolumn = 1;
    listaErrores = new LinkedList<>();
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { listaErrores.add(new Errores("LEXICO","El caracter "+
                yytext() + " No pertenece al lenguaje", yyline, yycolumn, "Eliminar Caracter: "+ yytext()));
            }
          // fall through
          case 95: break;
          case 2:
            { 
            }
          // fall through
          case 96: break;
          case 3:
            { return new Symbol(sym.DIFER, yyline, yycolumn,yytext());
            }
          // fall through
          case 97: break;
          case 4:
            { return new Symbol(sym.COMID, yyline, yycolumn,yytext());
            }
          // fall through
          case 98: break;
          case 5:
            { return new Symbol(sym.PAR1, yyline, yycolumn,yytext());
            }
          // fall through
          case 99: break;
          case 6:
            { return new Symbol(sym.PAR2, yyline, yycolumn,yytext());
            }
          // fall through
          case 100: break;
          case 7:
            { return new Symbol(sym.POR, yyline, yycolumn,yytext());
            }
          // fall through
          case 101: break;
          case 8:
            { return new Symbol(sym.MAS, yyline, yycolumn,yytext());
            }
          // fall through
          case 102: break;
          case 9:
            { return new Symbol(sym.MENOS, yyline, yycolumn,yytext());
            }
          // fall through
          case 103: break;
          case 10:
            { return new Symbol(sym.DIVI, yyline, yycolumn,yytext());
            }
          // fall through
          case 104: break;
          case 11:
            { return new Symbol(sym.ENTERO, yyline, yycolumn,yytext());
            }
          // fall through
          case 105: break;
          case 12:
            { return new Symbol(sym.DOSPTS, yyline, yycolumn,yytext());
            }
          // fall through
          case 106: break;
          case 13:
            { return new Symbol(sym.FINCADENA, yyline, yycolumn,yytext());
            }
          // fall through
          case 107: break;
          case 14:
            { return new Symbol(sym.MENOR, yyline, yycolumn,yytext());
            }
          // fall through
          case 108: break;
          case 15:
            { return new Symbol(sym.IGUAL, yyline, yycolumn,yytext());
            }
          // fall through
          case 109: break;
          case 16:
            { return new Symbol(sym.MAYOR, yyline, yycolumn,yytext());
            }
          // fall through
          case 110: break;
          case 17:
            { return new Symbol(sym.IDENTIFICADOR, yyline, yycolumn,yytext());
            }
          // fall through
          case 111: break;
          case 18:
            { return new Symbol(sym.CORCHEA, yyline, yycolumn,yytext());
            }
          // fall through
          case 112: break;
          case 19:
            { return new Symbol(sym.CORCHEC, yyline, yycolumn,yytext());
            }
          // fall through
          case 113: break;
          case 20:
            { return new Symbol(sym.LLAVEA, yyline, yycolumn,yytext());
            }
          // fall through
          case 114: break;
          case 21:
            { return new Symbol(sym.LLAVEC, yyline, yycolumn,yytext());
            }
          // fall through
          case 115: break;
          case 22:
            { return new Symbol(sym.AND, yyline, yycolumn,yytext());
            }
          // fall through
          case 116: break;
          case 23:
            { return new Symbol(sym.VALOR, yyline, yycolumn,yytext());
            }
          // fall through
          case 117: break;
          case 24:
            { return new Symbol(sym.ID, yyline, yycolumn,yytext());
            }
          // fall through
          case 118: break;
          case 25:
            { return new Symbol(sym.IF, yyline, yycolumn,yytext());
            }
          // fall through
          case 119: break;
          case 26:
            { return new Symbol(sym.OR, yyline, yycolumn,yytext());
            }
          // fall through
          case 120: break;
          case 27:
            { return new Symbol(sym.DECI, yyline, yycolumn,yytext());
            }
          // fall through
          case 121: break;
          case 28:
            { return new Symbol(sym.ALT, yyline, yycolumn,yytext());
            }
          // fall through
          case 122: break;
          case 29:
            { return new Symbol(sym.ASC, yyline, yycolumn,yytext());
            }
          // fall through
          case 123: break;
          case 30:
            { return new Symbol(sym.PARRA, yyline, yycolumn,yytext());
            }
          // fall through
          case 124: break;
          case 31:
            { return new Symbol(sym.END, yyline, yycolumn,yytext());
            }
          // fall through
          case 125: break;
          case 32:
            { return new Symbol(sym.colo, yyline, yycolumn,yytext());
            }
          // fall through
          case 126: break;
          case 33:
            { return new Symbol(sym.clase, yyline, yycolumn,yytext());
            }
          // fall through
          case 127: break;
          case 34:
            { return new Symbol(sym.SRC, yyline, yycolumn,yytext());
            }
          // fall through
          case 128: break;
          case 35:
            { return new Symbol(sym.CHAR, yyline, yycolumn,yytext());
            }
          // fall through
          case 129: break;
          case 36:
            { return new Symbol(sym.COLS, yyline, yycolumn,yytext());
            }
          // fall through
          case 130: break;
          case 37:
            { return new Symbol(sym.BR, yyline, yycolumn,yytext());
            }
          // fall through
          case 131: break;
          case 38:
            { return new Symbol(sym.CC, yyline, yycolumn,yytext());
            }
          // fall through
          case 132: break;
          case 39:
            { return new Symbol(sym.TITUH, yyline, yycolumn,yytext());
            }
          // fall through
          case 133: break;
          case 40:
            { return new Symbol(sym.size, yyline, yycolumn,yytext());
            }
          // fall through
          case 134: break;
          case 41:
            { return new Symbol(sym.DESC, yyline, yycolumn,yytext());
            }
          // fall through
          case 135: break;
          case 42:
            { return new Symbol(sym.ELSE, yyline, yycolumn,yytext());
            }
          // fall through
          case 136: break;
          case 43:
            { return new Symbol(sym.EXIT, yyline, yycolumn,yytext());
            }
          // fall through
          case 137: break;
          case 44:
            { return new Symbol(sym.HREF, yyline, yycolumn,yytext());
            }
          // fall through
          case 138: break;
          case 45:
            { return new Symbol(sym.INIT, yyline, yycolumn,yytext());
            }
          // fall through
          case 139: break;
          case 46:
            { return new Symbol(sym.aling, yyline, yycolumn,yytext());
            }
          // fall through
          case 140: break;
          case 47:
            { return new Symbol(sym.NAME, yyline, yycolumn,yytext());
            }
          // fall through
          case 141: break;
          case 48:
            { return new Symbol(sym.ROWS, yyline, yycolumn,yytext());
            }
          // fall through
          case 142: break;
          case 49:
            { return new Symbol(sym.tipos, yyline, yycolumn,yytext());
            }
          // fall through
          case 143: break;
          case 50:
            { return new Symbol(sym.THEN, yyline, yycolumn,yytext());
            }
          // fall through
          case 144: break;
          case 51:
            { return new Symbol(sym.TRUE, yyline, yycolumn,yytext());
            }
          // fall through
          case 145: break;
          case 52:
            { return new Symbol(sym.TYPE, yyline, yycolumn,yytext());
            }
          // fall through
          case 146: break;
          case 53:
            { return new Symbol(sym.family, yyline, yycolumn,yytext());
            }
          // fall through
          case 147: break;
          case 54:
            { return new Symbol(sym.CLASS, yyline, yycolumn,yytext());
            }
          // fall through
          case 148: break;
          case 55:
            { return new Symbol(sym.COLOR, yyline, yycolumn,yytext());
            }
          // fall through
          case 149: break;
          case 56:
            { return new Symbol(sym.DIV, yyline, yycolumn,yytext());
            }
          // fall through
          case 150: break;
          case 57:
            { return new Symbol(sym.IMG, yyline, yycolumn,yytext());
            }
          // fall through
          case 151: break;
          case 58:
            { return new Symbol(sym.FALSE, yyline, yycolumn,yytext());
            }
          // fall through
          case 152: break;
          case 59:
            { return new Symbol(sym.WHILE, yyline, yycolumn,yytext());
            }
          // fall through
          case 153: break;
          case 60:
            { return new Symbol(sym.WIDTH, yyline, yycolumn,yytext());
            }
          // fall through
          case 154: break;
          case 61:
            { return new Symbol(sym.BODY, yyline, yycolumn,yytext());
            }
          // fall through
          case 155: break;
          case 62:
            { return new Symbol(sym.HEAD, yyline, yycolumn,yytext());
            }
          // fall through
          case 156: break;
          case 63:
            { return new Symbol(sym.LINK, yyline, yycolumn,yytext());
            }
          // fall through
          case 157: break;
          case 64:
            { return new Symbol(sym.SPAM, yyline, yycolumn,yytext());
            }
          // fall through
          case 158: break;
          case 65:
            { return new Symbol(sym.HEIGHT, yyline, yycolumn,yytext());
            }
          // fall through
          case 159: break;
          case 66:
            { return new Symbol(sym.HUNTIL, yyline, yycolumn,yytext());
            }
          // fall through
          case 160: break;
          case 67:
            { return new Symbol(sym.INSERT, yyline, yycolumn,yytext());
            }
          // fall through
          case 161: break;
          case 68:
            { return new Symbol(sym.LETPAR, yyline, yycolumn,yytext());
            }
          // fall through
          case 162: break;
          case 69:
            { return new Symbol(sym.REPEAT, yyline, yycolumn,yytext());
            }
          // fall through
          case 163: break;
          case 70:
            { return new Symbol(sym.STRING, yyline, yycolumn,yytext());
            }
          // fall through
          case 164: break;
          case 71:
            { return new Symbol(sym.BOOLEAN, yyline, yycolumn,yytext());
            }
          // fall through
          case 165: break;
          case 72:
            { return new Symbol(sym.INPUT, yyline, yycolumn,yytext());
            }
          // fall through
          case 166: break;
          case 73:
            { return new Symbol(sym.TITLE, yyline, yycolumn,yytext());
            }
          // fall through
          case 167: break;
          case 74:
            { return new Symbol(sym.DECIMAL, yyline, yycolumn,yytext());
            }
          // fall through
          case 168: break;
          case 75:
            { return new Symbol(sym.INTERGER, yyline, yycolumn,yytext());
            }
          // fall through
          case 169: break;
          case 76:
            { return new Symbol(sym.ONCLICK, yyline, yycolumn,yytext());
            }
          // fall through
          case 170: break;
          case 77:
            { return new Symbol(sym.REVERSE, yyline, yycolumn,yytext());
            }
          // fall through
          case 171: break;
          case 78:
            { return new Symbol(sym.BUTTON, yyline, yycolumn,yytext());
            }
          // fall through
          case 172: break;
          case 79:
            { return new Symbol(sym.OPTION, yyline, yycolumn,yytext());
            }
          // fall through
          case 173: break;
          case 80:
            { return new Symbol(sym.SELECT, yyline, yycolumn,yytext());
            }
          // fall through
          case 174: break;
          case 81:
            { return new Symbol(sym.th, yyline, yycolumn,yytext());
            }
          // fall through
          case 175: break;
          case 82:
            { return new Symbol(sym.LETIMPAR, yyline, yycolumn,yytext());
            }
          // fall through
          case 176: break;
          case 83:
            { return new Symbol(sym.REDIRECT, yyline, yycolumn,yytext());
            }
          // fall through
          case 177: break;
          case 84:
            { return new Symbol(sym.FONTSI, yyline, yycolumn,yytext());
            }
          // fall through
          case 178: break;
          case 85:
            { return new Symbol(sym.THENWHILE, yyline, yycolumn,yytext());
            }
          // fall through
          case 179: break;
          case 86:
            { return new Symbol(sym.ALEINF, yyline, yycolumn,yytext());
            }
          // fall through
          case 180: break;
          case 87:
            { return new Symbol(sym.BACKG, yyline, yycolumn,yytext());
            }
          // fall through
          case 181: break;
          case 88:
            { return new Symbol(sym.TEXTAREA, yyline, yycolumn,yytext());
            }
          // fall through
          case 182: break;
          case 89:
            { return new Symbol(sym.TEXTALI, yyline, yycolumn,yytext());
            }
          // fall through
          case 183: break;
          case 90:
            { return new Symbol(sym.SCRIPT, yyline, yycolumn,yytext());
            }
          // fall through
          case 184: break;
          case 91:
            { return new Symbol(sym.FONTFA, yyline, yycolumn,yytext());
            }
          // fall through
          case 185: break;
          case 92:
            { return new Symbol(sym.NUMALE, yyline, yycolumn,yytext());
            }
          // fall through
          case 186: break;
          case 93:
            { return new Symbol(sym.CARALE, yyline, yycolumn,yytext());
            }
          // fall through
          case 187: break;
          case 94:
            { return new Symbol(sym.enlace, yyline, yycolumn,yytext());
            }
          // fall through
          case 188: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
