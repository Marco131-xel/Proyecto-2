// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/java/main/analizadores/lexico.jflex

package main.analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import main.excepciones.Errores;


@SuppressWarnings("fallthrough")
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  2,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  4,  5,  0,  6,  0,  7,  0,  8,  9, 10, 11,  0, 12, 13, 14, 
    15, 16, 15, 15, 15, 15, 15, 15, 15, 15, 17, 18, 19, 20, 21,  0, 
     0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 
    37, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,  0, 48,  0, 49, 
     0, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 
    37, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 50, 51, 52,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 53,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 53,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\20\20\1\21\1\22\1\23\1\1\1\24"+
    "\1\25\1\2\1\26\3\0\22\20\1\27\1\30\17\20"+
    "\1\31\1\32\1\0\1\33\1\20\1\34\1\35\15\20"+
    "\1\36\5\20\1\37\21\20\1\40\7\20\1\0\4\20"+
    "\1\41\2\20\1\42\1\20\1\43\1\20\1\44\1\20"+
    "\1\45\13\20\1\46\1\47\1\50\3\20\1\51\1\20"+
    "\1\52\4\20\1\53\5\20\1\54\2\20\1\55\1\56"+
    "\1\57\2\20\1\0\4\20\1\60\1\61\2\20\1\62"+
    "\1\20\1\63\11\20\1\64\1\0\14\20\1\0\1\20"+
    "\1\65\1\66\1\0\4\20\1\67\1\20\1\70\1\20"+
    "\1\71\3\20\1\72\3\20\2\0\1\73\1\74\1\75"+
    "\2\20\1\76\3\20\1\77\1\20\1\100\1\0\1\20"+
    "\1\2\2\20\1\101\2\20\1\102\4\20\1\103\1\104"+
    "\2\0\1\105\2\20\1\106\1\20\1\107\1\0\4\20"+
    "\1\110\1\111\1\20\1\112\1\20\2\0\1\113\1\20"+
    "\1\114\1\0\6\20\1\0\1\115\1\20\1\0\1\116"+
    "\1\117\1\120\2\20\1\121\1\0\1\20\1\122\1\20"+
    "\1\123\1\124\4\20\1\125\4\20\1\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\66\0\330\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\u010e\0\66\0\66\0\u0144"+
    "\0\u017a\0\66\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be"+
    "\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e"+
    "\0\u04a4\0\u04da\0\66\0\66\0\66\0\u0510\0\66\0\66"+
    "\0\u0546\0\66\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a"+
    "\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a"+
    "\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u02f4"+
    "\0\u02f4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e"+
    "\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde"+
    "\0\66\0\u057c\0\u0d14\0\u05e8\0\u0d4a\0\u02f4\0\u02f4\0\u0d80"+
    "\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30"+
    "\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u02f4\0\u103e\0\u1074\0\u10aa"+
    "\0\u10e0\0\u1116\0\u02f4\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224"+
    "\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4"+
    "\0\u140a\0\u1440\0\u1476\0\u14ac\0\u02f4\0\u14e2\0\u1518\0\u154e"+
    "\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe"+
    "\0\u1734\0\u02f4\0\u176a\0\u17a0\0\u02f4\0\u17d6\0\u02f4\0\u180c"+
    "\0\u02f4\0\u1842\0\u02f4\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950"+
    "\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u02f4\0\u02f4"+
    "\0\u02f4\0\u1aca\0\u1b00\0\u1b36\0\u02f4\0\u1b6c\0\u02f4\0\u1ba2"+
    "\0\u1bd8\0\u1c0e\0\u1c44\0\u02f4\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c"+
    "\0\u1d52\0\u02f4\0\u1d88\0\u1dbe\0\u1df4\0\u02f4\0\u02f4\0\u1e2a"+
    "\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u02f4\0\u02f4"+
    "\0\u1fa4\0\u1fda\0\u02f4\0\u2010\0\u02f4\0\u2046\0\u207c\0\u20b2"+
    "\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u02f4\0\u222c"+
    "\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc"+
    "\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u02f4\0\u02f4"+
    "\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u02f4\0\u2664\0\u02f4"+
    "\0\u269a\0\u02f4\0\u26d0\0\u2706\0\u273c\0\u02f4\0\u2772\0\u27a8"+
    "\0\u27de\0\u2814\0\u284a\0\u02f4\0\u02f4\0\u02f4\0\u2880\0\u28b6"+
    "\0\u02f4\0\u28ec\0\u2922\0\u2958\0\u02f4\0\u298e\0\u02f4\0\u29c4"+
    "\0\u29fa\0\66\0\u2a30\0\u2a66\0\u02f4\0\u2a9c\0\u2ad2\0\u02f4"+
    "\0\u2b08\0\u2b3e\0\u2b74\0\u2baa\0\u02f4\0\u02f4\0\u2be0\0\u2c16"+
    "\0\u02f4\0\u2c4c\0\u2c82\0\u02f4\0\u2cb8\0\u02f4\0\u2cee\0\u2d24"+
    "\0\u2d5a\0\u2d90\0\u2dc6\0\u02f4\0\u02f4\0\u2dfc\0\u02f4\0\u2e32"+
    "\0\u2e68\0\u2e9e\0\u02f4\0\u2ed4\0\u02f4\0\u2f0a\0\u2f40\0\u2f76"+
    "\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u3084\0\66\0\u30ba\0\u30f0"+
    "\0\u02f4\0\u02f4\0\u02f4\0\u3126\0\u315c\0\u02f4\0\u3192\0\u31c8"+
    "\0\66\0\u31fe\0\u02f4\0\66\0\u3234\0\u326a\0\u32a0\0\u32d6"+
    "\0\u02f4\0\u330c\0\u3342\0\u3378\0\u33ae\0\u02f4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\2\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\2\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\2\31\1\34\1\31"+
    "\1\35\1\36\1\31\1\37\1\40\1\41\2\31\1\42"+
    "\3\31\1\43\1\44\1\31\1\45\1\46\1\47\1\50"+
    "\67\0\2\3\67\0\1\51\70\0\1\52\73\0\1\53"+
    "\1\0\2\15\5\0\31\31\2\0\1\31\10\0\1\54"+
    "\67\0\1\55\5\0\1\55\44\0\1\55\23\0\2\31"+
    "\5\0\13\31\1\56\5\31\1\57\7\31\2\0\1\31"+
    "\23\0\2\31\5\0\1\60\15\31\1\61\12\31\2\0"+
    "\1\31\23\0\2\31\5\0\1\62\6\31\1\63\3\31"+
    "\1\64\2\31\1\65\12\31\2\0\1\66\23\0\2\31"+
    "\5\0\4\31\1\67\24\31\2\0\1\31\23\0\2\31"+
    "\5\0\13\31\1\70\1\31\1\71\10\31\1\72\2\31"+
    "\2\0\1\31\23\0\2\31\5\0\1\73\15\31\1\74"+
    "\12\31\2\0\1\31\23\0\2\31\5\0\31\31\2\0"+
    "\1\31\23\0\2\31\5\0\4\31\1\75\13\31\1\76"+
    "\2\31\1\77\5\31\2\0\1\31\23\0\2\31\5\0"+
    "\3\31\1\100\1\31\1\101\7\31\1\102\13\31\2\0"+
    "\1\31\23\0\2\31\5\0\4\31\1\103\24\31\2\0"+
    "\1\31\23\0\2\31\5\0\1\104\22\31\1\105\5\31"+
    "\2\0\1\31\23\0\2\31\5\0\15\31\1\106\13\31"+
    "\2\0\1\31\23\0\2\31\5\0\4\31\1\107\11\31"+
    "\1\110\12\31\2\0\1\31\23\0\2\31\5\0\20\31"+
    "\1\111\1\31\1\112\6\31\2\0\1\31\23\0\2\31"+
    "\5\0\4\31\1\113\2\31\1\114\10\31\1\115\6\31"+
    "\1\116\1\31\2\0\1\31\23\0\2\31\5\0\7\31"+
    "\1\117\1\120\20\31\2\0\1\31\67\0\1\121\2\0"+
    "\2\51\2\0\62\51\17\0\2\122\61\0\1\123\70\0"+
    "\2\124\5\0\31\124\26\0\2\31\5\0\4\31\1\125"+
    "\15\31\1\126\6\31\2\0\1\31\23\0\2\31\5\0"+
    "\2\31\1\127\26\31\2\0\1\31\23\0\2\31\5\0"+
    "\2\31\1\130\26\31\2\0\1\31\23\0\2\31\5\0"+
    "\16\31\1\131\12\31\2\0\1\31\23\0\2\31\5\0"+
    "\20\31\1\132\10\31\2\0\1\31\23\0\2\31\5\0"+
    "\1\133\30\31\2\0\1\31\23\0\2\31\5\0\1\134"+
    "\30\31\2\0\1\31\23\0\2\31\5\0\13\31\1\135"+
    "\15\31\2\0\1\31\23\0\2\31\5\0\1\31\1\136"+
    "\1\137\1\140\3\31\1\141\1\142\2\31\1\143\2\31"+
    "\1\144\1\145\1\31\1\146\1\147\6\31\2\0\1\31"+
    "\23\0\2\31\5\0\2\31\1\150\16\31\1\151\7\31"+
    "\2\0\1\31\23\0\2\31\5\0\21\31\1\152\7\31"+
    "\2\0\1\31\23\0\2\31\5\0\3\31\1\153\25\31"+
    "\2\0\1\31\23\0\2\31\5\0\10\31\1\154\20\31"+
    "\2\0\1\31\23\0\2\31\5\0\13\31\1\155\15\31"+
    "\2\0\1\31\23\0\2\31\5\0\15\31\1\156\13\31"+
    "\2\0\1\31\23\0\2\31\5\0\10\31\1\157\20\31"+
    "\2\0\1\31\23\0\2\31\5\0\4\31\1\160\24\31"+
    "\2\0\1\31\23\0\2\31\5\0\15\31\1\161\13\31"+
    "\2\0\1\31\23\0\2\31\5\0\10\31\1\162\10\31"+
    "\1\163\1\164\6\31\2\0\1\31\23\0\2\31\5\0"+
    "\22\31\1\165\6\31\2\0\1\31\23\0\2\31\5\0"+
    "\14\31\1\166\14\31\2\0\1\31\23\0\2\31\5\0"+
    "\14\31\1\167\14\31\2\0\1\31\23\0\2\31\5\0"+
    "\2\31\1\170\26\31\2\0\1\31\23\0\2\31\5\0"+
    "\3\31\1\171\13\31\1\172\4\31\1\173\4\31\2\0"+
    "\1\31\23\0\2\31\5\0\25\31\1\174\3\31\2\0"+
    "\1\31\23\0\2\31\5\0\2\31\1\175\26\31\2\0"+
    "\1\31\23\0\2\31\5\0\20\31\1\176\10\31\2\0"+
    "\1\31\23\0\2\31\5\0\26\31\1\177\2\31\2\0"+
    "\1\31\23\0\2\31\5\0\4\31\1\200\24\31\2\0"+
    "\1\31\23\0\2\31\5\0\23\31\1\201\5\31\2\0"+
    "\1\31\23\0\2\31\5\0\17\31\1\202\11\31\2\0"+
    "\1\31\23\0\2\31\5\0\10\31\1\203\20\31\2\0"+
    "\1\31\23\0\2\31\5\0\3\31\1\204\25\31\2\0"+
    "\1\31\20\0\1\205\70\0\2\31\5\0\20\31\1\206"+
    "\10\31\2\0\1\31\23\0\2\31\5\0\12\31\1\207"+
    "\16\31\2\0\1\31\23\0\2\31\5\0\13\31\1\210"+
    "\15\31\2\0\1\31\23\0\2\31\5\0\1\211\30\31"+
    "\2\0\1\31\23\0\2\31\5\0\20\31\1\212\10\31"+
    "\2\0\1\31\23\0\2\31\5\0\21\31\1\213\7\31"+
    "\2\0\1\31\23\0\2\31\5\0\16\31\1\214\2\31"+
    "\1\215\7\31\2\0\1\31\23\0\2\31\5\0\16\31"+
    "\1\216\1\31\1\217\2\31\1\220\5\31\2\0\1\31"+
    "\23\0\2\31\5\0\2\31\1\221\26\31\2\0\1\31"+
    "\23\0\2\31\5\0\10\31\1\222\20\31\2\0\1\31"+
    "\23\0\1\31\1\223\5\0\4\31\1\224\24\31\2\0"+
    "\1\31\23\0\2\31\5\0\14\31\1\225\1\226\13\31"+
    "\2\0\1\31\23\0\2\31\5\0\10\31\1\227\20\31"+
    "\2\0\1\31\23\0\2\31\5\0\17\31\1\230\11\31"+
    "\2\0\1\31\23\0\2\31\5\0\2\31\1\231\1\31"+
    "\1\232\12\31\1\233\11\31\2\0\1\31\23\0\2\31"+
    "\5\0\4\31\1\234\3\31\1\235\20\31\2\0\1\31"+
    "\23\0\2\31\5\0\10\31\1\236\20\31\2\0\1\31"+
    "\23\0\2\31\5\0\2\31\1\237\26\31\2\0\1\31"+
    "\23\0\2\31\5\0\4\31\1\240\24\31\2\0\1\31"+
    "\23\0\2\31\5\0\22\31\1\241\6\31\2\0\1\31"+
    "\23\0\2\31\5\0\21\31\1\242\7\31\2\0\1\31"+
    "\23\0\2\31\5\0\22\31\1\243\6\31\2\0\1\31"+
    "\23\0\2\31\5\0\6\31\1\244\22\31\2\0\1\31"+
    "\23\0\2\31\5\0\5\31\1\245\23\31\2\0\1\31"+
    "\23\0\2\31\5\0\22\31\1\246\6\31\2\0\1\31"+
    "\23\0\2\31\5\0\22\31\1\247\6\31\2\0\1\31"+
    "\23\0\2\31\5\0\4\31\1\250\24\31\2\0\1\31"+
    "\23\0\2\31\5\0\4\31\1\251\24\31\2\0\1\31"+
    "\23\0\2\31\5\0\10\31\1\252\6\31\1\253\11\31"+
    "\2\0\1\31\23\0\2\31\5\0\4\31\1\254\24\31"+
    "\2\0\1\31\23\0\2\31\5\0\31\31\2\0\1\255"+
    "\23\0\2\31\5\0\13\31\1\256\15\31\2\0\1\31"+
    "\23\0\2\31\5\0\10\31\1\257\20\31\2\0\1\31"+
    "\23\0\2\31\5\0\4\31\1\260\24\31\2\0\1\31"+
    "\23\0\2\31\5\0\4\31\1\261\24\31\2\0\1\31"+
    "\23\0\2\31\5\0\21\31\1\262\7\31\2\0\1\31"+
    "\23\0\2\31\5\0\10\31\1\263\20\31\2\0\1\31"+
    "\23\0\2\31\5\0\22\31\1\264\6\31\2\0\1\31"+
    "\23\0\2\31\5\0\15\31\1\265\13\31\2\0\1\31"+
    "\23\0\2\31\5\0\4\31\1\266\24\31\2\0\1\31"+
    "\23\0\2\31\5\0\4\31\1\267\24\31\2\0\1\31"+
    "\23\0\2\31\5\0\13\31\1\270\15\31\2\0\1\31"+
    "\23\0\2\31\5\0\22\31\1\271\6\31\2\0\1\31"+
    "\4\0\14\205\1\272\10\205\1\0\40\205\17\0\2\31"+
    "\5\0\22\31\1\273\6\31\2\0\1\31\23\0\2\31"+
    "\5\0\6\31\1\274\22\31\2\0\1\31\23\0\2\31"+
    "\5\0\4\31\1\275\24\31\2\0\1\31\23\0\2\31"+
    "\5\0\2\31\1\276\26\31\2\0\1\31\23\0\2\31"+
    "\5\0\21\31\1\277\7\31\2\0\1\31\23\0\2\31"+
    "\5\0\20\31\1\300\10\31\2\0\1\31\23\0\2\31"+
    "\5\0\3\31\1\301\25\31\2\0\1\31\23\0\2\31"+
    "\5\0\22\31\1\302\6\31\2\0\1\31\23\0\2\31"+
    "\5\0\24\31\1\303\4\31\2\0\1\31\23\0\2\31"+
    "\5\0\1\304\30\31\2\0\1\31\23\0\2\31\5\0"+
    "\6\31\1\305\22\31\2\0\1\31\23\0\2\31\5\0"+
    "\17\31\1\306\11\31\2\0\1\31\23\0\2\31\5\0"+
    "\15\31\1\307\13\31\2\0\1\31\23\0\2\31\5\0"+
    "\22\31\1\310\6\31\2\0\1\31\23\0\2\31\5\0"+
    "\20\31\1\311\10\31\2\0\1\31\23\0\2\31\5\0"+
    "\13\31\1\312\15\31\2\0\1\31\23\0\2\31\5\0"+
    "\1\313\30\31\2\0\1\31\23\0\2\31\5\0\26\31"+
    "\1\314\2\31\2\0\1\31\23\0\2\31\5\0\22\31"+
    "\1\315\6\31\2\0\1\31\23\0\2\31\5\0\14\31"+
    "\1\316\14\31\2\0\1\31\23\0\2\31\5\0\4\31"+
    "\1\317\24\31\2\0\1\31\20\0\1\320\2\0\2\31"+
    "\5\0\31\31\2\0\1\31\23\0\2\31\5\0\7\31"+
    "\1\321\21\31\2\0\1\31\23\0\2\31\5\0\10\31"+
    "\1\322\20\31\2\0\1\31\23\0\2\31\5\0\20\31"+
    "\1\323\10\31\2\0\1\31\23\0\2\31\5\0\6\31"+
    "\1\324\22\31\2\0\1\31\23\0\2\31\5\0\14\31"+
    "\1\325\14\31\2\0\1\31\23\0\2\31\5\0\1\326"+
    "\30\31\2\0\1\31\23\0\2\31\5\0\1\327\30\31"+
    "\2\0\1\31\23\0\2\31\5\0\10\31\1\330\20\31"+
    "\2\0\1\31\23\0\2\31\5\0\20\31\1\331\10\31"+
    "\2\0\1\31\23\0\2\31\5\0\1\332\30\31\2\0"+
    "\1\31\23\0\2\31\5\0\20\31\1\333\10\31\2\0"+
    "\1\31\23\0\2\31\5\0\15\31\1\334\13\31\2\0"+
    "\1\31\20\0\1\335\2\0\2\31\5\0\31\31\2\0"+
    "\1\31\23\0\2\31\5\0\25\31\1\336\3\31\2\0"+
    "\1\31\23\0\2\31\5\0\4\31\1\337\24\31\2\0"+
    "\1\31\23\0\2\31\5\0\7\31\1\340\21\31\2\0"+
    "\1\31\4\0\14\205\1\341\10\205\1\0\40\205\17\0"+
    "\2\31\5\0\31\31\2\0\1\342\23\0\2\31\5\0"+
    "\20\31\1\343\10\31\2\0\1\31\23\0\2\31\5\0"+
    "\1\344\30\31\2\0\1\31\23\0\2\31\5\0\22\31"+
    "\1\345\6\31\2\0\1\31\23\0\2\31\5\0\27\31"+
    "\1\346\1\31\2\0\1\31\23\0\2\31\5\0\22\31"+
    "\1\347\6\31\2\0\1\31\23\0\2\31\5\0\3\31"+
    "\1\350\25\31\2\0\1\31\23\0\2\31\5\0\23\31"+
    "\1\351\5\31\2\0\1\31\23\0\2\31\5\0\12\31"+
    "\1\352\16\31\2\0\1\31\23\0\2\31\5\0\10\31"+
    "\1\353\20\31\2\0\1\31\23\0\2\31\5\0\10\31"+
    "\1\354\20\31\2\0\1\31\23\0\2\31\5\0\4\31"+
    "\1\355\24\31\2\0\1\31\23\0\2\31\5\0\14\31"+
    "\1\356\14\31\2\0\1\31\23\0\2\31\5\0\22\31"+
    "\1\357\6\31\2\0\1\31\23\0\2\31\5\0\13\31"+
    "\1\360\15\31\2\0\1\31\23\0\2\31\5\0\1\361"+
    "\30\31\2\0\1\31\37\0\1\362\13\0\1\363\35\0"+
    "\2\31\5\0\22\31\1\364\6\31\2\0\1\31\23\0"+
    "\2\31\5\0\13\31\1\365\15\31\2\0\1\31\23\0"+
    "\2\31\5\0\22\31\1\366\6\31\2\0\1\31\23\0"+
    "\2\31\5\0\4\31\1\367\24\31\2\0\1\31\23\0"+
    "\2\31\5\0\17\31\1\370\11\31\2\0\1\31\23\0"+
    "\2\31\5\0\20\31\1\371\10\31\2\0\1\31\23\0"+
    "\2\31\5\0\13\31\1\372\15\31\2\0\1\31\23\0"+
    "\2\31\5\0\2\31\1\373\26\31\2\0\1\31\23\0"+
    "\2\31\5\0\4\31\1\374\24\31\2\0\1\31\23\0"+
    "\2\31\5\0\22\31\1\375\6\31\2\0\1\31\23\0"+
    "\2\31\5\0\21\31\1\376\7\31\2\0\1\31\23\0"+
    "\2\31\5\0\6\31\1\377\22\31\2\0\1\31\32\0"+
    "\1\u0100\56\0\2\31\5\0\7\31\1\u0101\21\31\2\0"+
    "\1\31\4\0\14\205\1\341\10\205\1\u0102\40\205\17\0"+
    "\2\31\5\0\10\31\1\u0103\20\31\2\0\1\31\23\0"+
    "\2\31\5\0\16\31\1\u0104\12\31\2\0\1\31\23\0"+
    "\2\31\5\0\15\31\1\u0105\13\31\2\0\1\31\23\0"+
    "\2\31\5\0\4\31\1\u0106\24\31\2\0\1\31\23\0"+
    "\2\31\5\0\16\31\1\u0107\12\31\2\0\1\31\23\0"+
    "\2\31\5\0\22\31\1\u0108\6\31\2\0\1\31\23\0"+
    "\2\31\5\0\16\31\1\u0109\12\31\2\0\1\31\23\0"+
    "\2\31\5\0\17\31\1\u010a\11\31\2\0\1\31\23\0"+
    "\2\31\5\0\2\31\1\u010b\26\31\2\0\1\31\23\0"+
    "\2\31\5\0\1\u010c\30\31\2\0\1\31\23\0\2\31"+
    "\5\0\4\31\1\u010d\24\31\2\0\1\31\23\0\2\31"+
    "\5\0\13\31\1\u010e\15\31\2\0\1\31\32\0\1\u010f"+
    "\75\0\1\u0110\46\0\2\31\5\0\20\31\1\u0111\10\31"+
    "\2\0\1\31\23\0\2\31\5\0\1\u0112\30\31\2\0"+
    "\1\31\23\0\2\31\5\0\4\31\1\u0113\24\31\2\0"+
    "\1\31\23\0\2\31\5\0\12\31\1\u0114\16\31\2\0"+
    "\1\31\23\0\2\31\5\0\2\31\1\u0115\26\31\2\0"+
    "\1\31\23\0\2\31\5\0\4\31\1\u0116\24\31\2\0"+
    "\1\31\45\0\1\u0117\43\0\2\31\5\0\10\31\1\u0118"+
    "\20\31\2\0\1\31\23\0\2\31\5\0\15\31\1\u0119"+
    "\13\31\2\0\1\31\23\0\2\31\5\0\23\31\1\u011a"+
    "\5\31\2\0\1\31\23\0\2\31\5\0\20\31\1\u011b"+
    "\10\31\2\0\1\31\23\0\2\31\5\0\15\31\1\u011c"+
    "\13\31\2\0\1\31\23\0\2\31\5\0\15\31\1\u011d"+
    "\13\31\2\0\1\31\23\0\2\31\5\0\22\31\1\u011e"+
    "\6\31\2\0\1\31\23\0\2\31\5\0\22\31\1\u011f"+
    "\6\31\2\0\1\31\23\0\2\31\5\0\20\31\1\u0120"+
    "\10\31\2\0\1\31\46\0\1\u0121\101\0\1\u0122\26\0"+
    "\2\31\5\0\20\31\1\u0123\10\31\2\0\1\31\23\0"+
    "\2\31\5\0\1\u0124\30\31\2\0\1\31\23\0\2\31"+
    "\5\0\22\31\1\u0125\6\31\2\0\1\31\42\0\1\u0126"+
    "\46\0\2\31\5\0\13\31\1\u0127\15\31\2\0\1\31"+
    "\23\0\2\31\5\0\5\31\1\u0128\23\31\2\0\1\31"+
    "\23\0\2\31\5\0\15\31\1\u0129\13\31\2\0\1\31"+
    "\23\0\2\31\5\0\31\31\2\0\1\u012a\23\0\2\31"+
    "\5\0\10\31\1\u012b\20\31\2\0\1\31\23\0\2\31"+
    "\5\0\4\31\1\u012c\24\31\2\0\1\31\42\0\1\u012d"+
    "\61\0\1\u012e\52\0\2\31\5\0\22\31\1\u012f\6\31"+
    "\2\0\1\31\40\0\1\u0130\50\0\2\31\5\0\4\31"+
    "\1\u0131\24\31\2\0\1\31\23\0\2\31\5\0\16\31"+
    "\1\u0132\12\31\2\0\1\31\23\0\2\31\5\0\3\31"+
    "\1\u0133\25\31\2\0\1\31\23\0\2\31\5\0\1\u0134"+
    "\30\31\2\0\1\31\23\0\2\31\5\0\15\31\1\u0135"+
    "\13\31\2\0\1\31\23\0\2\31\5\0\1\u0136\30\31"+
    "\2\0\1\31\45\0\1\u0137\43\0\2\31\5\0\16\31"+
    "\1\u0138\12\31\2\0\1\31\47\0\1\u0139\41\0\2\31"+
    "\5\0\13\31\1\u013a\15\31\2\0\1\31\23\0\2\31"+
    "\5\0\6\31\1\u013b\22\31\2\0\1\31\61\0\1\u013c"+
    "\27\0\2\31\5\0\20\31\1\u013d\10\31\2\0\1\31"+
    "\23\0\2\31\5\0\4\31\1\u013e\24\31\2\0\1\31"+
    "\23\0\2\31\5\0\10\31\1\u013f\20\31\2\0\1\31"+
    "\23\0\2\31\5\0\1\u0140\30\31\2\0\1\31\23\0"+
    "\2\31\5\0\16\31\1\u0141\12\31\2\0\1\31\23\0"+
    "\2\31\5\0\22\31\1\u0142\6\31\2\0\1\31\23\0"+
    "\2\31\5\0\16\31\1\u0143\12\31\2\0\1\31\23\0"+
    "\2\31\5\0\20\31\1\u0144\10\31\2\0\1\31\23\0"+
    "\2\31\5\0\10\31\1\u0145\20\31\2\0\1\31\23\0"+
    "\2\31\5\0\16\31\1\u0146\12\31\2\0\1\31\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13284];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\6\11\1\1\2\11"+
    "\2\1\1\11\20\1\3\11\1\1\2\11\1\1\1\11"+
    "\3\0\43\1\1\11\1\1\1\0\61\1\1\0\64\1"+
    "\1\0\25\1\1\0\14\1\1\0\3\1\1\0\20\1"+
    "\2\0\14\1\1\0\1\1\1\11\14\1\2\0\6\1"+
    "\1\0\11\1\2\0\3\1\1\0\6\1\1\0\1\11"+
    "\1\1\1\0\6\1\1\0\1\1\1\11\2\1\1\11"+
    "\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[326];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public LinkedList<Errores> listaErrores = new LinkedList<>();

    public LinkedList<Errores> getErrores(){
        return listaErrores;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
      yyline = 1;
    yycolumn = 1;
    listaErrores = new LinkedList<>();
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { listaErrores.add(new Errores("LEXICO","El caracter "+
                yytext() + " No pertenece al lenguaje", yyline, yycolumn));
            }
          // fall through
          case 87: break;
          case 2:
            { 
            }
          // fall through
          case 88: break;
          case 3:
            { return new Symbol(sym.COMID, yyline, yycolumn,yytext());
            }
          // fall through
          case 89: break;
          case 4:
            { return new Symbol(sym.PAR1, yyline, yycolumn,yytext());
            }
          // fall through
          case 90: break;
          case 5:
            { return new Symbol(sym.PAR2, yyline, yycolumn,yytext());
            }
          // fall through
          case 91: break;
          case 6:
            { return new Symbol(sym.POR, yyline, yycolumn,yytext());
            }
          // fall through
          case 92: break;
          case 7:
            { return new Symbol(sym.MAS, yyline, yycolumn,yytext());
            }
          // fall through
          case 93: break;
          case 8:
            { return new Symbol(sym.MENOS, yyline, yycolumn,yytext());
            }
          // fall through
          case 94: break;
          case 9:
            { return new Symbol(sym.DIVI, yyline, yycolumn,yytext());
            }
          // fall through
          case 95: break;
          case 10:
            { return new Symbol(sym.ENTERO, yyline, yycolumn,yytext());
            }
          // fall through
          case 96: break;
          case 11:
            { return new Symbol(sym.DOSPTS, yyline, yycolumn,yytext());
            }
          // fall through
          case 97: break;
          case 12:
            { return new Symbol(sym.FINCADENA, yyline, yycolumn,yytext());
            }
          // fall through
          case 98: break;
          case 13:
            { return new Symbol(sym.MENOR, yyline, yycolumn,yytext());
            }
          // fall through
          case 99: break;
          case 14:
            { return new Symbol(sym.IGUAL, yyline, yycolumn,yytext());
            }
          // fall through
          case 100: break;
          case 15:
            { return new Symbol(sym.MAYOR, yyline, yycolumn,yytext());
            }
          // fall through
          case 101: break;
          case 16:
            { return new Symbol(sym.VALOR, yyline, yycolumn,yytext());
            }
          // fall through
          case 102: break;
          case 17:
            { return new Symbol(sym.CORCHEA, yyline, yycolumn,yytext());
            }
          // fall through
          case 103: break;
          case 18:
            { return new Symbol(sym.CORCHEC, yyline, yycolumn,yytext());
            }
          // fall through
          case 104: break;
          case 19:
            { return new Symbol(sym.LLAVEA, yyline, yycolumn,yytext());
            }
          // fall through
          case 105: break;
          case 20:
            { return new Symbol(sym.LLAVEC, yyline, yycolumn,yytext());
            }
          // fall through
          case 106: break;
          case 21:
            { return new Symbol(sym.DIFER, yyline, yycolumn,yytext());
            }
          // fall through
          case 107: break;
          case 22:
            { return new Symbol(sym.AND, yyline, yycolumn,yytext());
            }
          // fall through
          case 108: break;
          case 23:
            { return new Symbol(sym.ID, yyline, yycolumn,yytext());
            }
          // fall through
          case 109: break;
          case 24:
            { return new Symbol(sym.IF, yyline, yycolumn,yytext());
            }
          // fall through
          case 110: break;
          case 25:
            { return new Symbol(sym.OR, yyline, yycolumn,yytext());
            }
          // fall through
          case 111: break;
          case 26:
            { return new Symbol(sym.DECI, yyline, yycolumn,yytext());
            }
          // fall through
          case 112: break;
          case 27:
            { return new Symbol(sym.IDENTIFICADOR, yyline, yycolumn,yytext());
            }
          // fall through
          case 113: break;
          case 28:
            { return new Symbol(sym.ALT, yyline, yycolumn,yytext());
            }
          // fall through
          case 114: break;
          case 29:
            { return new Symbol(sym.ASC, yyline, yycolumn,yytext());
            }
          // fall through
          case 115: break;
          case 30:
            { return new Symbol(sym.PARRA, yyline, yycolumn,yytext());
            }
          // fall through
          case 116: break;
          case 31:
            { return new Symbol(sym.END, yyline, yycolumn,yytext());
            }
          // fall through
          case 117: break;
          case 32:
            { return new Symbol(sym.SRC, yyline, yycolumn,yytext());
            }
          // fall through
          case 118: break;
          case 33:
            { return new Symbol(sym.CHAR, yyline, yycolumn,yytext());
            }
          // fall through
          case 119: break;
          case 34:
            { return new Symbol(sym.COLS, yyline, yycolumn,yytext());
            }
          // fall through
          case 120: break;
          case 35:
            { return new Symbol(sym.BR, yyline, yycolumn,yytext());
            }
          // fall through
          case 121: break;
          case 36:
            { return new Symbol(sym.CC, yyline, yycolumn,yytext());
            }
          // fall through
          case 122: break;
          case 37:
            { return new Symbol(sym.TITUH, yyline, yycolumn,yytext());
            }
          // fall through
          case 123: break;
          case 38:
            { return new Symbol(sym.DESC, yyline, yycolumn,yytext());
            }
          // fall through
          case 124: break;
          case 39:
            { return new Symbol(sym.ELSE, yyline, yycolumn,yytext());
            }
          // fall through
          case 125: break;
          case 40:
            { return new Symbol(sym.EXIT, yyline, yycolumn,yytext());
            }
          // fall through
          case 126: break;
          case 41:
            { return new Symbol(sym.HREF, yyline, yycolumn,yytext());
            }
          // fall through
          case 127: break;
          case 42:
            { return new Symbol(sym.INIT, yyline, yycolumn,yytext());
            }
          // fall through
          case 128: break;
          case 43:
            { return new Symbol(sym.NAME, yyline, yycolumn,yytext());
            }
          // fall through
          case 129: break;
          case 44:
            { return new Symbol(sym.ROWS, yyline, yycolumn,yytext());
            }
          // fall through
          case 130: break;
          case 45:
            { return new Symbol(sym.THEN, yyline, yycolumn,yytext());
            }
          // fall through
          case 131: break;
          case 46:
            { return new Symbol(sym.TRUE, yyline, yycolumn,yytext());
            }
          // fall through
          case 132: break;
          case 47:
            { return new Symbol(sym.TYPE, yyline, yycolumn,yytext());
            }
          // fall through
          case 133: break;
          case 48:
            { return new Symbol(sym.CLASS, yyline, yycolumn,yytext());
            }
          // fall through
          case 134: break;
          case 49:
            { return new Symbol(sym.COLOR, yyline, yycolumn,yytext());
            }
          // fall through
          case 135: break;
          case 50:
            { return new Symbol(sym.DIV, yyline, yycolumn,yytext());
            }
          // fall through
          case 136: break;
          case 51:
            { return new Symbol(sym.IMG, yyline, yycolumn,yytext());
            }
          // fall through
          case 137: break;
          case 52:
            { return new Symbol(sym.FALSE, yyline, yycolumn,yytext());
            }
          // fall through
          case 138: break;
          case 53:
            { return new Symbol(sym.WHILE, yyline, yycolumn,yytext());
            }
          // fall through
          case 139: break;
          case 54:
            { return new Symbol(sym.WIDTH, yyline, yycolumn,yytext());
            }
          // fall through
          case 140: break;
          case 55:
            { return new Symbol(sym.BODY, yyline, yycolumn,yytext());
            }
          // fall through
          case 141: break;
          case 56:
            { return new Symbol(sym.HEAD, yyline, yycolumn,yytext());
            }
          // fall through
          case 142: break;
          case 57:
            { return new Symbol(sym.LINK, yyline, yycolumn,yytext());
            }
          // fall through
          case 143: break;
          case 58:
            { return new Symbol(sym.SPAM, yyline, yycolumn,yytext());
            }
          // fall through
          case 144: break;
          case 59:
            { return new Symbol(sym.HEIGHT, yyline, yycolumn,yytext());
            }
          // fall through
          case 145: break;
          case 60:
            { return new Symbol(sym.HUNTIL, yyline, yycolumn,yytext());
            }
          // fall through
          case 146: break;
          case 61:
            { return new Symbol(sym.INSERT, yyline, yycolumn,yytext());
            }
          // fall through
          case 147: break;
          case 62:
            { return new Symbol(sym.LETPAR, yyline, yycolumn,yytext());
            }
          // fall through
          case 148: break;
          case 63:
            { return new Symbol(sym.REPEAT, yyline, yycolumn,yytext());
            }
          // fall through
          case 149: break;
          case 64:
            { return new Symbol(sym.STRING, yyline, yycolumn,yytext());
            }
          // fall through
          case 150: break;
          case 65:
            { return new Symbol(sym.BOOLEAN, yyline, yycolumn,yytext());
            }
          // fall through
          case 151: break;
          case 66:
            { return new Symbol(sym.INPUT, yyline, yycolumn,yytext());
            }
          // fall through
          case 152: break;
          case 67:
            { return new Symbol(sym.TITLE, yyline, yycolumn,yytext());
            }
          // fall through
          case 153: break;
          case 68:
            { return new Symbol(sym.DECIMAL, yyline, yycolumn,yytext());
            }
          // fall through
          case 154: break;
          case 69:
            { return new Symbol(sym.INTERGER, yyline, yycolumn,yytext());
            }
          // fall through
          case 155: break;
          case 70:
            { return new Symbol(sym.ONCLICK, yyline, yycolumn,yytext());
            }
          // fall through
          case 156: break;
          case 71:
            { return new Symbol(sym.REVERSE, yyline, yycolumn,yytext());
            }
          // fall through
          case 157: break;
          case 72:
            { return new Symbol(sym.BUTTON, yyline, yycolumn,yytext());
            }
          // fall through
          case 158: break;
          case 73:
            { return new Symbol(sym.OPTION, yyline, yycolumn,yytext());
            }
          // fall through
          case 159: break;
          case 74:
            { return new Symbol(sym.SELECT, yyline, yycolumn,yytext());
            }
          // fall through
          case 160: break;
          case 75:
            { return new Symbol(sym.LETIMPAR, yyline, yycolumn,yytext());
            }
          // fall through
          case 161: break;
          case 76:
            { return new Symbol(sym.REDIRECT, yyline, yycolumn,yytext());
            }
          // fall through
          case 162: break;
          case 77:
            { return new Symbol(sym.FONTSI, yyline, yycolumn,yytext());
            }
          // fall through
          case 163: break;
          case 78:
            { return new Symbol(sym.THENWHILE, yyline, yycolumn,yytext());
            }
          // fall through
          case 164: break;
          case 79:
            { return new Symbol(sym.ALEINF, yyline, yycolumn,yytext());
            }
          // fall through
          case 165: break;
          case 80:
            { return new Symbol(sym.BACKG, yyline, yycolumn,yytext());
            }
          // fall through
          case 166: break;
          case 81:
            { return new Symbol(sym.TEXTAREA, yyline, yycolumn,yytext());
            }
          // fall through
          case 167: break;
          case 82:
            { return new Symbol(sym.TEXTALI, yyline, yycolumn,yytext());
            }
          // fall through
          case 168: break;
          case 83:
            { return new Symbol(sym.SCRIPT, yyline, yycolumn,yytext());
            }
          // fall through
          case 169: break;
          case 84:
            { return new Symbol(sym.FONTFA, yyline, yycolumn,yytext());
            }
          // fall through
          case 170: break;
          case 85:
            { return new Symbol(sym.NUMALE, yyline, yycolumn,yytext());
            }
          // fall through
          case 171: break;
          case 86:
            { return new Symbol(sym.CARALE, yyline, yycolumn,yytext());
            }
          // fall through
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
