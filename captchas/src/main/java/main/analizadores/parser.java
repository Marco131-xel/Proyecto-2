
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main.analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import main.excepciones.Errores;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\004\007\000\002\005\003\000\002\005\004" +
    "\000\002\006\005\000\002\006\003\000\002\006\004\000" +
    "\002\006\005\000\002\006\005\000\002\006\004\000\002" +
    "\006\003\000\002\006\005\000\002\006\005\000\002\006" +
    "\004\000\002\010\005\000\002\007\003\000\002\007\004" +
    "\000\002\012\003\000\002\012\005\000\002\011\003\000" +
    "\002\011\004\000\002\013\006\000\002\014\006\000\002" +
    "\015\005\000\002\016\006\000\002\017\006\000\002\020" +
    "\006\000\002\021\005\000\002\022\006\000\002\023\006" +
    "\000\002\024\006\000\002\025\006\000\002\026\006\000" +
    "\002\027\006\000\002\030\006\000\002\031\006\000\002" +
    "\032\006\000\002\033\006\000\002\034\005\000\002\035" +
    "\006\000\002\036\006\000\002\037\006\000\002\040\006" +
    "\000\002\041\006\000\002\042\005\000\002\043\006\000" +
    "\002\044\006\000\002\045\006\000\002\046\006\000\002" +
    "\047\006\000\002\050\006\000\002\051\005\000\002\052" +
    "\006\000\002\053\003\000\002\053\002\000\002\054\003" +
    "\000\002\054\002\000\002\055\003\000\002\055\002\000" +
    "\002\056\003\000\002\056\002\000\002\057\003\000\002" +
    "\057\002\000\002\060\003\000\002\060\002\000\002\061" +
    "\003\000\002\061\002\000\002\062\003\000\002\062\002" +
    "\000\002\063\003\000\002\063\002\000\002\064\003\000" +
    "\002\064\004\000\002\065\003\000\002\065\004\000\002" +
    "\066\003\000\002\066\004\000\002\067\003\000\002\067" +
    "\004\000\002\070\003\000\002\070\004\000\002\071\003" +
    "\000\002\071\004\000\002\072\003\000\002\072\004\000" +
    "\002\073\003\000\002\073\004\000\002\074\003\000\002" +
    "\074\004\000\002\106\011\000\002\106\011\000\002\106" +
    "\011\000\002\106\011\000\002\075\011\000\002\075\011" +
    "\000\002\076\011\000\002\077\011\000\002\100\011\000" +
    "\002\100\003\000\002\101\011\000\002\101\011\000\002" +
    "\101\003\000\002\102\011\000\002\102\011\000\002\102" +
    "\003\000\002\103\011\000\002\103\011\000\002\103\011" +
    "\000\002\103\003\000\002\104\011\000\002\104\011\000" +
    "\002\104\011\000\002\104\011\000\002\104\011\000\002" +
    "\105\011\000\002\105\011\000\002\105\011\000\002\105" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0160\000\004\011\005\001\002\000\004\002\000\001" +
    "\002\000\004\027\u0150\001\002\000\004\011\012\001\002" +
    "\000\004\002\010\001\002\000\004\002\001\001\002\000" +
    "\004\011\017\001\002\000\004\030\013\001\002\000\004" +
    "\012\014\001\002\000\004\011\uffe8\001\002\000\004\011" +
    "\u0142\001\002\000\004\011\035\001\002\000\004\032\020" +
    "\001\002\000\006\012\uffc7\023\024\001\002\000\006\012" +
    "\uffb6\023\uffb6\001\002\000\006\012\uffc8\023\024\001\002" +
    "\000\004\012\033\001\002\000\004\050\025\001\002\000" +
    "\004\010\026\001\002\000\004\026\027\001\002\000\004" +
    "\124\030\001\002\000\004\026\031\001\002\000\004\024" +
    "\032\001\002\000\006\012\uffa0\023\uffa0\001\002\000\004" +
    "\011\uffe2\001\002\000\006\012\uffb5\023\uffb5\001\002\000" +
    "\004\014\u013e\001\002\000\004\011\040\001\002\000\004" +
    "\011\057\001\002\000\004\033\041\001\002\000\006\012" +
    "\uffc5\023\045\001\002\000\006\012\uffc6\023\045\001\002" +
    "\000\004\012\054\001\002\000\006\012\uffb4\023\uffb4\001" +
    "\002\000\004\051\046\001\002\000\004\010\047\001\002" +
    "\000\004\026\050\001\002\000\004\125\051\001\002\000" +
    "\004\026\052\001\002\000\004\024\053\001\002\000\006" +
    "\012\uff9f\023\uff9f\001\002\000\004\011\uffe6\001\002\000" +
    "\006\012\uffb3\023\uffb3\001\002\000\004\137\u0138\001\002" +
    "\000\026\035\123\036\130\037\127\041\125\042\131\043" +
    "\122\044\120\045\121\046\124\047\126\001\002\000\004" +
    "\011\u012e\001\002\000\004\011\ufffa\001\002\000\004\011" +
    "\ufff5\001\002\000\004\011\ufffd\001\002\000\006\011\u011d" +
    "\137\u011b\001\002\000\004\011\u010b\001\002\000\004\011" +
    "\u0104\001\002\000\004\011\057\001\002\000\004\011\107" +
    "\001\002\000\004\011\101\001\002\000\004\137\073\001" +
    "\002\000\004\011\074\001\002\000\004\014\076\001\002" +
    "\000\004\011\ufff4\001\002\000\004\044\077\001\002\000" +
    "\004\012\100\001\002\000\004\011\uffd1\001\002\000\004" +
    "\014\103\001\002\000\004\011\ufff6\001\002\000\004\042" +
    "\104\001\002\000\004\012\105\001\002\000\004\011\uffd4" +
    "\001\002\000\004\011\ufff9\001\002\000\004\014\110\001" +
    "\002\000\004\036\111\001\002\000\004\012\112\001\002" +
    "\000\004\011\uffdc\001\002\000\004\011\114\001\002\000" +
    "\030\014\117\035\123\036\130\037\127\041\125\042\131" +
    "\043\122\044\120\045\121\046\124\047\126\001\002\000" +
    "\004\011\ufffc\001\002\000\004\011\ufff7\001\002\000\004" +
    "\041\u0101\001\002\000\006\012\uffb9\023\354\001\002\000" +
    "\006\012\uffc3\023\255\001\002\000\004\012\345\001\002" +
    "\000\006\012\uffc1\023\326\001\002\000\006\012\uffc3\023" +
    "\255\001\002\000\006\012\uffbd\023\273\001\002\000\004" +
    "\012\266\001\002\000\006\012\uffc3\023\255\001\002\000" +
    "\006\012\uffbf\023\202\001\002\000\006\012\uffbb\023\135" +
    "\001\002\000\004\012\175\001\002\000\006\012\uffaa\023" +
    "\uffaa\001\002\000\006\012\uffbc\023\135\001\002\000\014" +
    "\057\136\064\141\065\137\066\142\067\140\001\002\000" +
    "\004\010\167\001\002\000\004\010\162\001\002\000\004" +
    "\010\155\001\002\000\004\010\150\001\002\000\004\010" +
    "\143\001\002\000\004\026\144\001\002\000\004\133\145" +
    "\001\002\000\004\026\146\001\002\000\004\024\147\001" +
    "\002\000\006\012\uff8f\023\uff8f\001\002\000\004\026\151" +
    "\001\002\000\004\124\152\001\002\000\004\026\153\001" +
    "\002\000\004\024\154\001\002\000\006\012\uff91\023\uff91" +
    "\001\002\000\004\026\156\001\002\000\004\137\157\001" +
    "\002\000\004\026\160\001\002\000\004\024\161\001\002" +
    "\000\006\012\uff8e\023\uff8e\001\002\000\004\026\163\001" +
    "\002\000\004\133\164\001\002\000\004\026\165\001\002" +
    "\000\004\024\166\001\002\000\006\012\uff90\023\uff90\001" +
    "\002\000\004\026\170\001\002\000\004\136\171\001\002" +
    "\000\004\026\172\001\002\000\004\024\173\001\002\000" +
    "\006\012\uff92\023\uff92\001\002\000\006\012\uffa9\023\uffa9" +
    "\001\002\000\004\011\uffd5\001\002\000\006\012\uffc0\023" +
    "\202\001\002\000\004\012\247\001\002\000\006\012\uff97" +
    "\023\uff97\001\002\000\006\012\uffae\023\uffae\001\002\000" +
    "\016\053\207\054\206\055\210\057\203\061\205\062\204" +
    "\001\002\000\004\010\242\001\002\000\004\010\235\001" +
    "\002\000\004\010\230\001\002\000\004\010\223\001\002" +
    "\000\004\010\216\001\002\000\004\010\211\001\002\000" +
    "\004\026\212\001\002\000\004\130\213\001\002\000\004" +
    "\026\214\001\002\000\004\024\215\001\002\000\006\012" +
    "\uffa4\023\uffa4\001\002\000\004\026\217\001\002\000\004" +
    "\127\220\001\002\000\004\026\221\001\002\000\004\024" +
    "\222\001\002\000\006\012\uffa5\023\uffa5\001\002\000\004" +
    "\026\224\001\002\000\004\126\225\001\002\000\004\026" +
    "\226\001\002\000\004\024\227\001\002\000\006\012\uffa6" +
    "\023\uffa6\001\002\000\004\026\231\001\002\000\004\134" +
    "\232\001\002\000\004\026\233\001\002\000\004\024\234" +
    "\001\002\000\006\012\uff99\023\uff99\001\002\000\004\026" +
    "\236\001\002\000\004\134\237\001\002\000\004\026\240" +
    "\001\002\000\004\024\241\001\002\000\006\012\uff98\023" +
    "\uff98\001\002\000\004\026\243\001\002\000\004\136\244" +
    "\001\002\000\004\026\245\001\002\000\004\024\246\001" +
    "\002\000\006\012\uffa3\023\uffa3\001\002\000\004\011\uffdd" +
    "\001\002\000\006\012\uffad\023\uffad\001\002\000\006\012" +
    "\uffc4\023\255\001\002\000\004\012\264\001\002\000\006" +
    "\012\uff9d\023\uff9d\001\002\000\006\012\uffb2\023\uffb2\001" +
    "\002\000\014\052\256\053\207\054\206\055\210\057\203" +
    "\001\002\000\004\010\257\001\002\000\004\026\260\001" +
    "\002\000\004\125\261\001\002\000\004\026\262\001\002" +
    "\000\004\024\263\001\002\000\006\012\uff9e\023\uff9e\001" +
    "\002\000\004\011\uffdb\001\002\000\006\012\uffb1\023\uffb1" +
    "\001\002\000\004\011\uffcc\001\002\000\006\012\uffbe\023" +
    "\273\001\002\000\004\012\316\001\002\000\006\012\uff93" +
    "\023\uff93\001\002\000\006\012\uffac\023\uffac\001\002\000" +
    "\020\051\274\052\275\053\207\054\206\055\210\057\203" +
    "\063\276\001\002\000\004\010\311\001\002\000\004\010" +
    "\304\001\002\000\004\010\277\001\002\000\004\026\300" +
    "\001\002\000\004\132\301\001\002\000\004\026\302\001" +
    "\002\000\004\024\303\001\002\000\006\012\uff94\023\uff94" +
    "\001\002\000\004\026\305\001\002\000\004\125\306\001" +
    "\002\000\004\026\307\001\002\000\004\024\310\001\002" +
    "\000\006\012\uff96\023\uff96\001\002\000\004\026\312\001" +
    "\002\000\004\125\313\001\002\000\004\026\314\001\002" +
    "\000\004\024\315\001\002\000\006\012\uff95\023\uff95\001" +
    "\002\000\004\011\uffd7\001\002\000\006\012\uffab\023\uffab" +
    "\001\002\000\004\012\321\001\002\000\006\011\uffce\137" +
    "\uffce\001\002\000\006\012\uffc2\023\326\001\002\000\004" +
    "\012\343\001\002\000\006\012\uff9a\023\uff9a\001\002\000" +
    "\006\012\uffb0\023\uffb0\001\002\000\016\052\327\053\207" +
    "\054\206\055\210\056\330\057\203\001\002\000\004\010" +
    "\336\001\002\000\004\010\331\001\002\000\004\026\332" +
    "\001\002\000\004\131\333\001\002\000\004\026\334\001" +
    "\002\000\004\024\335\001\002\000\006\012\uff9c\023\uff9c" +
    "\001\002\000\004\026\337\001\002\000\004\125\340\001" +
    "\002\000\004\026\341\001\002\000\004\024\342\001\002" +
    "\000\006\012\uff9b\023\uff9b\001\002\000\004\011\uffde\001" +
    "\002\000\006\012\uffaf\023\uffaf\001\002\000\004\011\uffd3" +
    "\001\002\000\004\012\347\001\002\000\004\137\uffd0\001" +
    "\002\000\006\012\uffa8\023\uffa8\001\002\000\006\012\uff8a" +
    "\023\uff8a\001\002\000\006\012\uffba\023\354\001\002\000" +
    "\004\012\377\001\002\000\020\051\355\052\356\053\207" +
    "\054\206\055\210\057\203\070\357\001\002\000\004\010" +
    "\372\001\002\000\004\010\365\001\002\000\004\010\360" +
    "\001\002\000\004\026\361\001\002\000\004\137\362\001" +
    "\002\000\004\026\363\001\002\000\004\024\364\001\002" +
    "\000\006\012\uff8b\023\uff8b\001\002\000\004\026\366\001" +
    "\002\000\004\125\367\001\002\000\004\026\370\001\002" +
    "\000\004\024\371\001\002\000\006\012\uff8d\023\uff8d\001" +
    "\002\000\004\026\373\001\002\000\004\125\374\001\002" +
    "\000\004\026\375\001\002\000\004\024\376\001\002\000" +
    "\006\012\uff8c\023\uff8c\001\002\000\004\137\uffd2\001\002" +
    "\000\006\012\uffa7\023\uffa7\001\002\000\004\012\u0102\001" +
    "\002\000\004\011\uffd6\001\002\000\004\011\ufff2\001\002" +
    "\000\004\014\u0105\001\002\000\004\047\u0106\001\002\000" +
    "\004\012\u0107\001\002\000\004\011\uffcb\001\002\000\004" +
    "\137\u0114\001\002\000\004\011\ufff0\001\002\000\004\011" +
    "\u010f\001\002\000\004\040\u010c\001\002\000\004\012\u010d" +
    "\001\002\000\004\137\uffd9\001\002\000\004\011\ufff8\001" +
    "\002\000\006\014\u0111\040\u010c\001\002\000\004\011\uffef" +
    "\001\002\000\004\037\u0112\001\002\000\004\012\u0113\001" +
    "\002\000\004\011\uffda\001\002\000\004\011\u0116\001\002" +
    "\000\004\011\ufff1\001\002\000\004\014\u0117\001\002\000" +
    "\004\040\u0118\001\002\000\004\012\u0119\001\002\000\004" +
    "\011\uffd8\001\002\000\006\011\u0129\137\u011b\001\002\000" +
    "\006\011\uffee\137\uffee\001\002\000\004\137\u0122\001\002" +
    "\000\004\034\u011f\001\002\000\006\011\uffec\137\uffec\001" +
    "\002\000\006\012\uffc3\023\255\001\002\000\004\012\u0121" +
    "\001\002\000\004\137\uffe0\001\002\000\004\011\u0123\001" +
    "\002\000\004\014\u0125\001\002\000\006\011\uffed\137\uffed" +
    "\001\002\000\004\034\u0126\001\002\000\004\012\u0127\001" +
    "\002\000\006\011\uffdf\137\uffdf\001\002\000\004\011\ufff3" +
    "\001\002\000\006\014\u012b\034\u011f\001\002\000\006\011" +
    "\uffeb\137\uffeb\001\002\000\004\046\u012c\001\002\000\004" +
    "\012\u012d\001\002\000\004\011\uffcd\001\002\000\030\014" +
    "\u0135\035\123\036\130\037\127\041\125\042\131\043\122" +
    "\044\120\045\121\046\124\047\126\001\002\000\004\011" +
    "\u0131\001\002\000\004\002\uffff\001\002\000\004\014\u0132" +
    "\001\002\000\004\027\u0133\001\002\000\004\012\u0134\001" +
    "\002\000\004\002\uffe9\001\002\000\004\033\u0136\001\002" +
    "\000\004\012\u0137\001\002\000\004\011\uffe5\001\002\000" +
    "\004\011\u013a\001\002\000\004\011\ufffb\001\002\000\004" +
    "\014\u013b\001\002\000\004\045\u013c\001\002\000\004\012" +
    "\u013d\001\002\000\004\011\uffcf\001\002\000\004\030\u013f" +
    "\001\002\000\004\012\u0140\001\002\000\004\011\uffe7\001" +
    "\002\000\004\011\u0147\001\002\000\004\014\u0143\001\002" +
    "\000\004\032\u0144\001\002\000\004\012\u0145\001\002\000" +
    "\004\011\uffe1\001\002\000\004\137\u014a\001\002\000\004" +
    "\031\u0148\001\002\000\004\012\u0149\001\002\000\004\137" +
    "\uffe4\001\002\000\004\011\u014c\001\002\000\004\011\ufffe" +
    "\001\002\000\004\014\u014d\001\002\000\004\031\u014e\001" +
    "\002\000\004\012\u014f\001\002\000\004\011\uffe3\001\002" +
    "\000\006\012\uffc9\023\u0154\001\002\000\006\012\uffb8\023" +
    "\uffb8\001\002\000\006\012\uffca\023\u0154\001\002\000\004" +
    "\012\u0161\001\002\000\006\057\u0155\060\u0156\001\002\000" +
    "\004\010\u015c\001\002\000\004\010\u0157\001\002\000\004" +
    "\026\u0158\001\002\000\004\137\u0159\001\002\000\004\026" +
    "\u015a\001\002\000\004\024\u015b\001\002\000\006\012\uffa1" +
    "\023\uffa1\001\002\000\004\026\u015d\001\002\000\004\136" +
    "\u015e\001\002\000\004\026\u015f\001\002\000\004\024\u0160" +
    "\001\002\000\006\012\uffa2\023\uffa2\001\002\000\004\011" +
    "\uffea\001\002\000\006\012\uffb7\023\uffb7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0160\000\010\002\006\003\003\013\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\015\023" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u0140\001\001\000\004\016\035\001" +
    "\001\000\002\001\001\000\010\054\022\065\021\076\020" +
    "\001\001\000\002\001\001\000\004\076\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\036\001\001\000\032\005" +
    "\057\006\062\027\060\030\067\032\064\036\066\040\070" +
    "\042\061\043\071\045\055\047\063\051\065\001\001\000" +
    "\002\001\001\000\010\055\042\066\041\077\043\001\001" +
    "\000\004\077\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\006\114\020\u012e\027" +
    "\060\030\067\032\064\036\066\040\070\042\061\043\071" +
    "\045\055\047\063\051\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\u0119\012\u011d" +
    "\025\u011b\001\001\000\010\007\u0109\010\u0108\034\u0107\001" +
    "\001\000\004\052\u0102\001\001\000\032\005\112\006\062" +
    "\027\060\030\067\032\064\036\066\040\070\042\061\043" +
    "\071\045\055\047\063\051\065\001\001\000\004\031\105" +
    "\001\001\000\004\041\101\001\001\000\002\001\001\000" +
    "\004\044\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\006\114\027\060\030\067\032\064\036\066\037" +
    "\115\040\070\042\061\043\071\045\055\047\063\051\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\063\352\074\351\105\347" +
    "\106\350\001\001\000\012\056\345\067\250\100\253\106" +
    "\252\001\001\000\002\001\001\000\012\057\322\070\321" +
    "\101\324\106\323\001\001\000\012\056\317\067\250\100" +
    "\253\106\252\001\001\000\012\061\267\072\266\103\271" +
    "\106\270\001\001\000\002\001\001\000\012\056\251\067" +
    "\250\100\253\106\252\001\001\000\012\060\176\071\175" +
    "\102\200\106\177\001\001\000\010\062\131\073\133\104" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\104\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\102\247\106\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\100\264\106\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\103\316\106" +
    "\270\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\101\343\106\323\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\105\377\106\350\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\u010f\033\u010d\034\u0107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\u0114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\u0129\025" +
    "\u011b\050\u0127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\056\u011f\067" +
    "\250\100\253\106\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\u0123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\u012f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\u0138\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\u0145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\u014a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\053\u0152\064\u0151\075\u0150\001\001\000\002" +
    "\001\001\000\004\075\u0161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();

     public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right,
                        "Verifica la Sintaxis"));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right,
                        "Ninguna"));
    }

    public LinkedList<Errores> getErrores(){
        return listaErrores;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= BASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BASE ::= INICIO CABEZA_I INTRODUCCION CABEZA_F CUERPO_I CONTENIDOS CUERPO_F FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BASE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INTRODUCCION ::= DIREC_I DIREC_F TITU_I VALOR TITU_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRODUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONTENIDOS ::= CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONTENIDOS ::= CONTENIDOS CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTENIDO ::= TIH_I VALOR TIH_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDO ::= INT_I 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDO ::= CUAD_I CUAD_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDO ::= SELE_I LIST_OPT SELE_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTENIDO ::= DIV_I CONTENIDOS DIV_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTENIDO ::= IMG_I IMG_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDO ::= BR_I 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO ::= BOTON_I VALOR BOTON_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDO ::= PARA_I LIST_SPAN PARA_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO ::= SCRIPT_I SCRIPT_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUAOPT ::= OPT_I VALOR OPT_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUAOPT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LIST_OPT ::= CUAOPT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_OPT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LIST_OPT ::= LIST_OPT CUAOPT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_OPT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SPAN ::= VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPAN",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SPAN ::= BAN_I VALOR BAN_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPAN",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LIST_SPAN ::= SPAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_SPAN",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LIST_SPAN ::= LIST_SPAN SPAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_SPAN",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INICIO ::= MENOR CC ETIQUETA1 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FIN ::= MENOR DIVI CC MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIN",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CABEZA_I ::= MENOR HEAD MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABEZA_I",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CABEZA_F ::= MENOR DIVI HEAD MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABEZA_F",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPO_I ::= MENOR BODY ETIQUETA3 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_I",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO_F ::= MENOR DIVI BODY MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_F",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TITU_I ::= MENOR TITLE MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITU_I",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TITU_F ::= MENOR DIVI TITLE MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITU_F",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DIREC_I ::= MENOR LINK ETIQUETA2 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIREC_I",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DIREC_F ::= MENOR DIVI LINK MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIREC_F",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BAN_I ::= MENOR SPAM ETIQUETA4 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAN_I",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BAN_F ::= MENOR DIVI SPAM MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAN_F",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INT_I ::= MENOR INPUT ETIQUETA5 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INT_I",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUAD_I ::= MENOR TEXTAREA ETIQUETA6 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUAD_I",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUAD_F ::= MENOR DIVI TEXTAREA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUAD_F",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SELE_I ::= MENOR SELECT ETIQUETA4 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELE_I",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SELE_F ::= MENOR DIVI SELECT MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELE_F",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPT_I ::= MENOR OPTION MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPT_I",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPT_F ::= MENOR DIVI OPTION MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPT_F",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DIV_I ::= MENOR DIV ETIQUETA7 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIV_I",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DIV_F ::= MENOR DIVI DIV MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIV_F",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IMG_I ::= MENOR IMG ETIQUETA8 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMG_I",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IMG_F ::= MENOR DIVI IMG MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMG_F",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BR_I ::= MENOR BR MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BR_I",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BOTON_I ::= MENOR BUTTON ETIQUETA9 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON_I",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BOTON_F ::= MENOR DIVI BUTTON MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON_F",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIH_I ::= MENOR TITUH ETIQUETA4 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIH_I",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIH_F ::= MENOR DIVI TITUH MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIH_F",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PARA_I ::= MENOR PARRA ETIQUETA4 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA_I",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PARA_F ::= MENOR DIVI PARRA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA_F",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SCRIPT_I ::= MENOR SCRIPT MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_I",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SCRIPT_F ::= MENOR DIVI SCRIPT MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_F",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ETIQUETA1 ::= LIST_VAL1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA1",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ETIQUETA1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA1",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ETIQUETA2 ::= LIST_VAL2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA2",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ETIQUETA2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA2",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ETIQUETA3 ::= LIST_VAL3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA3",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ETIQUETA3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA3",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ETIQUETA4 ::= LIST_VAL4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA4",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ETIQUETA4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA4",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ETIQUETA5 ::= LIST_VAL5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA5",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ETIQUETA5 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA5",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ETIQUETA6 ::= LIST_VAL6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA6",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ETIQUETA6 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA6",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ETIQUETA7 ::= LIST_VAL7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA7",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ETIQUETA7 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA7",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ETIQUETA8 ::= LIST_VAL8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA8",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ETIQUETA8 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA8",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ETIQUETA9 ::= LIST_VAL9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA9",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ETIQUETA9 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA9",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LIST_VAL1 ::= VALOR_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LIST_VAL1 ::= LIST_VAL1 VALOR_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LIST_VAL2 ::= VALOR_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LIST_VAL2 ::= LIST_VAL2 VALOR_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LIST_VAL3 ::= VALOR_3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL3",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LIST_VAL3 ::= LIST_VAL3 VALOR_3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL3",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LIST_VAL4 ::= VALOR_4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL4",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LIST_VAL4 ::= LIST_VAL4 VALOR_4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL4",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LIST_VAL5 ::= VALOR_5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL5",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LIST_VAL5 ::= LIST_VAL5 VALOR_5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL5",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LIST_VAL6 ::= VALOR_6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL6",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LIST_VAL6 ::= LIST_VAL6 VALOR_6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL6",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LIST_VAL7 ::= VALOR_7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL7",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LIST_VAL7 ::= LIST_VAL7 VALOR_7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL7",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LIST_VAL8 ::= VALOR_8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL8",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LIST_VAL8 ::= LIST_VAL8 VALOR_8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL8",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LIST_VAL9 ::= VALOR_9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL9",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LIST_VAL9 ::= LIST_VAL9 VALOR_9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL9",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VALOR_N ::= CORCHEA FONTSI IGUAL COMID size COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VALOR_N ::= CORCHEA FONTFA IGUAL COMID family COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VALOR_N ::= CORCHEA TEXTALI IGUAL COMID aling COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VALOR_N ::= CORCHEA ID IGUAL COMID IDENTIFICADOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALOR_1 ::= CORCHEA ID IGUAL COMID IDENTIFICADOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALOR_1 ::= CORCHEA NAME IGUAL COMID VALOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALOR_2 ::= CORCHEA HREF IGUAL COMID enlace COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_2",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALOR_3 ::= CORCHEA BACKG IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_3",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALOR_4 ::= CORCHEA COLOR IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_4",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALOR_4 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_4",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALOR_5 ::= CORCHEA TYPE IGUAL COMID tipos COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_5",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALOR_5 ::= CORCHEA COLOR IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_5",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALOR_5 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_5",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALOR_6 ::= CORCHEA COLS IGUAL COMID ENTERO COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_6",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALOR_6 ::= CORCHEA ROWS IGUAL COMID ENTERO COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_6",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALOR_6 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_6",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VALOR_7 ::= CORCHEA COLOR IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VALOR_7 ::= CORCHEA BACKG IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VALOR_7 ::= CORCHEA CLASS IGUAL COMID clase COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALOR_7 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VALOR_8 ::= CORCHEA ID IGUAL COMID IDENTIFICADOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VALOR_8 ::= CORCHEA SRC IGUAL COMID enlace COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VALOR_8 ::= CORCHEA WIDTH IGUAL COMID th COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VALOR_8 ::= CORCHEA HEIGHT IGUAL COMID th COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VALOR_8 ::= CORCHEA ALT IGUAL COMID VALOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VALOR_9 ::= CORCHEA COLOR IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VALOR_9 ::= CORCHEA BACKG IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VALOR_9 ::= CORCHEA ONCLICK IGUAL COMID VALOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VALOR_9 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
