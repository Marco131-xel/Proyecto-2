
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main.analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import main.excepciones.Errores;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\265\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\004\007\000\002\005\003\000\002\005\004" +
    "\000\002\006\005\000\002\006\003\000\002\006\005\000" +
    "\002\006\004\000\002\006\005\000\002\006\005\000\002" +
    "\006\004\000\002\006\003\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\010\005\000\002\007\003" +
    "\000\002\007\004\000\002\012\003\000\002\012\005\000" +
    "\002\011\003\000\002\011\004\000\002\013\006\000\002" +
    "\014\006\000\002\015\005\000\002\016\006\000\002\017" +
    "\006\000\002\020\006\000\002\021\005\000\002\022\006" +
    "\000\002\023\006\000\002\024\006\000\002\025\006\000" +
    "\002\026\006\000\002\027\006\000\002\030\006\000\002" +
    "\031\006\000\002\032\006\000\002\033\006\000\002\034" +
    "\005\000\002\035\006\000\002\036\006\000\002\037\006" +
    "\000\002\040\006\000\002\041\006\000\002\042\005\000" +
    "\002\043\006\000\002\044\006\000\002\045\006\000\002" +
    "\046\006\000\002\047\006\000\002\050\006\000\002\051" +
    "\005\000\002\052\006\000\002\053\003\000\002\053\002" +
    "\000\002\054\003\000\002\054\002\000\002\055\003\000" +
    "\002\055\002\000\002\056\003\000\002\056\002\000\002" +
    "\057\003\000\002\057\002\000\002\060\003\000\002\060" +
    "\002\000\002\061\003\000\002\061\002\000\002\062\003" +
    "\000\002\062\002\000\002\063\003\000\002\063\002\000" +
    "\002\064\003\000\002\064\004\000\002\065\003\000\002" +
    "\065\004\000\002\066\003\000\002\066\004\000\002\067" +
    "\003\000\002\067\004\000\002\070\003\000\002\070\004" +
    "\000\002\071\003\000\002\071\004\000\002\072\003\000" +
    "\002\072\004\000\002\073\003\000\002\073\004\000\002" +
    "\074\003\000\002\074\004\000\002\106\011\000\002\106" +
    "\011\000\002\106\011\000\002\106\011\000\002\075\011" +
    "\000\002\075\011\000\002\076\011\000\002\077\011\000" +
    "\002\100\011\000\002\100\003\000\002\101\011\000\002" +
    "\101\011\000\002\101\003\000\002\102\011\000\002\102" +
    "\011\000\002\102\003\000\002\103\011\000\002\103\011" +
    "\000\002\103\011\000\002\103\003\000\002\104\011\000" +
    "\002\104\011\000\002\104\011\000\002\104\011\000\002" +
    "\104\011\000\002\105\011\000\002\105\011\000\002\105" +
    "\011\000\002\105\003\000\002\107\003\000\002\107\004" +
    "\000\002\110\003\000\002\110\003\000\002\110\003\000" +
    "\002\110\003\000\002\110\003\000\002\110\003\000\002" +
    "\110\003\000\002\111\007\000\002\116\003\000\002\116" +
    "\003\000\002\116\003\000\002\116\003\000\002\122\003" +
    "\000\002\122\003\000\002\122\003\000\002\122\003\000" +
    "\002\122\003\000\002\113\006\000\002\112\005\000\002" +
    "\112\006\000\002\114\003\000\002\114\003\000\002\114" +
    "\003\000\002\114\003\000\002\114\003\000\002\117\005" +
    "\000\002\121\007\000\002\115\004\000\002\115\004\000" +
    "\002\115\005\000\002\115\005\000\002\115\005\000\002" +
    "\115\005\000\002\115\006\000\002\115\006\000\002\115" +
    "\006\000\002\115\006\000\002\115\005\000\002\115\005" +
    "\000\002\115\005\000\002\115\005\000\002\115\003\000" +
    "\002\115\003\000\002\115\003\000\002\115\003\000\002" +
    "\115\003\000\002\115\003\000\002\115\003\000\002\115" +
    "\005\000\002\123\003\000\002\123\004\000\002\120\011" +
    "\000\002\124\010\000\002\125\012\000\002\126\013\000" +
    "\002\127\003\000\002\127\004\000\002\130\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d3\000\004\013\005\001\002\000\004\002\000\001" +
    "\002\000\004\031\u01c3\001\002\000\004\013\012\001\002" +
    "\000\004\002\010\001\002\000\004\002\001\001\002\000" +
    "\004\013\017\001\002\000\004\032\013\001\002\000\004" +
    "\014\014\001\002\000\004\013\uffe7\001\002\000\004\013" +
    "\u01b5\001\002\000\004\013\035\001\002\000\004\034\020" +
    "\001\002\000\006\014\uffc6\025\024\001\002\000\006\014" +
    "\uffb5\025\uffb5\001\002\000\006\014\uffc7\025\024\001\002" +
    "\000\004\014\033\001\002\000\004\052\025\001\002\000" +
    "\004\011\026\001\002\000\004\030\027\001\002\000\004" +
    "\130\030\001\002\000\004\030\031\001\002\000\004\026" +
    "\032\001\002\000\006\014\uff9f\025\uff9f\001\002\000\004" +
    "\013\uffe1\001\002\000\006\014\uffb4\025\uffb4\001\002\000" +
    "\004\016\u01b1\001\002\000\004\013\040\001\002\000\004" +
    "\013\060\001\002\000\004\035\041\001\002\000\006\014" +
    "\uffc4\025\044\001\002\000\006\014\uffc5\025\044\001\002" +
    "\000\004\014\054\001\002\000\004\053\046\001\002\000" +
    "\006\014\uffb3\025\uffb3\001\002\000\004\011\047\001\002" +
    "\000\004\030\050\001\002\000\004\131\051\001\002\000" +
    "\004\030\052\001\002\000\004\026\053\001\002\000\006" +
    "\014\uff9e\025\uff9e\001\002\000\004\013\uffe5\001\002\000" +
    "\006\014\uffb2\025\uffb2\001\002\000\004\143\u01af\001\002" +
    "\000\004\143\u01a9\001\002\000\030\036\131\037\124\040" +
    "\132\041\130\043\126\044\133\045\123\046\121\047\122" +
    "\050\125\051\127\001\002\000\004\013\u019f\001\002\000" +
    "\004\013\ufffa\001\002\000\004\013\ufffd\001\002\000\004" +
    "\013\ufff4\001\002\000\032\073\u013b\074\u012d\075\u013e\076" +
    "\u013d\105\u013c\106\u0135\107\u0136\110\u012f\111\u012e\114\u012c" +
    "\117\u0134\142\u013a\001\002\000\006\013\u011c\143\u011a\001" +
    "\002\000\004\013\u010a\001\002\000\004\013\060\001\002" +
    "\000\004\013\110\001\002\000\004\013\102\001\002\000" +
    "\004\143\074\001\002\000\004\013\076\001\002\000\004" +
    "\013\ufff3\001\002\000\004\016\077\001\002\000\004\046" +
    "\100\001\002\000\004\014\101\001\002\000\004\013\uffd0" +
    "\001\002\000\004\016\104\001\002\000\004\013\ufff5\001" +
    "\002\000\004\044\105\001\002\000\004\014\106\001\002" +
    "\000\004\013\uffd3\001\002\000\004\013\ufff8\001\002\000" +
    "\004\016\111\001\002\000\004\040\112\001\002\000\004" +
    "\014\113\001\002\000\004\013\uffdb\001\002\000\004\013" +
    "\115\001\002\000\032\016\120\036\131\037\124\040\132" +
    "\041\130\043\126\044\133\045\123\046\121\047\122\050" +
    "\125\051\127\001\002\000\004\013\ufffc\001\002\000\004" +
    "\013\ufff6\001\002\000\004\043\u0105\001\002\000\006\014" +
    "\uffb8\025\357\001\002\000\006\014\uffc2\025\257\001\002" +
    "\000\004\014\351\001\002\000\006\014\uffc0\025\332\001" +
    "\002\000\006\014\uffc2\025\257\001\002\000\006\014\uffbc" +
    "\025\277\001\002\000\004\014\272\001\002\000\006\014" +
    "\uffc2\025\257\001\002\000\006\014\uffc2\025\257\001\002" +
    "\000\006\014\uffbe\025\204\001\002\000\006\014\uffba\025" +
    "\137\001\002\000\004\014\177\001\002\000\006\014\uffa9" +
    "\025\uffa9\001\002\000\006\014\uffbb\025\137\001\002\000" +
    "\014\061\140\066\143\067\142\070\144\071\141\001\002" +
    "\000\004\011\171\001\002\000\004\011\164\001\002\000" +
    "\004\011\157\001\002\000\004\011\152\001\002\000\004" +
    "\011\145\001\002\000\004\030\146\001\002\000\004\137" +
    "\147\001\002\000\004\030\150\001\002\000\004\026\151" +
    "\001\002\000\006\014\uff8e\025\uff8e\001\002\000\004\030" +
    "\153\001\002\000\004\130\154\001\002\000\004\030\155" +
    "\001\002\000\004\026\156\001\002\000\006\014\uff90\025" +
    "\uff90\001\002\000\004\030\160\001\002\000\004\137\161" +
    "\001\002\000\004\030\162\001\002\000\004\026\163\001" +
    "\002\000\006\014\uff8f\025\uff8f\001\002\000\004\030\165" +
    "\001\002\000\004\143\166\001\002\000\004\030\167\001" +
    "\002\000\004\026\170\001\002\000\006\014\uff8d\025\uff8d" +
    "\001\002\000\004\030\172\001\002\000\004\142\173\001" +
    "\002\000\004\030\174\001\002\000\004\026\175\001\002" +
    "\000\006\014\uff91\025\uff91\001\002\000\006\014\uffa8\025" +
    "\uffa8\001\002\000\004\013\uffd4\001\002\000\006\014\uffbf" +
    "\025\204\001\002\000\004\014\251\001\002\000\006\014" +
    "\uff96\025\uff96\001\002\000\006\014\uffad\025\uffad\001\002" +
    "\000\016\055\211\056\210\057\212\061\205\063\207\064" +
    "\206\001\002\000\004\011\244\001\002\000\004\011\237" +
    "\001\002\000\004\011\232\001\002\000\004\011\225\001" +
    "\002\000\004\011\220\001\002\000\004\011\213\001\002" +
    "\000\004\030\214\001\002\000\004\134\215\001\002\000" +
    "\004\030\216\001\002\000\004\026\217\001\002\000\006" +
    "\014\uffa3\025\uffa3\001\002\000\004\030\221\001\002\000" +
    "\004\133\222\001\002\000\004\030\223\001\002\000\004" +
    "\026\224\001\002\000\006\014\uffa4\025\uffa4\001\002\000" +
    "\004\030\226\001\002\000\004\132\227\001\002\000\004" +
    "\030\230\001\002\000\004\026\231\001\002\000\006\014" +
    "\uffa5\025\uffa5\001\002\000\004\030\233\001\002\000\004" +
    "\140\234\001\002\000\004\030\235\001\002\000\004\026" +
    "\236\001\002\000\006\014\uff98\025\uff98\001\002\000\004" +
    "\030\240\001\002\000\004\140\241\001\002\000\004\030" +
    "\242\001\002\000\004\026\243\001\002\000\006\014\uff97" +
    "\025\uff97\001\002\000\004\030\245\001\002\000\004\142" +
    "\246\001\002\000\004\030\247\001\002\000\004\026\250" +
    "\001\002\000\006\014\uffa2\025\uffa2\001\002\000\004\013" +
    "\uffdc\001\002\000\006\014\uffac\025\uffac\001\002\000\006" +
    "\014\uffc3\025\257\001\002\000\004\014\266\001\002\000" +
    "\006\014\uff9c\025\uff9c\001\002\000\006\014\uffb1\025\uffb1" +
    "\001\002\000\014\054\260\055\211\056\210\057\212\061" +
    "\205\001\002\000\004\011\261\001\002\000\004\030\262" +
    "\001\002\000\004\131\263\001\002\000\004\030\264\001" +
    "\002\000\004\026\265\001\002\000\006\014\uff9d\025\uff9d" +
    "\001\002\000\004\143\uffdf\001\002\000\006\014\uffb0\025" +
    "\uffb0\001\002\000\004\014\271\001\002\000\004\013\uffda" +
    "\001\002\000\032\073\uffcb\074\uffcb\075\uffcb\076\uffcb\105" +
    "\uffcb\106\uffcb\107\uffcb\110\uffcb\111\uffcb\114\uffcb\117\uffcb" +
    "\142\uffcb\001\002\000\006\014\uffbd\025\277\001\002\000" +
    "\004\014\322\001\002\000\006\014\uff92\025\uff92\001\002" +
    "\000\006\014\uffab\025\uffab\001\002\000\020\053\300\054" +
    "\301\055\211\056\210\057\212\061\205\065\302\001\002" +
    "\000\004\011\315\001\002\000\004\011\310\001\002\000" +
    "\004\011\303\001\002\000\004\030\304\001\002\000\004" +
    "\136\305\001\002\000\004\030\306\001\002\000\004\026" +
    "\307\001\002\000\006\014\uff93\025\uff93\001\002\000\004" +
    "\030\311\001\002\000\004\131\312\001\002\000\004\030" +
    "\313\001\002\000\004\026\314\001\002\000\006\014\uff95" +
    "\025\uff95\001\002\000\004\030\316\001\002\000\004\131" +
    "\317\001\002\000\004\030\320\001\002\000\004\026\321" +
    "\001\002\000\006\014\uff94\025\uff94\001\002\000\004\013" +
    "\uffd6\001\002\000\006\014\uffaa\025\uffaa\001\002\000\004" +
    "\014\325\001\002\000\006\013\uffcd\143\uffcd\001\002\000" +
    "\006\014\uffc1\025\332\001\002\000\004\014\347\001\002" +
    "\000\006\014\uff99\025\uff99\001\002\000\006\014\uffaf\025" +
    "\uffaf\001\002\000\016\054\333\055\211\056\210\057\212" +
    "\060\334\061\205\001\002\000\004\011\342\001\002\000" +
    "\004\011\335\001\002\000\004\030\336\001\002\000\004" +
    "\135\337\001\002\000\004\030\340\001\002\000\004\026" +
    "\341\001\002\000\006\014\uff9b\025\uff9b\001\002\000\004" +
    "\030\343\001\002\000\004\131\344\001\002\000\004\030" +
    "\345\001\002\000\004\026\346\001\002\000\006\014\uff9a" +
    "\025\uff9a\001\002\000\004\013\uffdd\001\002\000\006\014" +
    "\uffae\025\uffae\001\002\000\004\013\uffd2\001\002\000\004" +
    "\014\353\001\002\000\004\143\uffcf\001\002\000\006\014" +
    "\uffa7\025\uffa7\001\002\000\006\014\uff89\025\uff89\001\002" +
    "\000\006\014\uffb9\025\357\001\002\000\020\053\362\054" +
    "\363\055\211\056\210\057\212\061\205\072\364\001\002" +
    "\000\004\014\361\001\002\000\004\143\uffd1\001\002\000" +
    "\004\011\377\001\002\000\004\011\372\001\002\000\004" +
    "\011\365\001\002\000\004\030\366\001\002\000\004\143" +
    "\367\001\002\000\004\030\370\001\002\000\004\026\371" +
    "\001\002\000\006\014\uff8a\025\uff8a\001\002\000\004\030" +
    "\373\001\002\000\004\131\374\001\002\000\004\030\375" +
    "\001\002\000\004\026\376\001\002\000\006\014\uff8c\025" +
    "\uff8c\001\002\000\004\030\u0100\001\002\000\004\131\u0101" +
    "\001\002\000\004\030\u0102\001\002\000\004\026\u0103\001" +
    "\002\000\006\014\uff8b\025\uff8b\001\002\000\006\014\uffa6" +
    "\025\uffa6\001\002\000\004\014\u0106\001\002\000\004\013" +
    "\uffd5\001\002\000\004\143\u0113\001\002\000\004\013\uffef" +
    "\001\002\000\004\013\u010f\001\002\000\004\042\u010b\001" +
    "\002\000\004\014\u010c\001\002\000\004\143\uffd8\001\002" +
    "\000\004\013\ufff7\001\002\000\004\013\uffee\001\002\000" +
    "\006\016\u0110\042\u010b\001\002\000\004\041\u0111\001\002" +
    "\000\004\014\u0112\001\002\000\004\013\uffd9\001\002\000" +
    "\004\013\u0115\001\002\000\004\013\ufff0\001\002\000\004" +
    "\016\u0116\001\002\000\004\042\u0117\001\002\000\004\014" +
    "\u0118\001\002\000\004\013\uffd7\001\002\000\006\013\u0125" +
    "\143\u011a\001\002\000\006\013\uffed\143\uffed\001\002\000" +
    "\004\143\u011e\001\002\000\004\036\131\001\002\000\006" +
    "\013\uffeb\143\uffeb\001\002\000\004\013\u011f\001\002\000" +
    "\004\016\u0121\001\002\000\006\013\uffec\143\uffec\001\002" +
    "\000\004\036\u0122\001\002\000\004\014\u0123\001\002\000" +
    "\006\013\uffde\143\uffde\001\002\000\004\013\ufff2\001\002" +
    "\000\006\016\u0127\036\131\001\002\000\006\013\uffea\143" +
    "\uffea\001\002\000\004\050\u0128\001\002\000\004\014\u0129" +
    "\001\002\000\004\013\uffcc\001\002\000\034\013\uff88\073" +
    "\uff88\074\uff88\075\uff88\076\uff88\105\uff88\106\uff88\107\uff88" +
    "\110\uff88\111\uff88\114\uff88\117\uff88\142\uff88\001\002\000" +
    "\006\127\u019a\142\u019b\001\002\000\004\023\u018c\001\002" +
    "\000\004\004\uff7d\001\002\000\006\127\uff6f\142\uff6f\001" +
    "\002\000\006\127\uff71\142\uff71\001\002\000\034\013\uff85" +
    "\073\uff85\074\uff85\075\uff85\076\uff85\105\uff85\106\uff85\107" +
    "\uff85\110\uff85\111\uff85\114\uff85\117\uff85\142\uff85\001\002" +
    "\000\034\013\u0187\073\u013b\074\u012d\075\u013e\076\u013d\105" +
    "\u013c\106\u0135\107\u0136\110\u012f\111\u012e\114\u012c\117\u0134" +
    "\142\u013a\001\002\000\034\013\uff82\073\uff82\074\uff82\075" +
    "\uff82\076\uff82\105\uff82\106\uff82\107\uff82\110\uff82\111\uff82" +
    "\114\uff82\117\uff82\142\uff82\001\002\000\034\013\uff81\073" +
    "\uff81\074\uff81\075\uff81\076\uff81\105\uff81\106\uff81\107\uff81" +
    "\110\uff81\111\uff81\114\uff81\117\uff81\142\uff81\001\002\000" +
    "\004\004\u0178\001\002\000\006\127\uff6e\142\uff6e\001\002" +
    "\000\006\127\uff70\142\uff70\001\002\000\034\013\uff84\073" +
    "\uff84\074\uff84\075\uff84\076\uff84\105\uff84\106\uff84\107\uff84" +
    "\110\uff84\111\uff84\114\uff84\117\uff84\142\uff84\001\002\000" +
    "\004\004\u0174\001\002\000\034\013\uff83\073\uff83\074\uff83" +
    "\075\uff83\076\uff83\105\uff83\106\uff83\107\uff83\110\uff83\111" +
    "\uff83\114\uff83\117\uff83\142\uff83\001\002\000\004\011\u0141" +
    "\001\002\000\004\004\uff7e\001\002\000\006\127\uff72\142" +
    "\uff72\001\002\000\004\004\uff7b\001\002\000\004\004\uff7c" +
    "\001\002\000\034\013\uff86\073\uff86\074\uff86\075\uff86\076" +
    "\uff86\105\uff86\106\uff86\107\uff86\110\uff86\111\uff86\114\uff86" +
    "\117\uff86\142\uff86\001\002\000\034\013\uff80\073\uff80\074" +
    "\uff80\075\uff80\076\uff80\105\uff80\106\uff80\107\uff80\110\uff80" +
    "\111\uff80\114\uff80\117\uff80\142\uff80\001\002\000\026\004" +
    "\u0147\007\u0143\021\u0148\030\u014d\112\u0145\113\u0146\126\u014b" +
    "\140\u0144\141\u0149\142\u014e\001\002\000\032\005\uff5d\006" +
    "\uff5d\007\uff5d\011\uff5d\013\uff5d\014\uff5d\015\uff5d\017\uff5d" +
    "\020\uff5d\021\uff5d\022\uff5d\043\uff5d\001\002\000\026\004" +
    "\u0147\007\u0143\021\u0148\030\u014d\112\u0145\113\u0146\126\u014b" +
    "\140\u0144\141\u0149\142\u014e\001\002\000\032\005\uff5a\006" +
    "\uff5a\007\uff5a\011\uff5a\013\uff5a\014\uff5a\015\uff5a\017\uff5a" +
    "\020\uff5a\021\uff5a\022\uff5a\043\uff5a\001\002\000\032\005" +
    "\uff58\006\uff58\007\uff58\011\uff58\013\uff58\014\uff58\015\uff58" +
    "\017\uff58\020\uff58\021\uff58\022\uff58\043\uff58\001\002\000" +
    "\032\005\uff57\006\uff57\007\uff57\011\uff57\013\uff57\014\uff57" +
    "\015\uff57\017\uff57\020\uff57\021\uff57\022\uff57\043\uff57\001" +
    "\002\000\026\004\u0147\007\u0143\021\u0148\030\u014d\112\u0145" +
    "\113\u0146\126\u014b\140\u0144\141\u0149\142\u014e\001\002\000" +
    "\026\004\u0147\007\u0143\021\u0148\030\u014d\112\u0145\113\u0146" +
    "\126\u014b\140\u0144\141\u0149\142\u014e\001\002\000\032\005" +
    "\uff59\006\uff59\007\uff59\011\uff59\013\uff59\014\uff59\015\uff59" +
    "\017\uff59\020\uff59\021\uff59\022\uff59\043\uff59\001\002\000" +
    "\032\005\uff5c\006\uff5c\007\uff5c\011\uff5c\013\uff5c\014\uff5c" +
    "\015\uff5c\017\uff5c\020\uff5c\021\uff5c\022\uff5c\043\uff5c\001" +
    "\002\000\004\004\u016c\001\002\000\030\006\u0155\007\u0152" +
    "\011\u0159\013\u0153\014\u0156\015\u0154\017\u015b\020\u0151\021" +
    "\u015a\022\u0158\043\u0157\001\002\000\004\142\u014f\001\002" +
    "\000\032\005\uff5b\006\uff5b\007\uff5b\011\uff5b\013\uff5b\014" +
    "\uff5b\015\uff5b\017\uff5b\020\uff5b\021\uff5b\022\uff5b\043\uff5b" +
    "\001\002\000\004\030\u0150\001\002\000\032\005\uff6d\006" +
    "\uff6d\007\uff6d\011\uff6d\013\uff6d\014\uff6d\015\uff6d\017\uff6d" +
    "\020\uff6d\021\uff6d\022\uff6d\043\uff6d\001\002\000\026\004" +
    "\u0147\007\u0143\021\u0148\030\u014d\112\u0145\113\u0146\126\u014b" +
    "\140\u0144\141\u0149\142\u014e\001\002\000\026\004\u0147\007" +
    "\u0143\021\u0148\030\u014d\112\u0145\113\u0146\126\u014b\140\u0144" +
    "\141\u0149\142\u014e\001\002\000\030\004\u0147\007\u0143\011" +
    "\u0167\021\u0148\030\u014d\112\u0145\113\u0146\126\u014b\140\u0144" +
    "\141\u0149\142\u014e\001\002\000\026\004\u0147\007\u0143\021" +
    "\u0148\030\u014d\112\u0145\113\u0146\126\u014b\140\u0144\141\u0149" +
    "\142\u014e\001\002\000\026\004\u0147\007\u0143\021\u0148\030" +
    "\u014d\112\u0145\113\u0146\126\u014b\140\u0144\141\u0149\142\u014e" +
    "\001\002\000\030\004\u0147\007\u0143\011\u0162\021\u0148\030" +
    "\u014d\112\u0145\113\u0146\126\u014b\140\u0144\141\u0149\142\u014e" +
    "\001\002\000\026\004\u0147\007\u0143\021\u0148\030\u014d\112" +
    "\u0145\113\u0146\126\u014b\140\u0144\141\u0149\142\u014e\001\002" +
    "\000\034\013\uff75\073\uff75\074\uff75\075\uff75\076\uff75\105" +
    "\uff75\106\uff75\107\uff75\110\uff75\111\uff75\114\uff75\117\uff75" +
    "\142\uff75\001\002\000\004\011\u015f\001\002\000\004\011" +
    "\u015d\001\002\000\026\004\u0147\007\u0143\021\u0148\030\u014d" +
    "\112\u0145\113\u0146\126\u014b\140\u0144\141\u0149\142\u014e\001" +
    "\002\000\032\005\uff5f\006\u0155\007\u0152\011\uff5f\013\u0153" +
    "\014\u0156\015\u0154\017\uff5f\020\uff5f\021\uff5f\022\uff5f\043" +
    "\u0157\001\002\000\026\004\u0147\007\u0143\021\u0148\030\u014d" +
    "\112\u0145\113\u0146\126\u014b\140\u0144\141\u0149\142\u014e\001" +
    "\002\000\032\005\uff64\006\u0155\007\u0152\011\uff64\013\uff64" +
    "\014\uff64\015\u0154\017\uff64\020\uff64\021\uff64\022\uff64\043" +
    "\u0157\001\002\000\026\004\u0147\007\u0143\021\u0148\030\u014d" +
    "\112\u0145\113\u0146\126\u014b\140\u0144\141\u0149\142\u014e\001" +
    "\002\000\032\005\uff65\006\u0155\007\u0152\011\uff65\013\uff65" +
    "\014\uff65\015\u0154\017\uff65\020\uff65\021\uff65\022\uff65\043" +
    "\u0157\001\002\000\032\005\uff66\006\uff66\007\uff66\011\uff66" +
    "\013\uff66\014\uff66\015\uff66\017\uff66\020\uff66\021\uff66\022" +
    "\uff66\043\uff66\001\002\000\026\004\u0147\007\u0143\021\u0148" +
    "\030\u014d\112\u0145\113\u0146\126\u014b\140\u0144\141\u0149\142" +
    "\u014e\001\002\000\032\005\uff60\006\u0155\007\u0152\011\uff60" +
    "\013\uff60\014\uff60\015\u0154\017\uff60\020\uff60\021\uff60\022" +
    "\uff60\043\u0157\001\002\000\032\005\uff62\006\u0155\007\u0152" +
    "\011\uff62\013\uff62\014\uff62\015\u0154\017\uff62\020\uff62\021" +
    "\uff62\022\uff62\043\u0157\001\002\000\032\005\uff69\006\uff69" +
    "\007\uff69\011\uff69\013\uff69\014\uff69\015\u0154\017\uff69\020" +
    "\uff69\021\uff69\022\uff69\043\u0157\001\002\000\032\005\uff67" +
    "\006\uff67\007\uff67\011\uff67\013\uff67\014\uff67\015\uff67\017" +
    "\uff67\020\uff67\021\uff67\022\uff67\043\uff67\001\002\000\026" +
    "\004\u0147\007\u0143\021\u0148\030\u014d\112\u0145\113\u0146\126" +
    "\u014b\140\u0144\141\u0149\142\u014e\001\002\000\032\005\uff61" +
    "\006\u0155\007\u0152\011\uff61\013\uff61\014\uff61\015\u0154\017" +
    "\uff61\020\uff61\021\uff61\022\uff61\043\u0157\001\002\000\032" +
    "\005\uff63\006\u0155\007\u0152\011\uff63\013\uff63\014\uff63\015" +
    "\u0154\017\uff63\020\uff63\021\uff63\022\uff63\043\u0157\001\002" +
    "\000\032\005\uff68\006\uff68\007\uff68\011\uff68\013\uff68\014" +
    "\uff68\015\u0154\017\uff68\020\uff68\021\uff68\022\uff68\043\u0157" +
    "\001\002\000\032\005\uff5e\006\u0155\007\u0152\011\uff5e\013" +
    "\u0153\014\u0156\015\u0154\017\uff5e\020\uff5e\021\uff5e\022\uff5e" +
    "\043\u0157\001\002\000\004\142\u016d\001\002\000\004\005" +
    "\u016e\001\002\000\004\022\u016f\001\002\000\032\005\uff6c" +
    "\006\uff6c\007\uff6c\011\uff6c\013\uff6c\014\uff6c\015\uff6c\017" +
    "\uff6c\020\uff6c\021\uff6c\022\uff6c\043\uff6c\001\002\000\032" +
    "\005\uff6a\006\u0155\007\u0152\011\uff6a\013\u0153\014\u0156\015" +
    "\u0154\017\uff6a\020\uff6a\021\uff6a\022\uff6a\043\u0157\001\002" +
    "\000\030\005\u0172\006\u0155\007\u0152\011\u0159\013\u0153\014" +
    "\u0156\015\u0154\017\u015b\020\u0151\021\u015a\043\u0157\001\002" +
    "\000\032\005\uff56\006\uff56\007\uff56\011\uff56\013\uff56\014" +
    "\uff56\015\uff56\017\uff56\020\uff56\021\uff56\022\uff56\043\uff56" +
    "\001\002\000\032\005\uff6b\006\uff6b\007\uff6b\011\uff6b\013" +
    "\uff6b\014\uff6b\015\uff6b\017\uff6b\020\uff6b\021\uff6b\022\uff6b" +
    "\043\uff6b\001\002\000\026\004\u0147\007\u0143\021\u0148\030" +
    "\u014d\112\u0145\113\u0146\126\u014b\140\u0144\141\u0149\142\u014e" +
    "\001\002\000\030\005\u0176\006\u0155\007\u0152\011\u0159\013" +
    "\u0153\014\u0156\015\u0154\017\u015b\020\u0151\021\u015a\043\u0157" +
    "\001\002\000\004\022\u0177\001\002\000\036\013\uff7f\027" +
    "\uff7f\073\uff7f\074\uff7f\075\uff7f\076\uff7f\105\uff7f\106\uff7f" +
    "\107\uff7f\110\uff7f\111\uff7f\114\uff7f\117\uff7f\142\uff7f\001" +
    "\002\000\026\004\u0147\007\u0143\021\u0148\030\u014d\112\u0145" +
    "\113\u0146\126\u014b\140\u0144\141\u0149\142\u014e\001\002\000" +
    "\030\005\u017a\006\u0155\007\u0152\011\u0159\013\u0153\014\u0156" +
    "\015\u0154\017\u015b\020\u0151\021\u015a\043\u0157\001\002\000" +
    "\004\120\u017b\001\002\000\004\114\u012c\001\002\000\036" +
    "\013\uff52\073\uff52\074\uff52\075\uff52\076\uff52\105\uff52\106" +
    "\uff52\107\uff52\110\uff52\111\uff52\114\uff52\117\uff52\121\u017d" +
    "\142\uff52\001\002\000\006\114\u012c\117\u0183\001\002\000" +
    "\004\121\uff4f\001\002\000\004\121\u0180\001\002\000\006" +
    "\114\u012c\117\u0183\001\002\000\004\121\uff4e\001\002\000" +
    "\034\013\uff50\073\uff50\074\uff50\075\uff50\076\uff50\105\uff50" +
    "\106\uff50\107\uff50\110\uff50\111\uff50\114\uff50\117\uff50\142" +
    "\uff50\001\002\000\004\114\u012c\001\002\000\004\121\uff4d" +
    "\001\002\000\034\013\uff51\073\uff51\074\uff51\075\uff51\076" +
    "\uff51\105\uff51\106\uff51\107\uff51\110\uff51\111\uff51\114\uff51" +
    "\117\uff51\142\uff51\001\002\000\034\013\uff87\073\uff87\074" +
    "\uff87\075\uff87\076\uff87\105\uff87\106\uff87\107\uff87\110\uff87" +
    "\111\uff87\114\uff87\117\uff87\142\uff87\001\002\000\004\016" +
    "\u0189\001\002\000\004\013\ufff1\001\002\000\004\051\u018a" +
    "\001\002\000\004\014\u018b\001\002\000\004\013\uffca\001" +
    "\002\000\004\027\u018d\001\002\000\024\073\u013b\074\u012d" +
    "\075\u013e\076\u013d\100\u018e\101\u0191\102\u0194\103\u018f\104" +
    "\u0195\001\002\000\004\022\uff7a\001\002\000\004\022\uff77" +
    "\001\002\000\004\022\u0199\001\002\000\004\022\uff79\001" +
    "\002\000\004\027\u0196\001\002\000\004\027\uff55\001\002" +
    "\000\004\022\uff78\001\002\000\004\022\uff76\001\002\000" +
    "\004\024\u0197\001\002\000\004\115\u0198\001\002\000\036" +
    "\013\uff53\073\uff53\074\uff53\075\uff53\076\uff53\105\uff53\106" +
    "\uff53\107\uff53\110\uff53\111\uff53\114\uff53\117\uff53\121\uff53" +
    "\142\uff53\001\002\000\004\027\uff54\001\002\000\004\142" +
    "\u019d\001\002\000\004\022\u019c\001\002\000\034\013\uff74" +
    "\073\uff74\074\uff74\075\uff74\076\uff74\105\uff74\106\uff74\107" +
    "\uff74\110\uff74\111\uff74\114\uff74\117\uff74\142\uff74\001\002" +
    "\000\004\022\u019e\001\002\000\034\013\uff73\073\uff73\074" +
    "\uff73\075\uff73\076\uff73\105\uff73\106\uff73\107\uff73\110\uff73" +
    "\111\uff73\114\uff73\117\uff73\142\uff73\001\002\000\032\016" +
    "\u01a6\036\131\037\124\040\132\041\130\043\126\044\133" +
    "\045\123\046\121\047\122\050\125\051\127\001\002\000" +
    "\004\013\u01a1\001\002\000\004\016\u01a3\001\002\000\004" +
    "\002\uffff\001\002\000\004\031\u01a4\001\002\000\004\014" +
    "\u01a5\001\002\000\004\002\uffe8\001\002\000\004\035\u01a7" +
    "\001\002\000\004\014\u01a8\001\002\000\004\013\uffe4\001" +
    "\002\000\004\013\u01ab\001\002\000\004\013\ufffb\001\002" +
    "\000\004\016\u01ac\001\002\000\004\047\u01ad\001\002\000" +
    "\004\014\u01ae\001\002\000\004\013\uffce\001\002\000\004" +
    "\013\u011f\001\002\000\004\013\ufff9\001\002\000\004\032" +
    "\u01b2\001\002\000\004\014\u01b3\001\002\000\004\013\uffe6" +
    "\001\002\000\004\013\u01ba\001\002\000\004\016\u01b6\001" +
    "\002\000\004\034\u01b7\001\002\000\004\014\u01b8\001\002" +
    "\000\004\013\uffe0\001\002\000\004\143\u01bd\001\002\000" +
    "\004\033\u01bb\001\002\000\004\014\u01bc\001\002\000\004" +
    "\143\uffe3\001\002\000\004\013\u01bf\001\002\000\004\013" +
    "\ufffe\001\002\000\004\016\u01c0\001\002\000\004\033\u01c1" +
    "\001\002\000\004\014\u01c2\001\002\000\004\013\uffe2\001" +
    "\002\000\006\014\uffc8\025\u01c7\001\002\000\006\014\uffb7" +
    "\025\uffb7\001\002\000\006\014\uffc9\025\u01c7\001\002\000" +
    "\004\014\u01d4\001\002\000\006\061\u01c8\062\u01c9\001\002" +
    "\000\004\011\u01cf\001\002\000\004\011\u01ca\001\002\000" +
    "\004\030\u01cb\001\002\000\004\143\u01cc\001\002\000\004" +
    "\030\u01cd\001\002\000\004\026\u01ce\001\002\000\006\014" +
    "\uffa0\025\uffa0\001\002\000\004\030\u01d0\001\002\000\004" +
    "\142\u01d1\001\002\000\004\030\u01d2\001\002\000\004\026" +
    "\u01d3\001\002\000\006\014\uffa1\025\uffa1\001\002\000\004" +
    "\013\uffe9\001\002\000\006\014\uffb6\025\uffb6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d3\000\010\002\006\003\003\013\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\015\023" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u01b3\001\001\000\004\016\035\001" +
    "\001\000\002\001\001\000\010\054\022\065\021\076\020" +
    "\001\001\000\002\001\001\000\004\076\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\036\001\001\000\034\005" +
    "\060\006\062\025\055\027\061\030\070\032\066\036\067" +
    "\040\071\042\063\043\072\045\056\047\065\051\064\001" +
    "\001\000\002\001\001\000\010\055\042\066\041\077\044" +
    "\001\001\000\004\077\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\006\115\020\u019f\025\055\027\061\030\070\032\066" +
    "\036\067\040\071\042\063\043\072\045\056\047\065\051" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\107\u0130\110\u0129\111\u013e\112\u012f\113" +
    "\u0136\114\u012a\116\u0137\120\u0138\124\u0131\125\u0132\126\u013f" +
    "\001\001\000\010\011\u0118\012\u011c\025\u011a\001\001\000" +
    "\010\007\u0108\010\u0107\034\u0106\001\001\000\034\005\113" +
    "\006\062\025\055\027\061\030\070\032\066\036\067\040" +
    "\071\042\063\043\072\045\056\047\065\051\064\001\001" +
    "\000\004\031\106\001\001\000\004\041\102\001\001\000" +
    "\002\001\001\000\004\044\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\006\115\025\055\027\061\030" +
    "\070\032\066\036\067\037\116\040\071\042\063\043\072" +
    "\045\056\047\065\051\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\063\357\074\355\105\353\106\354\001\001\000\012\056" +
    "\351\067\252\100\255\106\254\001\001\000\002\001\001" +
    "\000\012\057\326\070\325\101\330\106\327\001\001\000" +
    "\012\056\323\067\252\100\255\106\254\001\001\000\012" +
    "\061\273\072\272\103\275\106\274\001\001\000\002\001" +
    "\001\000\012\056\267\067\252\100\255\106\254\001\001" +
    "\000\012\056\253\067\252\100\255\106\254\001\001\000" +
    "\012\060\200\071\177\102\202\106\201\001\001\000\010" +
    "\062\133\073\135\104\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\104\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\102\251\106\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\100\266\106\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\103\322\106" +
    "\274\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\101\347\106\327\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\105\u0103\106\354\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\u010d\033\u010c" +
    "\034\u0106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\u0113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\u0125\025\u011a\050\u0123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u011f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\052\u0187\110\u0185\111\u013e\112\u012f\113\u0136" +
    "\114\u012a\116\u0137\120\u0138\124\u0131\125\u0132\126\u013f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\115\u014b" +
    "\117\u0141\121\u0149\001\001\000\002\001\001\000\010\115" +
    "\u0172\117\u0141\121\u0149\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\115\u0170\117\u0141\121" +
    "\u0149\001\001\000\010\115\u016f\117\u0141\121\u0149\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\115\u016a\117\u0141\121" +
    "\u0149\001\001\000\010\115\u0169\117\u0141\121\u0149\001\001" +
    "\000\010\115\u0167\117\u0141\121\u0149\001\001\000\010\115" +
    "\u0165\117\u0141\121\u0149\001\001\000\010\115\u0164\117\u0141" +
    "\121\u0149\001\001\000\010\115\u0162\117\u0141\121\u0149\001" +
    "\001\000\010\115\u0160\117\u0141\121\u0149\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\115" +
    "\u015b\117\u0141\121\u0149\001\001\000\002\001\001\000\010" +
    "\115\u015d\117\u0141\121\u0149\001\001\000\002\001\001\000" +
    "\010\115\u015f\117\u0141\121\u0149\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\115\u0163\117\u0141\121\u0149\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\115\u0168\117\u0141\121\u0149\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\115" +
    "\u0174\117\u0141\121\u0149\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\115\u0178\117\u0141\121" +
    "\u0149\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\120\u017b\001\001\000\006\127\u017e\130\u017d\001\001\000" +
    "\004\120\u0184\001\001\000\002\001\001\000\004\130\u0180" +
    "\001\001\000\004\120\u0181\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\120\u0183\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\111\u0192\116\u0137\122" +
    "\u018f\123\u0191\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\u01a1\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\u01a9\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\u01af\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\u01b8\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u01bd\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\053\u01c5\064\u01c4\075" +
    "\u01c3\001\001\000\002\001\001\000\004\075\u01d4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();

     public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right,
                        "Verifica la Sintaxis"));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right,
                        "Ninguna"));
    }

    public LinkedList<Errores> getErrores(){
        return listaErrores;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= BASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BASE ::= INICIO CABEZA_I INTRODUCCION CABEZA_F CUERPO_I CONTENIDOS CUERPO_F FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BASE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INTRODUCCION ::= DIREC_I DIREC_F TITU_I VALOR TITU_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRODUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONTENIDOS ::= CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONTENIDOS ::= CONTENIDOS CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTENIDO ::= TIH_I VALOR TIH_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDO ::= INT_I 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDO ::= BAN_I VALOR BAN_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDO ::= CUAD_I CUAD_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTENIDO ::= SELE_I LIST_OPT SELE_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTENIDO ::= DIV_I CONTENIDOS DIV_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDO ::= IMG_I IMG_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO ::= BR_I 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDO ::= BOTON_I VALOR BOTON_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO ::= PARA_I LIST_SPAN PARA_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO ::= SCRIPT_I INSTRUCCIONES SCRIPT_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUAOPT ::= OPT_I VALOR OPT_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUAOPT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LIST_OPT ::= CUAOPT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_OPT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LIST_OPT ::= LIST_OPT CUAOPT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_OPT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SPAN ::= VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPAN",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SPAN ::= BAN_I VALOR BAN_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPAN",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LIST_SPAN ::= SPAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_SPAN",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LIST_SPAN ::= LIST_SPAN SPAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_SPAN",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INICIO ::= MENOR CC ETIQUETA1 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FIN ::= MENOR DIVI CC MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIN",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CABEZA_I ::= MENOR HEAD MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABEZA_I",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CABEZA_F ::= MENOR DIVI HEAD MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABEZA_F",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO_I ::= MENOR BODY ETIQUETA3 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_I",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO_F ::= MENOR DIVI BODY MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_F",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TITU_I ::= MENOR TITLE MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITU_I",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TITU_F ::= MENOR DIVI TITLE MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITU_F",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DIREC_I ::= MENOR LINK ETIQUETA2 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIREC_I",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DIREC_F ::= MENOR DIVI LINK MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIREC_F",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BAN_I ::= MENOR SPAM ETIQUETA4 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAN_I",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BAN_F ::= MENOR DIVI SPAM MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAN_F",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INT_I ::= MENOR INPUT ETIQUETA5 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INT_I",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUAD_I ::= MENOR TEXTAREA ETIQUETA6 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUAD_I",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CUAD_F ::= MENOR DIVI TEXTAREA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUAD_F",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SELE_I ::= MENOR SELECT ETIQUETA4 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELE_I",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SELE_F ::= MENOR DIVI SELECT MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELE_F",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPT_I ::= MENOR OPTION MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPT_I",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPT_F ::= MENOR DIVI OPTION MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPT_F",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DIV_I ::= MENOR DIV ETIQUETA7 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIV_I",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DIV_F ::= MENOR DIVI DIV MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIV_F",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IMG_I ::= MENOR IMG ETIQUETA8 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMG_I",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IMG_F ::= MENOR DIVI IMG MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMG_F",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BR_I ::= MENOR BR MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BR_I",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BOTON_I ::= MENOR BUTTON ETIQUETA9 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON_I",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BOTON_F ::= MENOR DIVI BUTTON MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON_F",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIH_I ::= MENOR TITUH ETIQUETA4 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIH_I",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIH_F ::= MENOR DIVI TITUH MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIH_F",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PARA_I ::= MENOR PARRA ETIQUETA4 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA_I",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARA_F ::= MENOR DIVI PARRA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA_F",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SCRIPT_I ::= MENOR SCRIPT MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_I",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SCRIPT_F ::= MENOR DIVI SCRIPT MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_F",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ETIQUETA1 ::= LIST_VAL1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA1",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ETIQUETA1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA1",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ETIQUETA2 ::= LIST_VAL2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA2",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ETIQUETA2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA2",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ETIQUETA3 ::= LIST_VAL3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA3",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ETIQUETA3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA3",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ETIQUETA4 ::= LIST_VAL4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA4",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ETIQUETA4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA4",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ETIQUETA5 ::= LIST_VAL5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA5",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ETIQUETA5 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA5",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ETIQUETA6 ::= LIST_VAL6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA6",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ETIQUETA6 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA6",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ETIQUETA7 ::= LIST_VAL7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA7",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ETIQUETA7 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA7",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ETIQUETA8 ::= LIST_VAL8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA8",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ETIQUETA8 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA8",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ETIQUETA9 ::= LIST_VAL9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA9",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ETIQUETA9 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA9",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LIST_VAL1 ::= VALOR_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LIST_VAL1 ::= LIST_VAL1 VALOR_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LIST_VAL2 ::= VALOR_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LIST_VAL2 ::= LIST_VAL2 VALOR_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LIST_VAL3 ::= VALOR_3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL3",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LIST_VAL3 ::= LIST_VAL3 VALOR_3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL3",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LIST_VAL4 ::= VALOR_4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL4",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LIST_VAL4 ::= LIST_VAL4 VALOR_4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL4",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LIST_VAL5 ::= VALOR_5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL5",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LIST_VAL5 ::= LIST_VAL5 VALOR_5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL5",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LIST_VAL6 ::= VALOR_6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL6",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LIST_VAL6 ::= LIST_VAL6 VALOR_6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL6",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LIST_VAL7 ::= VALOR_7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL7",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LIST_VAL7 ::= LIST_VAL7 VALOR_7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL7",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LIST_VAL8 ::= VALOR_8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL8",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LIST_VAL8 ::= LIST_VAL8 VALOR_8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL8",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LIST_VAL9 ::= VALOR_9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL9",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LIST_VAL9 ::= LIST_VAL9 VALOR_9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL9",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VALOR_N ::= CORCHEA FONTSI IGUAL COMID size COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VALOR_N ::= CORCHEA FONTFA IGUAL COMID family COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VALOR_N ::= CORCHEA TEXTALI IGUAL COMID aling COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALOR_N ::= CORCHEA ID IGUAL COMID IDENTIFICADOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALOR_1 ::= CORCHEA ID IGUAL COMID IDENTIFICADOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALOR_1 ::= CORCHEA NAME IGUAL COMID VALOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALOR_2 ::= CORCHEA HREF IGUAL COMID enlace COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_2",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALOR_3 ::= CORCHEA BACKG IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_3",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALOR_4 ::= CORCHEA COLOR IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_4",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALOR_4 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_4",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALOR_5 ::= CORCHEA TYPE IGUAL COMID tipos COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_5",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALOR_5 ::= CORCHEA COLOR IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_5",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALOR_5 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_5",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALOR_6 ::= CORCHEA COLS IGUAL COMID ENTERO COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_6",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALOR_6 ::= CORCHEA ROWS IGUAL COMID ENTERO COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_6",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VALOR_6 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_6",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VALOR_7 ::= CORCHEA COLOR IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VALOR_7 ::= CORCHEA BACKG IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALOR_7 ::= CORCHEA CLASS IGUAL COMID clase COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VALOR_7 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VALOR_8 ::= CORCHEA ID IGUAL COMID IDENTIFICADOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VALOR_8 ::= CORCHEA SRC IGUAL COMID enlace COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VALOR_8 ::= CORCHEA WIDTH IGUAL COMID th COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VALOR_8 ::= CORCHEA HEIGHT IGUAL COMID th COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VALOR_8 ::= CORCHEA ALT IGUAL COMID VALOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VALOR_9 ::= CORCHEA COLOR IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VALOR_9 ::= CORCHEA BACKG IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VALOR_9 ::= CORCHEA ONCLICK IGUAL COMID VALOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // VALOR_9 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // INSTRUCCION ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // INSTRUCCION ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // INSTRUCCION ::= BLOINST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // INSTRUCCION ::= SIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // INSTRUCCION ::= SELSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // INSTRUCCION ::= SELIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // IMPRESION ::= FUNCSP PAR1 EXPRESION PAR2 FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // FUNCSP ::= ASC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // FUNCSP ::= DESC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // FUNCSP ::= LETPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // FUNCSP ::= LETIMPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CSP ::= CARALE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CSP",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CSP ::= NUMALE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CSP",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CSP ::= ALEINF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CSP",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CSP ::= EXIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CSP",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CSP ::= REDIRECT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CSP",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ASIGNACION ::= IDENTIFICADOR IGUAL EXPRESION FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DECLARACION ::= TIPOS IDENTIFICADOR FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DECLARACION ::= TIPOS GLOBAL IDENTIFICADOR FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // TIPOS ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // TIPOS ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // TIPOS ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // TIPOS ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // TIPOS ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CADENA ::= COMID IDENTIFICADOR COMID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // GET ::= ELEMENT PAR1 IDENTIFICADOR PAR2 FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EXPRESION ::= MENOS EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // EXPRESION ::= DIFER EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXPRESION ::= EXPRESION POR EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // EXPRESION ::= EXPRESION IGUAL IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // EXPRESION ::= EXPRESION DIFER IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXPRESION ::= EXPRESION MENOR IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EXPRESION ::= EXPRESION MAYOR IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EXPRESION ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EXPRESION ::= GET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXPRESION ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EXPRESION ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXPRESION ::= DECI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXPRESION ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EXPRESION ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // OPCIONES ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // OPCIONES ::= CSP FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // BLOINST ::= INIT LLAVEA DOSPTS OPCIONES DOSPTS LLAVEC END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOINST",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SIF ::= IF PAR1 EXPRESION PAR2 THEN BLOINST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // SELSE ::= IF PAR1 EXPRESION PAR2 THEN BLOINST ELSE BLOINST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELSE",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SELIF ::= IF PAR1 EXPRESION PAR2 THEN BLOINST LISTELIF ELSE BLOINST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIF",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // LISTELIF ::= ELIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTELIF",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // LISTELIF ::= LISTELIF ELIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTELIF",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ELIF ::= ELSE IF BLOINST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
