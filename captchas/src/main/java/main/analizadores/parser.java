
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main.analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import main.excepciones.Errores;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\004\007\000\002\005\003\000\002\005\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\003\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\004\000\002\007\006" +
    "\000\002\010\006\000\002\011\005\000\002\012\006\000" +
    "\002\013\006\000\002\014\006\000\002\015\005\000\002" +
    "\016\006\000\002\017\006\000\002\020\006\000\002\021" +
    "\006\000\002\022\006\000\002\023\006\000\002\024\006" +
    "\000\002\025\006\000\002\026\006\000\002\027\006\000" +
    "\002\030\006\000\002\031\005\000\002\032\006\000\002" +
    "\033\006\000\002\034\006\000\002\035\006\000\002\036" +
    "\006\000\002\037\005\000\002\040\006\000\002\041\006" +
    "\000\002\042\006\000\002\043\006\000\002\044\006\000" +
    "\002\045\006\000\002\046\005\000\002\047\006\000\002" +
    "\050\003\000\002\050\002\000\002\051\003\000\002\051" +
    "\002\000\002\052\003\000\002\052\002\000\002\053\003" +
    "\000\002\053\002\000\002\054\003\000\002\054\002\000" +
    "\002\055\003\000\002\055\002\000\002\056\003\000\002" +
    "\056\002\000\002\057\003\000\002\057\002\000\002\060" +
    "\003\000\002\060\002\000\002\061\003\000\002\061\004" +
    "\000\002\062\003\000\002\062\004\000\002\063\003\000" +
    "\002\063\004\000\002\064\003\000\002\064\004\000\002" +
    "\065\003\000\002\065\004\000\002\066\003\000\002\066" +
    "\004\000\002\067\003\000\002\067\004\000\002\070\003" +
    "\000\002\070\004\000\002\071\003\000\002\071\004\000" +
    "\002\103\011\000\002\103\011\000\002\103\011\000\002" +
    "\103\011\000\002\072\011\000\002\072\011\000\002\073" +
    "\011\000\002\074\011\000\002\075\011\000\002\075\003" +
    "\000\002\076\011\000\002\076\011\000\002\076\003\000" +
    "\002\077\011\000\002\077\011\000\002\077\003\000\002" +
    "\100\011\000\002\100\011\000\002\100\011\000\002\100" +
    "\003\000\002\101\011\000\002\101\011\000\002\101\011" +
    "\000\002\101\011\000\002\101\011\000\002\102\011\000" +
    "\002\102\011\000\002\102\011\000\002\102\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015a\000\004\011\005\001\002\000\004\002\000\001" +
    "\002\000\004\027\u014a\001\002\000\004\011\012\001\002" +
    "\000\004\002\010\001\002\000\004\002\001\001\002\000" +
    "\004\011\017\001\002\000\004\030\013\001\002\000\004" +
    "\012\014\001\002\000\004\011\uffed\001\002\000\004\011" +
    "\u013c\001\002\000\004\011\035\001\002\000\004\032\020" +
    "\001\002\000\006\012\uffcb\023\024\001\002\000\006\012" +
    "\uffba\023\uffba\001\002\000\006\012\uffcc\023\024\001\002" +
    "\000\004\012\033\001\002\000\004\050\025\001\002\000" +
    "\004\010\026\001\002\000\004\026\027\001\002\000\004" +
    "\124\030\001\002\000\004\026\031\001\002\000\004\024" +
    "\032\001\002\000\006\012\uffa4\023\uffa4\001\002\000\004" +
    "\011\uffe7\001\002\000\006\012\uffb9\023\uffb9\001\002\000" +
    "\004\014\u0138\001\002\000\004\011\040\001\002\000\004" +
    "\011\060\001\002\000\004\033\041\001\002\000\006\012" +
    "\uffc9\023\044\001\002\000\006\012\uffca\023\044\001\002" +
    "\000\004\012\054\001\002\000\004\051\046\001\002\000" +
    "\006\012\uffb8\023\uffb8\001\002\000\004\010\047\001\002" +
    "\000\004\026\050\001\002\000\004\125\051\001\002\000" +
    "\004\026\052\001\002\000\004\024\053\001\002\000\006" +
    "\012\uffa3\023\uffa3\001\002\000\004\011\uffeb\001\002\000" +
    "\006\012\uffb7\023\uffb7\001\002\000\004\011\u0133\001\002" +
    "\000\004\137\u012d\001\002\000\032\034\176\035\171\036" +
    "\177\037\175\040\167\041\173\042\200\043\170\044\165" +
    "\045\166\046\172\047\174\001\002\000\004\011\154\001" +
    "\002\000\004\011\150\001\002\000\004\011\142\001\002" +
    "\000\004\011\ufffd\001\002\000\004\011\ufff4\001\002\000" +
    "\004\011\136\001\002\000\004\011\131\001\002\000\004" +
    "\137\122\001\002\000\004\011\115\001\002\000\004\011" +
    "\111\001\002\000\004\011\103\001\002\000\004\137\075" +
    "\001\002\000\004\011\076\001\002\000\004\014\100\001" +
    "\002\000\004\011\ufff3\001\002\000\004\044\101\001\002" +
    "\000\004\012\102\001\002\000\004\011\uffd5\001\002\000" +
    "\004\014\105\001\002\000\004\011\ufff5\001\002\000\004" +
    "\042\106\001\002\000\004\012\107\001\002\000\004\011" +
    "\uffd8\001\002\000\004\011\ufff9\001\002\000\004\014\112" +
    "\001\002\000\004\036\113\001\002\000\004\012\114\001" +
    "\002\000\004\011\uffe0\001\002\000\004\014\117\001\002" +
    "\000\004\011\ufff6\001\002\000\004\041\120\001\002\000" +
    "\004\012\121\001\002\000\004\011\uffda\001\002\000\004" +
    "\011\124\001\002\000\004\011\ufff1\001\002\000\004\014" +
    "\125\001\002\000\004\046\126\001\002\000\004\012\127" +
    "\001\002\000\004\011\uffd1\001\002\000\004\011\ufff8\001" +
    "\002\000\004\014\132\001\002\000\004\037\133\001\002" +
    "\000\004\012\134\001\002\000\004\011\uffde\001\002\000" +
    "\004\011\ufff0\001\002\000\004\014\137\001\002\000\004" +
    "\047\140\001\002\000\004\012\141\001\002\000\004\011" +
    "\uffcf\001\002\000\004\014\144\001\002\000\004\011\ufffa" +
    "\001\002\000\004\035\145\001\002\000\004\012\146\001" +
    "\002\000\004\011\uffe2\001\002\000\004\011\ufff7\001\002" +
    "\000\004\014\151\001\002\000\004\040\152\001\002\000" +
    "\004\012\153\001\002\000\004\011\uffdc\001\002\000\034" +
    "\014\164\034\176\035\171\036\177\037\175\040\167\041" +
    "\173\042\200\043\170\044\165\045\166\046\172\047\174" +
    "\001\002\000\004\011\160\001\002\000\004\011\ufffc\001" +
    "\002\000\004\002\uffff\001\002\000\004\014\161\001\002" +
    "\000\004\027\162\001\002\000\004\012\163\001\002\000" +
    "\004\002\uffee\001\002\000\004\033\u012b\001\002\000\006" +
    "\012\uffbd\023\u0116\001\002\000\006\012\uffc7\023\324\001" +
    "\002\000\004\012\u010f\001\002\000\004\012\u010e\001\002" +
    "\000\006\012\uffc5\023\377\001\002\000\006\012\uffc7\023" +
    "\324\001\002\000\006\012\uffc1\023\344\001\002\000\004" +
    "\012\337\001\002\000\006\012\uffc7\023\324\001\002\000" +
    "\006\012\uffc7\023\324\001\002\000\006\012\uffc3\023\251" +
    "\001\002\000\006\012\uffbf\023\204\001\002\000\004\012" +
    "\244\001\002\000\006\012\uffae\023\uffae\001\002\000\006" +
    "\012\uffc0\023\204\001\002\000\014\057\205\064\210\065" +
    "\207\066\211\067\206\001\002\000\004\010\236\001\002" +
    "\000\004\010\231\001\002\000\004\010\224\001\002\000" +
    "\004\010\217\001\002\000\004\010\212\001\002\000\004" +
    "\026\213\001\002\000\004\133\214\001\002\000\004\026" +
    "\215\001\002\000\004\024\216\001\002\000\006\012\uff93" +
    "\023\uff93\001\002\000\004\026\220\001\002\000\004\124" +
    "\221\001\002\000\004\026\222\001\002\000\004\024\223" +
    "\001\002\000\006\012\uff95\023\uff95\001\002\000\004\026" +
    "\225\001\002\000\004\133\226\001\002\000\004\026\227" +
    "\001\002\000\004\024\230\001\002\000\006\012\uff94\023" +
    "\uff94\001\002\000\004\026\232\001\002\000\004\137\233" +
    "\001\002\000\004\026\234\001\002\000\004\024\235\001" +
    "\002\000\006\012\uff92\023\uff92\001\002\000\004\026\237" +
    "\001\002\000\004\136\240\001\002\000\004\026\241\001" +
    "\002\000\004\024\242\001\002\000\006\012\uff96\023\uff96" +
    "\001\002\000\006\012\uffad\023\uffad\001\002\000\004\011" +
    "\uffd9\001\002\000\006\012\uffc4\023\251\001\002\000\004" +
    "\012\316\001\002\000\006\012\uff9b\023\uff9b\001\002\000" +
    "\006\012\uffb2\023\uffb2\001\002\000\016\053\256\054\255" +
    "\055\257\057\252\061\254\062\253\001\002\000\004\010" +
    "\311\001\002\000\004\010\304\001\002\000\004\010\277" +
    "\001\002\000\004\010\272\001\002\000\004\010\265\001" +
    "\002\000\004\010\260\001\002\000\004\026\261\001\002" +
    "\000\004\130\262\001\002\000\004\026\263\001\002\000" +
    "\004\024\264\001\002\000\006\012\uffa8\023\uffa8\001\002" +
    "\000\004\026\266\001\002\000\004\127\267\001\002\000" +
    "\004\026\270\001\002\000\004\024\271\001\002\000\006" +
    "\012\uffa9\023\uffa9\001\002\000\004\026\273\001\002\000" +
    "\004\126\274\001\002\000\004\026\275\001\002\000\004" +
    "\024\276\001\002\000\006\012\uffaa\023\uffaa\001\002\000" +
    "\004\026\300\001\002\000\004\134\301\001\002\000\004" +
    "\026\302\001\002\000\004\024\303\001\002\000\006\012" +
    "\uff9d\023\uff9d\001\002\000\004\026\305\001\002\000\004" +
    "\134\306\001\002\000\004\026\307\001\002\000\004\024" +
    "\310\001\002\000\006\012\uff9c\023\uff9c\001\002\000\004" +
    "\026\312\001\002\000\004\136\313\001\002\000\004\026" +
    "\314\001\002\000\004\024\315\001\002\000\006\012\uffa7" +
    "\023\uffa7\001\002\000\004\011\uffe1\001\002\000\006\012" +
    "\uffb1\023\uffb1\001\002\000\006\012\uffc8\023\324\001\002" +
    "\000\004\012\333\001\002\000\006\012\uffa1\023\uffa1\001" +
    "\002\000\006\012\uffb6\023\uffb6\001\002\000\014\052\325" +
    "\053\256\054\255\055\257\057\252\001\002\000\004\010" +
    "\326\001\002\000\004\026\327\001\002\000\004\125\330" +
    "\001\002\000\004\026\331\001\002\000\004\024\332\001" +
    "\002\000\006\012\uffa2\023\uffa2\001\002\000\004\011\uffe5" +
    "\001\002\000\006\012\uffb5\023\uffb5\001\002\000\004\012" +
    "\336\001\002\000\004\011\uffdf\001\002\000\004\011\uffd0" +
    "\001\002\000\006\012\uffc2\023\344\001\002\000\004\012" +
    "\367\001\002\000\006\012\uff97\023\uff97\001\002\000\006" +
    "\012\uffb0\023\uffb0\001\002\000\020\051\345\052\346\053" +
    "\256\054\255\055\257\057\252\063\347\001\002\000\004" +
    "\010\362\001\002\000\004\010\355\001\002\000\004\010" +
    "\350\001\002\000\004\026\351\001\002\000\004\132\352" +
    "\001\002\000\004\026\353\001\002\000\004\024\354\001" +
    "\002\000\006\012\uff98\023\uff98\001\002\000\004\026\356" +
    "\001\002\000\004\125\357\001\002\000\004\026\360\001" +
    "\002\000\004\024\361\001\002\000\006\012\uff9a\023\uff9a" +
    "\001\002\000\004\026\363\001\002\000\004\125\364\001" +
    "\002\000\004\026\365\001\002\000\004\024\366\001\002" +
    "\000\006\012\uff99\023\uff99\001\002\000\004\011\uffdb\001" +
    "\002\000\006\012\uffaf\023\uffaf\001\002\000\004\012\372" +
    "\001\002\000\004\137\uffd2\001\002\000\006\012\uffc6\023" +
    "\377\001\002\000\004\012\u010c\001\002\000\006\012\uff9e" +
    "\023\uff9e\001\002\000\006\012\uffb4\023\uffb4\001\002\000" +
    "\016\052\u0100\053\256\054\255\055\257\056\u0101\057\252" +
    "\001\002\000\004\010\u0107\001\002\000\004\010\u0102\001" +
    "\002\000\004\026\u0103\001\002\000\004\131\u0104\001\002" +
    "\000\004\026\u0105\001\002\000\004\024\u0106\001\002\000" +
    "\006\012\uffa0\023\uffa0\001\002\000\004\026\u0108\001\002" +
    "\000\004\125\u0109\001\002\000\004\026\u010a\001\002\000" +
    "\004\024\u010b\001\002\000\006\012\uff9f\023\uff9f\001\002" +
    "\000\004\011\uffe3\001\002\000\006\012\uffb3\023\uffb3\001" +
    "\002\000\004\011\uffd7\001\002\000\004\011\uffdd\001\002" +
    "\000\004\012\u0111\001\002\000\004\137\uffd4\001\002\000" +
    "\006\012\uffac\023\uffac\001\002\000\006\012\uff8e\023\uff8e" +
    "\001\002\000\006\012\uffbe\023\u0116\001\002\000\004\012" +
    "\u0129\001\002\000\020\051\u0117\052\u0118\053\256\054\255" +
    "\055\257\057\252\070\u0119\001\002\000\004\010\u0124\001" +
    "\002\000\004\010\u011f\001\002\000\004\010\u011a\001\002" +
    "\000\004\026\u011b\001\002\000\004\137\u011c\001\002\000" +
    "\004\026\u011d\001\002\000\004\024\u011e\001\002\000\006" +
    "\012\uff8f\023\uff8f\001\002\000\004\026\u0120\001\002\000" +
    "\004\125\u0121\001\002\000\004\026\u0122\001\002\000\004" +
    "\024\u0123\001\002\000\006\012\uff91\023\uff91\001\002\000" +
    "\004\026\u0125\001\002\000\004\125\u0126\001\002\000\004" +
    "\026\u0127\001\002\000\004\024\u0128\001\002\000\006\012" +
    "\uff90\023\uff90\001\002\000\004\137\uffd6\001\002\000\006" +
    "\012\uffab\023\uffab\001\002\000\004\012\u012c\001\002\000" +
    "\004\011\uffea\001\002\000\004\011\u012f\001\002\000\004" +
    "\011\ufff2\001\002\000\004\014\u0130\001\002\000\004\045" +
    "\u0131\001\002\000\004\012\u0132\001\002\000\004\011\uffd3" +
    "\001\002\000\004\014\u0135\001\002\000\004\011\ufffb\001" +
    "\002\000\004\034\u0136\001\002\000\004\012\u0137\001\002" +
    "\000\004\011\uffe4\001\002\000\004\030\u0139\001\002\000" +
    "\004\012\u013a\001\002\000\004\011\uffec\001\002\000\004" +
    "\011\u0141\001\002\000\004\014\u013d\001\002\000\004\032" +
    "\u013e\001\002\000\004\012\u013f\001\002\000\004\011\uffe6" +
    "\001\002\000\004\137\u0144\001\002\000\004\031\u0142\001" +
    "\002\000\004\012\u0143\001\002\000\004\137\uffe9\001\002" +
    "\000\004\011\u0146\001\002\000\004\011\ufffe\001\002\000" +
    "\004\014\u0147\001\002\000\004\031\u0148\001\002\000\004" +
    "\012\u0149\001\002\000\004\011\uffe8\001\002\000\006\012" +
    "\uffcd\023\u014e\001\002\000\006\012\uffbc\023\uffbc\001\002" +
    "\000\006\012\uffce\023\u014e\001\002\000\004\012\u015b\001" +
    "\002\000\006\057\u014f\060\u0150\001\002\000\004\010\u0156" +
    "\001\002\000\004\010\u0151\001\002\000\004\026\u0152\001" +
    "\002\000\004\137\u0153\001\002\000\004\026\u0154\001\002" +
    "\000\004\024\u0155\001\002\000\006\012\uffa5\023\uffa5\001" +
    "\002\000\004\026\u0157\001\002\000\004\136\u0158\001\002" +
    "\000\004\026\u0159\001\002\000\004\024\u015a\001\002\000" +
    "\006\012\uffa6\023\uffa6\001\002\000\004\011\uffef\001\002" +
    "\000\006\012\uffbb\023\uffbb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015a\000\010\002\006\003\003\007\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\015\017" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u013a\001\001\000\004\012\035\001" +
    "\001\000\002\001\001\000\010\051\022\062\021\073\020" +
    "\001\001\000\002\001\001\000\004\073\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\036\001\001\000\036\005" +
    "\060\006\063\021\055\023\062\025\071\027\066\031\061" +
    "\033\070\035\072\037\064\040\073\042\056\044\067\046" +
    "\065\001\001\000\002\001\001\000\010\052\042\063\041" +
    "\074\044\001\001\000\004\074\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\u0133\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\006\155\014\154\021\055\023\062" +
    "\025\071\027\066\031\061\033\070\035\072\037\064\040" +
    "\073\042\056\044\067\046\065\001\001\000\004\032\146" +
    "\001\001\000\004\024\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\134\001\001\000\004\030\127" +
    "\001\001\000\002\001\001\000\004\034\115\001\001\000" +
    "\004\026\107\001\001\000\004\036\103\001\001\000\002" +
    "\001\001\000\004\041\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\060\u0114\071\u0113\102\u0111\103\u0112\001\001\000\012\053" +
    "\u010f\064\317\075\322\103\321\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\054\373\065\372\076\375\103" +
    "\374\001\001\000\012\053\370\064\317\075\322\103\321" +
    "\001\001\000\012\056\340\067\337\100\342\103\341\001" +
    "\001\000\002\001\001\000\012\053\334\064\317\075\322" +
    "\103\321\001\001\000\012\053\320\064\317\075\322\103" +
    "\321\001\001\000\012\055\245\066\244\077\247\103\246" +
    "\001\001\000\010\057\200\070\202\101\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\101\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\077\316\103\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\075\333" +
    "\103\321\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\100\367\103\341\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\076\u010c\103\374" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\102\u0129\103\u0112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\u012d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u013f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\u0144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\050\u014c\061\u014b\072\u014a\001\001\000\002\001\001" +
    "\000\004\072\u015b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();

     public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right,
                        "Verifica la Sintaxis"));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right,
                        "Ninguna"));
    }

    public LinkedList<Errores> getErrores(){
        return listaErrores;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= BASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BASE ::= INICIO CABEZA_I INTRODUCCION CABEZA_F CUERPO_I CONTENIDOS CUERPO_F FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BASE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INTRODUCCION ::= DIREC_I DIREC_F TITU_I VALOR TITU_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRODUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONTENIDOS ::= CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONTENIDOS ::= CONTENIDOS CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTENIDO ::= BAN_I BAN_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDO ::= INT_I INT_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDO ::= CUAD_I CUAD_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDO ::= SELE_I SELE_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTENIDO ::= OPT_I OPT_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTENIDO ::= DIV_I DIV_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDO ::= IMG_I IMG_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO ::= BR_I 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDO ::= BOTON_I VALOR BOTON_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO ::= TIH_I VALOR TIH_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO ::= PARA_I VALOR PARA_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTENIDO ::= SCRIPT_I SCRIPT_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INICIO ::= MENOR CC ETIQUETA1 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FIN ::= MENOR DIVI CC MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIN",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CABEZA_I ::= MENOR HEAD MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABEZA_I",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CABEZA_F ::= MENOR DIVI HEAD MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABEZA_F",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO_I ::= MENOR BODY ETIQUETA3 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_I",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_F ::= MENOR DIVI BODY MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_F",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TITU_I ::= MENOR TITLE MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITU_I",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TITU_F ::= MENOR DIVI TITLE MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITU_F",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DIREC_I ::= MENOR LINK ETIQUETA2 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIREC_I",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DIREC_F ::= MENOR DIVI LINK MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIREC_F",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BAN_I ::= MENOR SPAM ETIQUETA4 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAN_I",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BAN_F ::= MENOR DIVI SPAM MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAN_F",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INT_I ::= MENOR INPUT ETIQUETA5 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INT_I",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INT_F ::= MENOR DIVI INPUT MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INT_F",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUAD_I ::= MENOR TEXTAREA ETIQUETA6 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUAD_I",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUAD_F ::= MENOR DIVI TEXTAREA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUAD_F",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SELE_I ::= MENOR SELECT ETIQUETA4 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELE_I",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SELE_F ::= MENOR DIVI SELECT MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELE_F",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPT_I ::= MENOR OPTION MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPT_I",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPT_F ::= MENOR DIVI OPTION MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPT_F",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DIV_I ::= MENOR DIV ETIQUETA7 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIV_I",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DIV_F ::= MENOR DIVI DIV MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIV_F",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IMG_I ::= MENOR IMG ETIQUETA8 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMG_I",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IMG_F ::= MENOR DIVI IMG MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMG_F",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BR_I ::= MENOR BR MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BR_I",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BOTON_I ::= MENOR BUTTON ETIQUETA9 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON_I",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BOTON_F ::= MENOR DIVI BUTTON MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON_F",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIH_I ::= MENOR TITUH ETIQUETA4 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIH_I",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIH_F ::= MENOR DIVI TITUH MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIH_F",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARA_I ::= MENOR PARRA ETIQUETA4 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA_I",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PARA_F ::= MENOR DIVI PARRA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA_F",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SCRIPT_I ::= MENOR SCRIPT MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_I",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SCRIPT_F ::= MENOR DIVI SCRIPT MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_F",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ETIQUETA1 ::= LIST_VAL1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ETIQUETA1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ETIQUETA2 ::= LIST_VAL2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ETIQUETA2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ETIQUETA3 ::= LIST_VAL3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ETIQUETA3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ETIQUETA4 ::= LIST_VAL4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA4",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ETIQUETA4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA4",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ETIQUETA5 ::= LIST_VAL5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA5",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ETIQUETA5 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA5",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ETIQUETA6 ::= LIST_VAL6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA6",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ETIQUETA6 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA6",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ETIQUETA7 ::= LIST_VAL7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA7",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ETIQUETA7 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA7",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ETIQUETA8 ::= LIST_VAL8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA8",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ETIQUETA8 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA8",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ETIQUETA9 ::= LIST_VAL9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA9",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ETIQUETA9 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA9",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LIST_VAL1 ::= VALOR_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL1",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LIST_VAL1 ::= LIST_VAL1 VALOR_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL1",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LIST_VAL2 ::= VALOR_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL2",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LIST_VAL2 ::= LIST_VAL2 VALOR_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL2",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LIST_VAL3 ::= VALOR_3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL3",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LIST_VAL3 ::= LIST_VAL3 VALOR_3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL3",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LIST_VAL4 ::= VALOR_4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL4",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LIST_VAL4 ::= LIST_VAL4 VALOR_4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL4",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LIST_VAL5 ::= VALOR_5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL5",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LIST_VAL5 ::= LIST_VAL5 VALOR_5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL5",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LIST_VAL6 ::= VALOR_6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL6",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LIST_VAL6 ::= LIST_VAL6 VALOR_6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL6",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LIST_VAL7 ::= VALOR_7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL7",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LIST_VAL7 ::= LIST_VAL7 VALOR_7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL7",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LIST_VAL8 ::= VALOR_8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL8",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LIST_VAL8 ::= LIST_VAL8 VALOR_8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL8",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LIST_VAL9 ::= VALOR_9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL9",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LIST_VAL9 ::= LIST_VAL9 VALOR_9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL9",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VALOR_N ::= CORCHEA FONTSI IGUAL COMID size COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VALOR_N ::= CORCHEA FONTFA IGUAL COMID family COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VALOR_N ::= CORCHEA TEXTALI IGUAL COMID aling COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VALOR_N ::= CORCHEA ID IGUAL COMID IDENTIFICADOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VALOR_1 ::= CORCHEA ID IGUAL COMID IDENTIFICADOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_1",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VALOR_1 ::= CORCHEA NAME IGUAL COMID VALOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_1",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VALOR_2 ::= CORCHEA HREF IGUAL COMID enlace COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_2",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VALOR_3 ::= CORCHEA BACKG IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_3",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALOR_4 ::= CORCHEA COLOR IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_4",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALOR_4 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_4",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALOR_5 ::= CORCHEA TYPE IGUAL COMID tipos COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_5",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALOR_5 ::= CORCHEA COLOR IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_5",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALOR_5 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_5",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALOR_6 ::= CORCHEA COLS IGUAL COMID ENTERO COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_6",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALOR_6 ::= CORCHEA ROWS IGUAL COMID ENTERO COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_6",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALOR_6 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_6",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALOR_7 ::= CORCHEA COLOR IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALOR_7 ::= CORCHEA BACKG IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALOR_7 ::= CORCHEA CLASS IGUAL COMID clase COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALOR_7 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VALOR_8 ::= CORCHEA ID IGUAL COMID IDENTIFICADOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VALOR_8 ::= CORCHEA SRC IGUAL COMID enlace COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VALOR_8 ::= CORCHEA WIDTH IGUAL COMID th COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALOR_8 ::= CORCHEA HEIGHT IGUAL COMID th COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VALOR_8 ::= CORCHEA ALT IGUAL COMID VALOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VALOR_9 ::= CORCHEA COLOR IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VALOR_9 ::= CORCHEA BACKG IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VALOR_9 ::= CORCHEA ONCLICK IGUAL COMID VALOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VALOR_9 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
