
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main.analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import main.excepciones.Errores;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\004\007\000\002\005\003\000\002\005\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\003\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\004\000\002\007\006" +
    "\000\002\010\006\000\002\011\006\000\002\012\006\000" +
    "\002\013\006\000\002\014\006\000\002\015\006\000\002" +
    "\016\006\000\002\017\006\000\002\020\006\000\002\021" +
    "\006\000\002\022\006\000\002\023\006\000\002\024\006" +
    "\000\002\025\006\000\002\026\006\000\002\027\006\000" +
    "\002\030\006\000\002\031\006\000\002\032\006\000\002" +
    "\033\006\000\002\034\006\000\002\035\006\000\002\036" +
    "\006\000\002\037\006\000\002\040\006\000\002\041\006" +
    "\000\002\042\006\000\002\043\006\000\002\044\006\000" +
    "\002\045\006\000\002\046\006\000\002\047\006\000\002" +
    "\050\002\000\002\050\004\000\002\051\005\000\002\052" +
    "\007\000\002\052\007\000\002\052\007\000\002\052\007" +
    "\000\002\052\007\000\002\052\007\000\002\052\007\000" +
    "\002\052\007\000\002\052\007\000\002\052\007\000\002" +
    "\052\007\000\002\052\007\000\002\052\007\000\002\052" +
    "\007\000\002\052\007\000\002\052\007\000\002\052\007" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\004\011\005\001\002\000\004\002\000\001" +
    "\002\000\004\027\377\001\002\000\004\011\012\001\002" +
    "\000\004\002\010\001\002\000\004\002\001\001\002\000" +
    "\004\011\151\001\002\000\004\030\013\001\002\000\006" +
    "\012\uffce\023\uffce\001\002\000\006\012\016\023\017\001" +
    "\002\000\006\012\uffcd\023\uffcd\001\002\000\004\011\uffed" +
    "\001\002\000\044\050\021\051\033\052\025\053\023\054" +
    "\032\055\041\056\034\057\027\060\026\061\040\062\037" +
    "\063\022\064\030\065\024\066\036\067\020\070\035\001" +
    "\002\000\004\010\143\001\002\000\004\010\137\001\002" +
    "\000\004\010\133\001\002\000\004\010\127\001\002\000" +
    "\004\010\123\001\002\000\004\010\117\001\002\000\004" +
    "\010\113\001\002\000\004\010\107\001\002\000\004\010" +
    "\103\001\002\000\004\024\102\001\002\000\004\010\076" +
    "\001\002\000\004\010\072\001\002\000\004\010\066\001" +
    "\002\000\004\010\062\001\002\000\004\010\056\001\002" +
    "\000\004\010\052\001\002\000\004\010\046\001\002\000" +
    "\004\010\042\001\002\000\004\026\043\001\002\000\004" +
    "\127\044\001\002\000\004\026\045\001\002\000\004\024" +
    "\uffc6\001\002\000\004\026\047\001\002\000\004\124\050" +
    "\001\002\000\004\026\051\001\002\000\004\024\uffc2\001" +
    "\002\000\004\026\053\001\002\000\004\124\054\001\002" +
    "\000\004\026\055\001\002\000\004\024\uffc1\001\002\000" +
    "\004\026\057\001\002\000\004\124\060\001\002\000\004" +
    "\026\061\001\002\000\004\024\uffbd\001\002\000\004\026" +
    "\063\001\002\000\004\127\064\001\002\000\004\026\065" +
    "\001\002\000\004\024\uffbb\001\002\000\004\026\067\001" +
    "\002\000\004\127\070\001\002\000\004\026\071\001\002" +
    "\000\004\024\uffc5\001\002\000\004\026\073\001\002\000" +
    "\004\127\074\001\002\000\004\026\075\001\002\000\004" +
    "\024\uffca\001\002\000\004\026\077\001\002\000\004\127" +
    "\100\001\002\000\004\026\101\001\002\000\004\024\uffc8" +
    "\001\002\000\006\012\uffcc\023\uffcc\001\002\000\004\026" +
    "\104\001\002\000\004\127\105\001\002\000\004\026\106" +
    "\001\002\000\004\024\uffbf\001\002\000\004\026\110\001" +
    "\002\000\004\127\111\001\002\000\004\026\112\001\002" +
    "\000\004\024\uffc4\001\002\000\004\026\114\001\002\000" +
    "\004\127\115\001\002\000\004\026\116\001\002\000\004" +
    "\024\uffc3\001\002\000\004\026\120\001\002\000\004\127" +
    "\121\001\002\000\004\026\122\001\002\000\004\024\uffc9" +
    "\001\002\000\004\026\124\001\002\000\004\124\125\001" +
    "\002\000\004\026\126\001\002\000\004\024\uffbe\001\002" +
    "\000\004\026\130\001\002\000\004\127\131\001\002\000" +
    "\004\026\132\001\002\000\004\024\uffc7\001\002\000\004" +
    "\026\134\001\002\000\004\127\135\001\002\000\004\026" +
    "\136\001\002\000\004\024\uffc0\001\002\000\004\026\140" +
    "\001\002\000\004\127\141\001\002\000\004\026\142\001" +
    "\002\000\004\024\uffcb\001\002\000\004\026\144\001\002" +
    "\000\004\127\145\001\002\000\004\026\146\001\002\000" +
    "\004\024\uffbc\001\002\000\004\011\360\001\002\000\004" +
    "\011\155\001\002\000\004\032\152\001\002\000\006\012" +
    "\uffce\023\uffce\001\002\000\006\012\154\023\017\001\002" +
    "\000\004\011\uffe7\001\002\000\004\014\354\001\002\000" +
    "\004\011\160\001\002\000\004\011\166\001\002\000\004" +
    "\033\161\001\002\000\006\012\uffce\023\uffce\001\002\000" +
    "\006\012\163\023\017\001\002\000\004\011\uffeb\001\002" +
    "\000\004\011\347\001\002\000\004\127\341\001\002\000" +
    "\032\034\304\035\277\036\305\037\303\040\275\041\301" +
    "\042\306\043\276\044\273\045\274\046\300\047\302\001" +
    "\002\000\004\011\262\001\002\000\004\011\256\001\002" +
    "\000\004\011\250\001\002\000\004\011\ufffd\001\002\000" +
    "\004\011\ufff4\001\002\000\004\011\244\001\002\000\004" +
    "\011\237\001\002\000\004\127\230\001\002\000\004\011" +
    "\223\001\002\000\004\011\217\001\002\000\004\011\211" +
    "\001\002\000\004\127\203\001\002\000\004\011\204\001" +
    "\002\000\004\014\206\001\002\000\004\011\ufff3\001\002" +
    "\000\004\044\207\001\002\000\004\012\210\001\002\000" +
    "\004\011\uffd5\001\002\000\004\014\213\001\002\000\004" +
    "\011\ufff5\001\002\000\004\042\214\001\002\000\004\012" +
    "\215\001\002\000\004\011\uffd8\001\002\000\004\011\ufff9" +
    "\001\002\000\004\014\220\001\002\000\004\036\221\001" +
    "\002\000\004\012\222\001\002\000\004\011\uffe0\001\002" +
    "\000\004\014\225\001\002\000\004\011\ufff6\001\002\000" +
    "\004\041\226\001\002\000\004\012\227\001\002\000\004" +
    "\011\uffda\001\002\000\004\011\232\001\002\000\004\011" +
    "\ufff1\001\002\000\004\014\233\001\002\000\004\046\234" +
    "\001\002\000\004\012\235\001\002\000\004\011\uffd1\001" +
    "\002\000\004\011\ufff8\001\002\000\004\014\240\001\002" +
    "\000\004\037\241\001\002\000\004\012\242\001\002\000" +
    "\004\011\uffde\001\002\000\004\011\ufff0\001\002\000\004" +
    "\014\245\001\002\000\004\047\246\001\002\000\004\012" +
    "\247\001\002\000\004\011\uffcf\001\002\000\004\014\252" +
    "\001\002\000\004\011\ufffa\001\002\000\004\035\253\001" +
    "\002\000\004\012\254\001\002\000\004\011\uffe2\001\002" +
    "\000\004\011\ufff7\001\002\000\004\014\257\001\002\000" +
    "\004\040\260\001\002\000\004\012\261\001\002\000\004" +
    "\011\uffdc\001\002\000\034\014\272\034\304\035\277\036" +
    "\305\037\303\040\275\041\301\042\306\043\276\044\273" +
    "\045\274\046\300\047\302\001\002\000\004\011\266\001" +
    "\002\000\004\011\ufffc\001\002\000\004\002\uffff\001\002" +
    "\000\004\014\267\001\002\000\004\027\270\001\002\000" +
    "\004\012\271\001\002\000\004\002\uffee\001\002\000\004" +
    "\033\337\001\002\000\006\012\uffce\023\uffce\001\002\000" +
    "\006\012\uffce\023\uffce\001\002\000\006\012\uffce\023\uffce" +
    "\001\002\000\006\012\uffce\023\uffce\001\002\000\006\012" +
    "\uffce\023\uffce\001\002\000\006\012\uffce\023\uffce\001\002" +
    "\000\006\012\uffce\023\uffce\001\002\000\006\012\uffce\023" +
    "\uffce\001\002\000\006\012\uffce\023\uffce\001\002\000\006" +
    "\012\uffce\023\uffce\001\002\000\006\012\uffce\023\uffce\001" +
    "\002\000\006\012\uffce\023\uffce\001\002\000\006\012\310" +
    "\023\017\001\002\000\004\011\uffd9\001\002\000\006\012" +
    "\312\023\017\001\002\000\004\011\uffe1\001\002\000\006" +
    "\012\314\023\017\001\002\000\004\011\uffe5\001\002\000" +
    "\006\012\316\023\017\001\002\000\004\011\uffdf\001\002" +
    "\000\006\012\320\023\017\001\002\000\004\011\uffd0\001" +
    "\002\000\006\012\322\023\017\001\002\000\004\011\uffdb" +
    "\001\002\000\006\012\324\023\017\001\002\000\004\127" +
    "\uffd2\001\002\000\006\012\326\023\017\001\002\000\004" +
    "\011\uffe3\001\002\000\006\012\330\023\017\001\002\000" +
    "\004\011\uffd7\001\002\000\006\012\332\023\017\001\002" +
    "\000\004\011\uffdd\001\002\000\006\012\334\023\017\001" +
    "\002\000\004\127\uffd4\001\002\000\006\012\336\023\017" +
    "\001\002\000\004\127\uffd6\001\002\000\004\012\340\001" +
    "\002\000\004\011\uffea\001\002\000\004\011\343\001\002" +
    "\000\004\011\ufff2\001\002\000\004\014\344\001\002\000" +
    "\004\045\345\001\002\000\004\012\346\001\002\000\004" +
    "\011\uffd3\001\002\000\004\014\351\001\002\000\004\011" +
    "\ufffb\001\002\000\004\034\352\001\002\000\004\012\353" +
    "\001\002\000\004\011\uffe4\001\002\000\004\030\355\001" +
    "\002\000\004\012\356\001\002\000\004\011\uffec\001\002" +
    "\000\004\011\365\001\002\000\004\014\361\001\002\000" +
    "\004\032\362\001\002\000\004\012\363\001\002\000\004" +
    "\011\uffe6\001\002\000\004\127\371\001\002\000\004\031" +
    "\366\001\002\000\006\012\uffce\023\uffce\001\002\000\006" +
    "\012\370\023\017\001\002\000\004\127\uffe9\001\002\000" +
    "\004\011\373\001\002\000\004\011\ufffe\001\002\000\004" +
    "\014\374\001\002\000\004\033\375\001\002\000\004\012" +
    "\376\001\002\000\004\011\uffe8\001\002\000\006\012\uffce" +
    "\023\uffce\001\002\000\006\012\u0101\023\017\001\002\000" +
    "\004\011\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\010\002\006\003\003\007\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\147\017" +
    "\146\001\001\000\002\001\001\000\004\050\013\001\001" +
    "\000\004\051\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\356\001\001\000\004\012" +
    "\155\001\001\000\002\001\001\000\004\050\152\001\001" +
    "\000\004\051\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\156\001\001\000\036\005\166\006\171" +
    "\021\163\023\170\025\177\027\174\031\167\033\176\035" +
    "\200\037\172\040\201\042\164\044\175\046\173\001\001" +
    "\000\002\001\001\000\004\050\161\001\001\000\004\051" +
    "\014\001\001\000\002\001\001\000\004\022\347\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\006\263\014" +
    "\262\021\163\023\170\025\177\027\174\031\167\033\176" +
    "\035\200\037\172\040\201\042\164\044\175\046\173\001" +
    "\001\000\004\032\254\001\001\000\004\024\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\242\001" +
    "\001\000\004\030\235\001\001\000\002\001\001\000\004" +
    "\034\223\001\001\000\004\026\215\001\001\000\004\036" +
    "\211\001\001\000\002\001\001\000\004\041\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\230\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\334\001\001\000\004\050\332" +
    "\001\001\000\004\050\330\001\001\000\004\050\326\001" +
    "\001\000\004\050\324\001\001\000\004\050\322\001\001" +
    "\000\004\050\320\001\001\000\004\050\316\001\001\000" +
    "\004\050\314\001\001\000\004\050\312\001\001\000\004" +
    "\050\310\001\001\000\004\050\306\001\001\000\004\051" +
    "\014\001\001\000\002\001\001\000\004\051\014\001\001" +
    "\000\002\001\001\000\004\051\014\001\001\000\002\001" +
    "\001\000\004\051\014\001\001\000\002\001\001\000\004" +
    "\051\014\001\001\000\002\001\001\000\004\051\014\001" +
    "\001\000\002\001\001\000\004\051\014\001\001\000\002" +
    "\001\001\000\004\051\014\001\001\000\002\001\001\000" +
    "\004\051\014\001\001\000\002\001\001\000\004\051\014" +
    "\001\001\000\002\001\001\000\004\051\014\001\001\000" +
    "\002\001\001\000\004\051\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\363\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\366\001\001\000\004" +
    "\051\014\001\001\000\002\001\001\000\004\016\371\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\377\001" +
    "\001\000\004\051\014\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();

     public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right,
                        "Verifica la Sintaxis"));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right,
                        "Ninguna"));
    }

    public LinkedList<Errores> getErrores(){
        return listaErrores;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= BASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BASE ::= INICIO CABEZA_I INTRODUCCION CABEZA_F CUERPO_I CONTENIDOS CUERPO_F FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BASE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INTRODUCCION ::= DIREC_I DIREC_F TITU_I VALOR TITU_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRODUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONTENIDOS ::= CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONTENIDOS ::= CONTENIDOS CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTENIDO ::= BAN_I BAN_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDO ::= INT_I INT_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDO ::= CUAD_I CUAD_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDO ::= SELE_I SELE_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTENIDO ::= OPT_I OPT_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTENIDO ::= DIV_I DIV_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDO ::= IMG_I IMG_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO ::= BR_I 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDO ::= BOTON_I VALOR BOTON_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO ::= TIH_I VALOR TIH_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO ::= PARA_I VALOR PARA_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTENIDO ::= SCRIPT_I SCRIPT_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INICIO ::= MENOR CC ETIQUETA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FIN ::= MENOR DIVI CC MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIN",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CABEZA_I ::= MENOR HEAD ETIQUETA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABEZA_I",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CABEZA_F ::= MENOR DIVI HEAD MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABEZA_F",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO_I ::= MENOR BODY ETIQUETA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_I",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_F ::= MENOR DIVI BODY MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_F",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TITU_I ::= MENOR TITLE ETIQUETA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITU_I",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TITU_F ::= MENOR DIVI BODY MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITU_F",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DIREC_I ::= MENOR LINK ETIQUETA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIREC_I",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DIREC_F ::= MENOR DIVI LINK MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIREC_F",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BAN_I ::= MENOR SPAM ETIQUETA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAN_I",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BAN_F ::= MENOR DIVI SPAM MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAN_F",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INT_I ::= MENOR INPUT ETIQUETA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INT_I",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INT_F ::= MENOR DIVI INPUT MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INT_F",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUAD_I ::= MENOR TEXTAREA ETIQUETA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUAD_I",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CUAD_F ::= MENOR DIVI TEXTAREA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUAD_F",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SELE_I ::= MENOR SELECT ETIQUETA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELE_I",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SELE_F ::= MENOR DIVI SELECT MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELE_F",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPT_I ::= MENOR OPTION ETIQUETA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPT_I",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPT_F ::= MENOR DIVI OPTION MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPT_F",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DIV_I ::= MENOR DIV ETIQUETA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIV_I",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DIV_F ::= MENOR DIVI DIV MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIV_F",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IMG_I ::= MENOR IMG ETIQUETA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMG_I",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IMG_F ::= MENOR DIVI IMG MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMG_F",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BR_I ::= MENOR BR ETIQUETA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BR_I",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BOTON_I ::= MENOR BUTTON ETIQUETA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON_I",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BOTON_F ::= MENOR DIVI BUTTON MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON_F",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIH_I ::= MENOR TITUH ETIQUETA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIH_I",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIH_F ::= MENOR DIVI TITUH MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIH_F",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARA_I ::= MENOR PARRA ETIQUETA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA_I",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PARA_F ::= MENOR DIVI PARRA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA_F",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SCRIPT_I ::= MENOR SCRIPT ETIQUETA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_I",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SCRIPT_F ::= MENOR DIVI SCRIPT MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_F",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ETIQUETA ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ETIQUETA ::= ETIQUETA PARAMETROS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAMETROS ::= CORCHEA VALORES CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VALORES ::= HREF IGUAL COMID VALOR COMID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VALORES ::= BACKG IGUAL COMID VALOR COMID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VALORES ::= COLOR IGUAL COMID VALOR COMID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALORES ::= FONTSI IGUAL COMID VALOR COMID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALORES ::= FONTFA IGUAL COMID VALOR COMID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALORES ::= TEXTALI IGUAL COMID VALOR COMID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALORES ::= TYPE IGUAL COMID VALOR COMID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VALORES ::= ID IGUAL COMID VALOR COMID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VALORES ::= NAME IGUAL COMID VALOR COMID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALORES ::= COLS IGUAL COMID ENTERO COMID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALORES ::= ROWS IGUAL COMID ENTERO COMID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALORES ::= CLASS IGUAL COMID VALOR COMID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALORES ::= SRC IGUAL COMID VALOR COMID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALORES ::= WIDTH IGUAL COMID ENTERO COMID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALORES ::= HEIGHT IGUAL COMID ENTERO COMID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALORES ::= ALT IGUAL COMID VALOR COMID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALORES ::= ONCLICK IGUAL COMID VALOR COMID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORES",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
