
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main.analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import main.excepciones.Errores;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import main.abstracto.*;
import main.instrucciones.*;
import main.expresiones.*;
import main.simbolo.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\333\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\136\002\000\002\004\010\000\002\005\003" +
    "\000\002\005\004\000\002\137\002\000\002\006\006\000" +
    "\002\006\004\000\002\140\002\000\002\006\006\000\002" +
    "\006\004\000\002\006\005\000\002\006\005\000\002\006" +
    "\004\000\002\006\004\000\002\141\002\000\002\006\006" +
    "\000\002\006\005\000\002\006\005\000\002\142\002\000" +
    "\002\010\006\000\002\007\003\000\002\007\004\000\002" +
    "\012\003\000\002\143\002\000\002\012\006\000\002\011" +
    "\003\000\002\011\004\000\002\144\002\000\002\013\007" +
    "\000\002\014\006\000\002\015\005\000\002\016\006\000" +
    "\002\145\002\000\002\017\007\000\002\020\006\000\002" +
    "\021\005\000\002\022\006\000\002\146\002\000\002\023" +
    "\007\000\002\024\006\000\002\147\002\000\002\025\007" +
    "\000\002\026\006\000\002\150\002\000\002\027\007\000" +
    "\002\030\006\000\002\151\002\000\002\031\007\000\002" +
    "\032\006\000\002\152\002\000\002\033\007\000\002\034" +
    "\006\000\002\035\005\000\002\036\006\000\002\153\002" +
    "\000\002\037\007\000\002\040\006\000\002\154\002\000" +
    "\002\041\007\000\002\042\006\000\002\043\005\000\002" +
    "\044\006\000\002\155\002\000\002\045\007\000\002\046" +
    "\006\000\002\156\002\000\002\047\007\000\002\050\006" +
    "\000\002\157\002\000\002\051\007\000\002\052\006\000" +
    "\002\053\005\000\002\054\006\000\002\055\003\000\002" +
    "\055\002\000\002\056\003\000\002\056\002\000\002\057" +
    "\003\000\002\057\002\000\002\060\003\000\002\060\002" +
    "\000\002\061\003\000\002\061\002\000\002\062\003\000" +
    "\002\062\002\000\002\063\003\000\002\063\002\000\002" +
    "\064\003\000\002\064\002\000\002\065\003\000\002\065" +
    "\002\000\002\066\003\000\002\066\004\000\002\067\003" +
    "\000\002\067\004\000\002\070\003\000\002\070\004\000" +
    "\002\071\003\000\002\071\004\000\002\072\003\000\002" +
    "\072\004\000\002\073\003\000\002\073\004\000\002\074" +
    "\003\000\002\074\004\000\002\075\003\000\002\075\004" +
    "\000\002\076\003\000\002\076\004\000\002\110\007\000" +
    "\002\110\007\000\002\110\007\000\002\110\007\000\002" +
    "\077\007\000\002\077\007\000\002\100\007\000\002\101" +
    "\007\000\002\102\007\000\002\102\003\000\002\103\007" +
    "\000\002\103\007\000\002\103\007\000\002\103\003\000" +
    "\002\104\007\000\002\104\007\000\002\104\003\000\002" +
    "\105\007\000\002\105\007\000\002\105\007\000\002\105" +
    "\003\000\002\106\007\000\002\106\007\000\002\106\007" +
    "\000\002\106\007\000\002\106\007\000\002\107\007\000" +
    "\002\107\007\000\002\107\007\000\002\107\003\000\002" +
    "\111\003\000\002\111\004\000\002\112\003\000\002\112" +
    "\003\000\002\112\003\000\002\112\003\000\002\112\003" +
    "\000\002\112\003\000\002\112\003\000\002\112\003\000" +
    "\002\112\003\000\002\112\010\000\002\112\010\000\002" +
    "\113\007\000\002\120\003\000\002\120\003\000\002\120" +
    "\003\000\002\120\003\000\002\120\003\000\002\120\003" +
    "\000\002\120\003\000\002\120\003\000\002\123\006\000" +
    "\002\123\006\000\002\115\006\000\002\114\005\000\002" +
    "\114\006\000\002\126\003\000\002\126\005\000\002\127" +
    "\005\000\002\127\006\000\002\130\005\000\002\130\007" +
    "\000\002\117\003\000\002\117\003\000\002\117\003\000" +
    "\002\117\003\000\002\117\003\000\002\122\006\000\002" +
    "\124\007\000\002\116\004\000\002\116\004\000\002\116" +
    "\005\000\002\116\005\000\002\116\005\000\002\116\005" +
    "\000\002\116\006\000\002\116\006\000\002\116\006\000" +
    "\002\116\006\000\002\116\005\000\002\116\005\000\002" +
    "\116\005\000\002\116\005\000\002\116\003\000\002\116" +
    "\003\000\002\116\003\000\002\116\003\000\002\116\003" +
    "\000\002\116\003\000\002\116\003\000\002\116\003\000" +
    "\002\116\005\000\002\131\003\000\002\131\004\000\002" +
    "\125\003\000\002\125\003\000\002\125\003\000\002\121" +
    "\011\000\002\133\010\000\002\133\012\000\002\133\011" +
    "\000\002\133\013\000\002\132\010\000\002\132\012\000" +
    "\002\134\013\000\002\135\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0201\000\004\013\005\001\002\000\004\002\000\001" +
    "\002\000\004\032\u01f4\001\002\000\004\013\012\001\002" +
    "\000\004\002\010\001\002\000\004\002\001\001\002\000" +
    "\004\013\017\001\002\000\004\033\013\001\002\000\004" +
    "\014\014\001\002\000\004\013\uffe0\001\002\000\004\013" +
    "\u01e5\001\002\000\004\013\034\001\002\000\004\035\020" +
    "\001\002\000\006\014\uffd9\026\uffd9\001\002\000\006\014" +
    "\uffb2\026\025\001\002\000\006\014\uffa1\026\uffa1\001\002" +
    "\000\006\014\uffb3\026\025\001\002\000\004\014\032\001" +
    "\002\000\004\053\026\001\002\000\004\011\027\001\002" +
    "\000\004\146\030\001\002\000\004\027\031\001\002\000" +
    "\006\014\uff8b\026\uff8b\001\002\000\004\013\uffd8\001\002" +
    "\000\006\014\uffa0\026\uffa0\001\002\000\004\016\u01e1\001" +
    "\002\000\004\013\037\001\002\000\004\013\056\001\002" +
    "\000\004\036\040\001\002\000\006\014\uffde\026\uffde\001" +
    "\002\000\006\014\uffb0\026\044\001\002\000\006\014\uffb1" +
    "\026\044\001\002\000\004\014\052\001\002\000\004\054" +
    "\046\001\002\000\006\014\uff9f\026\uff9f\001\002\000\004" +
    "\011\047\001\002\000\004\146\050\001\002\000\004\027" +
    "\051\001\002\000\006\014\uff8a\026\uff8a\001\002\000\004" +
    "\013\uffdd\001\002\000\006\014\uff9e\026\uff9e\001\002\000" +
    "\004\150\u01de\001\002\000\004\150\u01d7\001\002\000\030" +
    "\037\130\040\123\041\131\042\127\044\125\045\132\046" +
    "\122\047\120\050\121\051\124\052\126\001\002\000\004" +
    "\013\u01cd\001\002\000\004\013\u01c8\001\002\000\004\013" +
    "\u01c4\001\002\000\004\013\ufffc\001\002\000\006\013\u01b4" +
    "\150\u01b2\001\002\000\052\074\u0118\075\u0102\076\u011b\077" +
    "\u011a\100\u011f\101\u0106\102\u0114\103\u011e\106\u0119\107\u010d" +
    "\110\u010e\111\u0103\112\u0104\115\u0100\117\u0110\120\u010a\124" +
    "\u011d\126\u0105\132\u0115\145\u0117\001\002\000\004\013\354" +
    "\001\002\000\004\013\056\001\002\000\004\013\107\001" +
    "\002\000\004\013\101\001\002\000\004\150\072\001\002" +
    "\000\004\013\ufff0\001\002\000\004\013\074\001\002\000" +
    "\004\016\076\001\002\000\004\013\uffef\001\002\000\004" +
    "\047\077\001\002\000\004\014\100\001\002\000\004\013" +
    "\uffbe\001\002\000\004\016\103\001\002\000\004\013\ufff2" +
    "\001\002\000\004\045\104\001\002\000\004\014\105\001" +
    "\002\000\004\013\uffc3\001\002\000\004\013\ufff5\001\002" +
    "\000\004\016\110\001\002\000\004\041\111\001\002\000" +
    "\004\014\112\001\002\000\004\013\uffce\001\002\000\004" +
    "\013\114\001\002\000\032\016\117\037\130\040\123\041" +
    "\131\042\127\044\125\045\132\046\122\047\120\050\121" +
    "\051\124\052\126\001\002\000\004\013\ufffb\001\002\000" +
    "\004\013\ufff3\001\002\000\004\044\351\001\002\000\006" +
    "\014\uffc0\026\uffc0\001\002\000\006\014\uffbd\026\uffbd\001" +
    "\002\000\004\014\321\001\002\000\006\014\uffd3\026\uffd3" +
    "\001\002\000\006\014\uffba\026\uffba\001\002\000\006\014" +
    "\uffc8\026\uffc8\001\002\000\004\014\245\001\002\000\006" +
    "\014\uffcd\026\uffcd\001\002\000\006\014\uffd6\026\uffd6\001" +
    "\002\000\006\014\uffd0\026\uffd0\001\002\000\006\014\uffc5" +
    "\026\uffc5\001\002\000\006\014\uffa6\026\137\001\002\000" +
    "\004\014\165\001\002\000\006\014\uff95\026\uff95\001\002" +
    "\000\006\014\uffa7\026\137\001\002\000\014\062\140\067" +
    "\143\070\141\071\144\072\142\001\002\000\004\011\161" +
    "\001\002\000\004\011\156\001\002\000\004\011\153\001" +
    "\002\000\004\011\150\001\002\000\004\011\145\001\002" +
    "\000\004\146\146\001\002\000\004\027\147\001\002\000" +
    "\006\014\uff79\026\uff79\001\002\000\004\146\151\001\002" +
    "\000\004\027\152\001\002\000\006\014\uff7b\026\uff7b\001" +
    "\002\000\004\146\154\001\002\000\004\027\155\001\002" +
    "\000\006\014\uff78\026\uff78\001\002\000\004\146\157\001" +
    "\002\000\004\027\160\001\002\000\006\014\uff7a\026\uff7a" +
    "\001\002\000\004\146\162\001\002\000\004\027\163\001" +
    "\002\000\006\014\uff7c\026\uff7c\001\002\000\006\014\uff94" +
    "\026\uff94\001\002\000\004\013\uffc4\001\002\000\006\014" +
    "\uffaa\026\173\001\002\000\006\014\uffab\026\173\001\002" +
    "\000\004\014\224\001\002\000\006\014\uff81\026\uff81\001" +
    "\002\000\006\014\uff99\026\uff99\001\002\000\016\056\200" +
    "\057\177\060\201\062\174\064\176\065\175\001\002\000" +
    "\004\011\221\001\002\000\004\011\216\001\002\000\004" +
    "\011\213\001\002\000\004\011\210\001\002\000\004\011" +
    "\205\001\002\000\004\011\202\001\002\000\004\146\203" +
    "\001\002\000\004\027\204\001\002\000\006\014\uff8f\026" +
    "\uff8f\001\002\000\004\146\206\001\002\000\004\027\207" +
    "\001\002\000\006\014\uff90\026\uff90\001\002\000\004\146" +
    "\211\001\002\000\004\027\212\001\002\000\006\014\uff91" +
    "\026\uff91\001\002\000\004\146\214\001\002\000\004\027" +
    "\215\001\002\000\006\014\uff83\026\uff83\001\002\000\004" +
    "\146\217\001\002\000\004\027\220\001\002\000\006\014" +
    "\uff82\026\uff82\001\002\000\004\146\222\001\002\000\004" +
    "\027\223\001\002\000\006\014\uff8e\026\uff8e\001\002\000" +
    "\004\013\uffcf\001\002\000\006\014\uff98\026\uff98\001\002" +
    "\000\006\014\uffae\026\233\001\002\000\006\014\uffaf\026" +
    "\233\001\002\000\004\014\240\001\002\000\006\014\uff88" +
    "\026\uff88\001\002\000\006\014\uff9d\026\uff9d\001\002\000" +
    "\014\055\234\056\200\057\177\060\201\062\174\001\002" +
    "\000\004\011\235\001\002\000\004\146\236\001\002\000" +
    "\004\027\237\001\002\000\006\014\uff89\026\uff89\001\002" +
    "\000\004\150\uffd5\001\002\000\006\014\uff9c\026\uff9c\001" +
    "\002\000\006\014\uffae\026\233\001\002\000\004\014\244" +
    "\001\002\000\004\013\uffcc\001\002\000\052\074\uffb7\075" +
    "\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7" +
    "\106\uffb7\107\uffb7\110\uffb7\111\uffb7\112\uffb7\115\uffb7\117" +
    "\uffb7\120\uffb7\124\uffb7\126\uffb7\132\uffb7\145\uffb7\001\002" +
    "\000\006\014\uffa8\026\253\001\002\000\006\014\uffa9\026" +
    "\253\001\002\000\004\014\270\001\002\000\006\014\uff7d" +
    "\026\uff7d\001\002\000\006\014\uff97\026\uff97\001\002\000" +
    "\020\054\254\055\255\056\200\057\177\060\201\062\174" +
    "\066\256\001\002\000\004\011\265\001\002\000\004\011" +
    "\262\001\002\000\004\011\257\001\002\000\004\146\260" +
    "\001\002\000\004\027\261\001\002\000\006\014\uff7e\026" +
    "\uff7e\001\002\000\004\146\263\001\002\000\004\027\264" +
    "\001\002\000\006\014\uff80\026\uff80\001\002\000\004\146" +
    "\266\001\002\000\004\027\267\001\002\000\006\014\uff7f" +
    "\026\uff7f\001\002\000\004\013\uffc7\001\002\000\006\014" +
    "\uff96\026\uff96\001\002\000\006\014\uffae\026\233\001\002" +
    "\000\004\014\274\001\002\000\006\013\uffb9\150\uffb9\001" +
    "\002\000\006\014\uffac\026\302\001\002\000\006\014\uffad" +
    "\026\302\001\002\000\004\014\317\001\002\000\006\014" +
    "\uff84\026\uff84\001\002\000\006\014\uff9b\026\uff9b\001\002" +
    "\000\020\055\303\056\200\057\177\060\201\061\305\062" +
    "\174\063\304\001\002\000\004\011\314\001\002\000\004" +
    "\011\311\001\002\000\004\011\306\001\002\000\004\146" +
    "\307\001\002\000\004\027\310\001\002\000\006\014\uff87" +
    "\026\uff87\001\002\000\004\146\312\001\002\000\004\027" +
    "\313\001\002\000\006\014\uff86\026\uff86\001\002\000\004" +
    "\146\315\001\002\000\004\027\316\001\002\000\006\014" +
    "\uff85\026\uff85\001\002\000\004\013\uffd2\001\002\000\006" +
    "\014\uff9a\026\uff9a\001\002\000\004\013\uffc2\001\002\000" +
    "\006\014\uffae\026\233\001\002\000\004\014\324\001\002" +
    "\000\004\150\uffbc\001\002\000\006\014\uffa4\026\332\001" +
    "\002\000\006\014\uff93\026\uff93\001\002\000\006\014\uff74" +
    "\026\uff74\001\002\000\006\014\uffa5\026\332\001\002\000" +
    "\004\014\347\001\002\000\020\054\333\055\334\056\200" +
    "\057\177\060\201\062\174\073\335\001\002\000\004\011" +
    "\344\001\002\000\004\011\341\001\002\000\004\011\336" +
    "\001\002\000\004\146\337\001\002\000\004\027\340\001" +
    "\002\000\006\014\uff75\026\uff75\001\002\000\004\146\342" +
    "\001\002\000\004\027\343\001\002\000\006\014\uff77\026" +
    "\uff77\001\002\000\004\146\345\001\002\000\004\027\346" +
    "\001\002\000\006\014\uff76\026\uff76\001\002\000\004\150" +
    "\uffbf\001\002\000\006\014\uff92\026\uff92\001\002\000\004" +
    "\014\352\001\002\000\004\013\uffc6\001\002\000\004\150" +
    "\367\001\002\000\004\043\362\001\002\000\004\013\uffea" +
    "\001\002\000\004\013\360\001\002\000\004\013\ufff4\001" +
    "\002\000\006\016\363\043\362\001\002\000\004\013\uffe9" +
    "\001\002\000\004\014\366\001\002\000\004\042\364\001" +
    "\002\000\004\014\365\001\002\000\004\013\uffcb\001\002" +
    "\000\004\150\uffca\001\002\000\004\013\uffec\001\002\000" +
    "\004\013\372\001\002\000\004\013\uffeb\001\002\000\004" +
    "\016\373\001\002\000\004\043\374\001\002\000\004\014" +
    "\375\001\002\000\004\013\uffc9\001\002\000\006\011\u01ae" +
    "\031\u0197\001\002\000\056\013\uff73\027\uff73\074\uff73\075" +
    "\uff73\076\uff73\077\uff73\100\uff73\101\uff73\102\uff73\103\uff73" +
    "\106\uff73\107\uff73\110\uff73\111\uff73\112\uff73\115\uff73\117" +
    "\uff73\120\uff73\124\uff73\126\uff73\132\uff73\145\uff73\001\002" +
    "\000\004\024\u019b\001\002\000\006\131\u018a\145\u018b\001" +
    "\002\000\004\004\uff64\001\002\000\006\131\uff51\145\uff51" +
    "\001\002\000\006\131\uff4f\145\uff4f\001\002\000\004\004" +
    "\u0184\001\002\000\004\004\uff60\001\002\000\056\013\uff70" +
    "\027\uff70\074\uff70\075\uff70\076\uff70\077\uff70\100\uff70\101" +
    "\uff70\102\uff70\103\uff70\106\uff70\107\uff70\110\uff70\111\uff70" +
    "\112\uff70\115\uff70\117\uff70\120\uff70\124\uff70\126\uff70\132" +
    "\uff70\145\uff70\001\002\000\054\013\u017f\074\u0118\075\u0102" +
    "\076\u011b\077\u011a\100\u011f\101\u0106\102\u0114\103\u011e\106" +
    "\u0119\107\u010d\110\u010e\111\u0103\112\u0104\115\u0100\117\u0110" +
    "\120\u010a\124\u011d\126\u0105\132\u0115\145\u0117\001\002\000" +
    "\056\013\uff6b\027\uff6b\074\uff6b\075\uff6b\076\uff6b\077\uff6b" +
    "\100\uff6b\101\uff6b\102\uff6b\103\uff6b\106\uff6b\107\uff6b\110" +
    "\uff6b\111\uff6b\112\uff6b\115\uff6b\117\uff6b\120\uff6b\124\uff6b" +
    "\126\uff6b\132\uff6b\145\uff6b\001\002\000\004\004\u0168\001" +
    "\002\000\056\013\uff6e\027\uff6e\074\uff6e\075\uff6e\076\uff6e" +
    "\077\uff6e\100\uff6e\101\uff6e\102\uff6e\103\uff6e\106\uff6e\107" +
    "\uff6e\110\uff6e\111\uff6e\112\uff6e\115\uff6e\117\uff6e\120\uff6e" +
    "\124\uff6e\126\uff6e\132\uff6e\145\uff6e\001\002\000\056\013" +
    "\uff69\027\uff69\074\uff69\075\uff69\076\uff69\077\uff69\100\uff69" +
    "\101\uff69\102\uff69\103\uff69\106\uff69\107\uff69\110\uff69\111" +
    "\uff69\112\uff69\115\uff69\117\uff69\120\uff69\124\uff69\126\uff69" +
    "\132\uff69\145\uff69\001\002\000\006\131\uff4e\145\uff4e\001" +
    "\002\000\006\131\uff50\145\uff50\001\002\000\056\013\uff6f" +
    "\027\uff6f\074\uff6f\075\uff6f\076\uff6f\077\uff6f\100\uff6f\101" +
    "\uff6f\102\uff6f\103\uff6f\106\uff6f\107\uff6f\110\uff6f\111\uff6f" +
    "\112\uff6f\115\uff6f\117\uff6f\120\uff6f\124\uff6f\126\uff6f\132" +
    "\uff6f\145\uff6f\001\002\000\004\004\u0164\001\002\000\004" +
    "\004\u0160\001\002\000\056\013\uff6c\027\uff6c\074\uff6c\075" +
    "\uff6c\076\uff6c\077\uff6c\100\uff6c\101\uff6c\102\uff6c\103\uff6c" +
    "\106\uff6c\107\uff6c\110\uff6c\111\uff6c\112\uff6c\115\uff6c\117" +
    "\uff6c\120\uff6c\124\uff6c\126\uff6c\132\uff6c\145\uff6c\001\002" +
    "\000\056\013\uff6d\027\uff6d\074\uff6d\075\uff6d\076\uff6d\077" +
    "\uff6d\100\uff6d\101\uff6d\102\uff6d\103\uff6d\106\uff6d\107\uff6d" +
    "\110\uff6d\111\uff6d\112\uff6d\115\uff6d\117\uff6d\120\uff6d\124" +
    "\uff6d\126\uff6d\132\uff6d\145\uff6d\001\002\000\004\004\uff5f" +
    "\001\002\000\004\004\u015b\001\002\000\056\013\uff6a\027" +
    "\uff6a\074\uff6a\075\uff6a\076\uff6a\077\uff6a\100\uff6a\101\uff6a" +
    "\102\uff6a\103\uff6a\106\uff6a\107\uff6a\110\uff6a\111\uff6a\112" +
    "\uff6a\115\uff6a\117\uff6a\120\uff6a\124\uff6a\126\uff6a\132\uff6a" +
    "\145\uff6a\001\002\000\010\004\u0155\011\uff58\031\uff58\001" +
    "\002\000\004\004\uff65\001\002\000\006\131\uff52\145\uff52" +
    "\001\002\000\004\004\uff62\001\002\000\004\004\uff63\001" +
    "\002\000\056\013\uff71\027\uff71\074\uff71\075\uff71\076\uff71" +
    "\077\uff71\100\uff71\101\uff71\102\uff71\103\uff71\106\uff71\107" +
    "\uff71\110\uff71\111\uff71\112\uff71\115\uff71\117\uff71\120\uff71" +
    "\124\uff71\126\uff71\132\uff71\145\uff71\001\002\000\004\004" +
    "\u0120\001\002\000\004\004\uff5e\001\002\000\004\004\uff61" +
    "\001\002\000\030\004\u0125\007\u0122\021\u0127\113\u0124\114" +
    "\u0126\130\u012a\143\u0123\144\u0128\145\u012d\146\u0121\147\u012c" +
    "\001\002\000\034\005\uff3d\006\uff3d\007\uff3d\011\uff3d\013" +
    "\uff3d\014\uff3d\015\uff3d\017\uff3d\020\uff3d\021\uff3d\023\uff3d" +
    "\031\uff3d\044\uff3d\001\002\000\030\004\u0125\007\u0122\021" +
    "\u0127\113\u0124\114\u0126\130\u012a\143\u0123\144\u0128\145\u012d" +
    "\146\u0121\147\u012c\001\002\000\034\005\uff39\006\uff39\007" +
    "\uff39\011\uff39\013\uff39\014\uff39\015\uff39\017\uff39\020\uff39" +
    "\021\uff39\023\uff39\031\uff39\044\uff39\001\002\000\034\005" +
    "\uff37\006\uff37\007\uff37\011\uff37\013\uff37\014\uff37\015\uff37" +
    "\017\uff37\020\uff37\021\uff37\023\uff37\031\uff37\044\uff37\001" +
    "\002\000\030\004\u0125\007\u0122\021\u0127\113\u0124\114\u0126" +
    "\130\u012a\143\u0123\144\u0128\145\u012d\146\u0121\147\u012c\001" +
    "\002\000\034\005\uff36\006\uff36\007\uff36\011\uff36\013\uff36" +
    "\014\uff36\015\uff36\017\uff36\020\uff36\021\uff36\023\uff36\031" +
    "\uff36\044\uff36\001\002\000\030\004\u0125\007\u0122\021\u0127" +
    "\113\u0124\114\u0126\130\u012a\143\u0123\144\u0128\145\u012d\146" +
    "\u0121\147\u012c\001\002\000\034\005\uff38\006\uff38\007\uff38" +
    "\011\uff38\013\uff38\014\uff38\015\uff38\017\uff38\020\uff38\021" +
    "\uff38\023\uff38\031\uff38\044\uff38\001\002\000\034\005\uff3b" +
    "\006\uff3b\007\uff3b\011\uff3b\013\uff3b\014\uff3b\015\uff3b\017" +
    "\uff3b\020\uff3b\021\uff3b\023\uff3b\031\uff3b\044\uff3b\001\002" +
    "\000\004\004\u014e\001\002\000\030\005\u0133\006\u0132\007" +
    "\u012f\011\u0137\013\u0130\014\u0135\015\u0131\017\u0138\020\u012e" +
    "\021\u0136\044\u0134\001\002\000\034\005\uff3c\006\uff3c\007" +
    "\uff3c\011\uff3c\013\uff3c\014\uff3c\015\uff3c\017\uff3c\020\uff3c" +
    "\021\uff3c\023\uff3c\031\uff3c\044\uff3c\001\002\000\034\005" +
    "\uff3a\006\uff3a\007\uff3a\011\uff3a\013\uff3a\014\uff3a\015\uff3a" +
    "\017\uff3a\020\uff3a\021\uff3a\023\uff3a\031\uff3a\044\uff3a\001" +
    "\002\000\030\004\u0125\007\u0122\021\u0127\113\u0124\114\u0126" +
    "\130\u012a\143\u0123\144\u0128\145\u012d\146\u0121\147\u012c\001" +
    "\002\000\030\004\u0125\007\u0122\021\u0127\113\u0124\114\u0126" +
    "\130\u012a\143\u0123\144\u0128\145\u012d\146\u0121\147\u012c\001" +
    "\002\000\032\004\u0125\007\u0122\011\u0149\021\u0127\113\u0124" +
    "\114\u0126\130\u012a\143\u0123\144\u0128\145\u012d\146\u0121\147" +
    "\u012c\001\002\000\030\004\u0125\007\u0122\021\u0127\113\u0124" +
    "\114\u0126\130\u012a\143\u0123\144\u0128\145\u012d\146\u0121\147" +
    "\u012c\001\002\000\030\004\u0125\007\u0122\021\u0127\113\u0124" +
    "\114\u0126\130\u012a\143\u0123\144\u0128\145\u012d\146\u0121\147" +
    "\u012c\001\002\000\004\125\u0142\001\002\000\030\004\u0125" +
    "\007\u0122\021\u0127\113\u0124\114\u0126\130\u012a\143\u0123\144" +
    "\u0128\145\u012d\146\u0121\147\u012c\001\002\000\032\004\u0125" +
    "\007\u0122\011\u013e\021\u0127\113\u0124\114\u0126\130\u012a\143" +
    "\u0123\144\u0128\145\u012d\146\u0121\147\u012c\001\002\000\004" +
    "\011\u013c\001\002\000\004\011\u013a\001\002\000\030\004" +
    "\u0125\007\u0122\021\u0127\113\u0124\114\u0126\130\u012a\143\u0123" +
    "\144\u0128\145\u012d\146\u0121\147\u012c\001\002\000\034\005" +
    "\uff3f\006\u0132\007\u012f\011\uff3f\013\u0130\014\u0135\015\u0131" +
    "\017\uff3f\020\uff3f\021\uff3f\023\uff3f\031\uff3f\044\u0134\001" +
    "\002\000\030\004\u0125\007\u0122\021\u0127\113\u0124\114\u0126" +
    "\130\u012a\143\u0123\144\u0128\145\u012d\146\u0121\147\u012c\001" +
    "\002\000\034\005\uff45\006\u0132\007\u012f\011\uff45\013\uff45" +
    "\014\uff45\015\u0131\017\uff45\020\uff45\021\uff45\023\uff45\031" +
    "\uff45\044\u0134\001\002\000\030\004\u0125\007\u0122\021\u0127" +
    "\113\u0124\114\u0126\130\u012a\143\u0123\144\u0128\145\u012d\146" +
    "\u0121\147\u012c\001\002\000\034\005\uff44\006\u0132\007\u012f" +
    "\011\uff44\013\uff44\014\uff44\015\u0131\017\uff44\020\uff44\021" +
    "\uff44\023\uff44\031\uff44\044\u0134\001\002\000\030\004\u0125" +
    "\007\u0122\021\u0127\113\u0124\114\u0126\130\u012a\143\u0123\144" +
    "\u0128\145\u012d\146\u0121\147\u012c\001\002\000\034\005\uff40" +
    "\006\u0132\007\u012f\011\uff40\013\uff40\014\uff40\015\u0131\017" +
    "\uff40\020\uff40\021\uff40\023\uff40\031\uff40\044\u0134\001\002" +
    "\000\034\005\uff42\006\u0132\007\u012f\011\uff42\013\uff42\014" +
    "\uff42\015\u0131\017\uff42\020\uff42\021\uff42\023\uff42\031\uff42" +
    "\044\u0134\001\002\000\034\005\uff46\006\uff46\007\uff46\011" +
    "\uff46\013\uff46\014\uff46\015\uff46\017\uff46\020\uff46\021\uff46" +
    "\023\uff46\031\uff46\044\uff46\001\002\000\004\004\u0143\001" +
    "\002\000\030\004\u0125\007\u0122\021\u0127\113\u0124\114\u0126" +
    "\130\u012a\143\u0123\144\u0128\145\u012d\146\u0121\147\u012c\001" +
    "\002\000\030\005\u0145\006\u0132\007\u012f\011\u0137\013\u0130" +
    "\014\u0135\015\u0131\017\u0138\020\u012e\021\u0136\044\u0134\001" +
    "\002\000\004\115\u0100\001\002\000\056\013\uff28\027\uff28" +
    "\074\uff28\075\uff28\076\uff28\077\uff28\100\uff28\101\uff28\102" +
    "\uff28\103\uff28\106\uff28\107\uff28\110\uff28\111\uff28\112\uff28" +
    "\115\uff28\117\uff28\120\uff28\124\uff28\126\uff28\132\uff28\145" +
    "\uff28\001\002\000\034\005\uff49\006\uff49\007\uff49\011\uff49" +
    "\013\uff49\014\uff49\015\u0131\017\uff49\020\uff49\021\uff49\023" +
    "\uff49\031\uff49\044\u0134\001\002\000\034\005\uff47\006\uff47" +
    "\007\uff47\011\uff47\013\uff47\014\uff47\015\uff47\017\uff47\020" +
    "\uff47\021\uff47\023\uff47\031\uff47\044\uff47\001\002\000\030" +
    "\004\u0125\007\u0122\021\u0127\113\u0124\114\u0126\130\u012a\143" +
    "\u0123\144\u0128\145\u012d\146\u0121\147\u012c\001\002\000\034" +
    "\005\uff41\006\u0132\007\u012f\011\uff41\013\uff41\014\uff41\015" +
    "\u0131\017\uff41\020\uff41\021\uff41\023\uff41\031\uff41\044\u0134" +
    "\001\002\000\034\005\uff43\006\u0132\007\u012f\011\uff43\013" +
    "\uff43\014\uff43\015\u0131\017\uff43\020\uff43\021\uff43\023\uff43" +
    "\031\uff43\044\u0134\001\002\000\034\005\uff48\006\uff48\007" +
    "\uff48\011\uff48\013\uff48\014\uff48\015\u0131\017\uff48\020\uff48" +
    "\021\uff48\023\uff48\031\uff48\044\u0134\001\002\000\034\005" +
    "\uff3e\006\u0132\007\u012f\011\uff3e\013\u0130\014\u0135\015\u0131" +
    "\017\uff3e\020\uff3e\021\uff3e\023\uff3e\031\uff3e\044\u0134\001" +
    "\002\000\004\147\u014f\001\002\000\004\005\u0150\001\002" +
    "\000\034\005\uff4d\006\uff4d\007\uff4d\011\uff4d\013\uff4d\014" +
    "\uff4d\015\uff4d\017\uff4d\020\uff4d\021\uff4d\023\uff4d\031\uff4d" +
    "\044\uff4d\001\002\000\034\005\uff4a\006\uff4a\007\uff4a\011" +
    "\uff4a\013\uff4a\014\uff4a\015\uff4a\017\uff4a\020\uff4a\021\uff4a" +
    "\023\uff4a\031\uff4a\044\uff4a\001\002\000\030\005\u0153\006" +
    "\u0132\007\u012f\011\u0137\013\u0130\014\u0135\015\u0131\017\u0138" +
    "\020\u012e\021\u0136\044\u0134\001\002\000\034\005\uff35\006" +
    "\uff35\007\uff35\011\uff35\013\uff35\014\uff35\015\uff35\017\uff35" +
    "\020\uff35\021\uff35\023\uff35\031\uff35\044\uff35\001\002\000" +
    "\034\005\uff4b\006\uff4b\007\uff4b\011\uff4b\013\uff4b\014\uff4b" +
    "\015\uff4b\017\uff4b\020\uff4b\021\uff4b\023\uff4b\031\uff4b\044" +
    "\uff4b\001\002\000\004\005\u0156\001\002\000\004\026\u0157" +
    "\001\002\000\052\074\u0118\075\u0102\076\u011b\077\u011a\100" +
    "\u011f\101\u0106\102\u0114\103\u011e\106\u0119\107\u010d\110\u010e" +
    "\111\u0103\112\u0104\115\u0100\117\u0110\120\u010a\124\u011d\126" +
    "\u0105\132\u0115\145\u0117\001\002\000\054\027\u015a\074\u0118" +
    "\075\u0102\076\u011b\077\u011a\100\u011f\101\u0106\102\u0114\103" +
    "\u011e\106\u0119\107\u010d\110\u010e\111\u0103\112\u0104\115\u0100" +
    "\117\u0110\120\u010a\124\u011d\126\u0105\132\u0115\145\u0117\001" +
    "\002\000\056\013\uff72\027\uff72\074\uff72\075\uff72\076\uff72" +
    "\077\uff72\100\uff72\101\uff72\102\uff72\103\uff72\106\uff72\107" +
    "\uff72\110\uff72\111\uff72\112\uff72\115\uff72\117\uff72\120\uff72" +
    "\124\uff72\126\uff72\132\uff72\145\uff72\001\002\000\056\013" +
    "\uff68\027\uff68\074\uff68\075\uff68\076\uff68\077\uff68\100\uff68" +
    "\101\uff68\102\uff68\103\uff68\106\uff68\107\uff68\110\uff68\111" +
    "\uff68\112\uff68\115\uff68\117\uff68\120\uff68\124\uff68\126\uff68" +
    "\132\uff68\145\uff68\001\002\000\004\005\u015c\001\002\000" +
    "\004\026\u015d\001\002\000\052\074\u0118\075\u0102\076\u011b" +
    "\077\u011a\100\u011f\101\u0106\102\u0114\103\u011e\106\u0119\107" +
    "\u010d\110\u010e\111\u0103\112\u0104\115\u0100\117\u0110\120\u010a" +
    "\124\u011d\126\u0105\132\u0115\145\u0117\001\002\000\054\027" +
    "\u015f\074\u0118\075\u0102\076\u011b\077\u011a\100\u011f\101\u0106" +
    "\102\u0114\103\u011e\106\u0119\107\u010d\110\u010e\111\u0103\112" +
    "\u0104\115\u0100\117\u0110\120\u010a\124\u011d\126\u0105\132\u0115" +
    "\145\u0117\001\002\000\056\013\uff67\027\uff67\074\uff67\075" +
    "\uff67\076\uff67\077\uff67\100\uff67\101\uff67\102\uff67\103\uff67" +
    "\106\uff67\107\uff67\110\uff67\111\uff67\112\uff67\115\uff67\117" +
    "\uff67\120\uff67\124\uff67\126\uff67\132\uff67\145\uff67\001\002" +
    "\000\030\004\u0125\007\u0122\021\u0127\113\u0124\114\u0126\130" +
    "\u012a\143\u0123\144\u0128\145\u012d\146\u0121\147\u012c\001\002" +
    "\000\030\005\u0162\006\u0132\007\u012f\011\u0137\013\u0130\014" +
    "\u0135\015\u0131\017\u0138\020\u012e\021\u0136\044\u0134\001\002" +
    "\000\004\023\u0163\001\002\000\064\013\uff66\027\uff66\030" +
    "\uff66\074\uff66\075\uff66\076\uff66\077\uff66\100\uff66\101\uff66" +
    "\102\uff66\103\uff66\104\uff66\105\uff66\106\uff66\107\uff66\110" +
    "\uff66\111\uff66\112\uff66\115\uff66\117\uff66\120\uff66\124\uff66" +
    "\126\uff66\132\uff66\145\uff66\001\002\000\004\147\u0165\001" +
    "\002\000\004\005\u0166\001\002\000\004\023\u0167\001\002" +
    "\000\064\013\uff4c\027\uff4c\030\uff4c\074\uff4c\075\uff4c\076" +
    "\uff4c\077\uff4c\100\uff4c\101\uff4c\102\uff4c\103\uff4c\104\uff4c" +
    "\105\uff4c\106\uff4c\107\uff4c\110\uff4c\111\uff4c\112\uff4c\115" +
    "\uff4c\117\uff4c\120\uff4c\124\uff4c\126\uff4c\132\uff4c\145\uff4c" +
    "\001\002\000\030\004\u0125\007\u0122\021\u0127\113\u0124\114" +
    "\u0126\130\u012a\143\u0123\144\u0128\145\u012d\146\u0121\147\u012c" +
    "\001\002\000\030\005\u016a\006\u0132\007\u012f\011\u0137\013" +
    "\u0130\014\u0135\015\u0131\017\u0138\020\u012e\021\u0136\044\u0134" +
    "\001\002\000\004\121\u016b\001\002\000\004\115\u0100\001" +
    "\002\000\062\013\uff2e\027\uff2e\074\uff2e\075\uff2e\076\uff2e" +
    "\077\uff2e\100\uff2e\101\uff2e\102\uff2e\103\uff2e\106\uff2e\107" +
    "\uff2e\110\uff2e\111\uff2e\112\uff2e\115\uff2e\117\uff2e\120\uff2e" +
    "\122\u016d\123\u016e\124\uff2e\126\uff2e\132\uff2e\145\uff2e\001" +
    "\002\000\004\115\u0100\001\002\000\004\004\u0179\001\002" +
    "\000\062\013\uff2c\027\uff2c\074\uff2c\075\uff2c\076\uff2c\077" +
    "\uff2c\100\uff2c\101\uff2c\102\uff2c\103\uff2c\106\uff2c\107\uff2c" +
    "\110\uff2c\111\uff2c\112\uff2c\115\uff2c\117\uff2c\120\uff2c\122" +
    "\u0170\123\u0171\124\uff2c\126\uff2c\132\uff2c\145\uff2c\001\002" +
    "\000\004\115\u0100\001\002\000\004\120\u0172\001\002\000" +
    "\004\004\u0173\001\002\000\030\004\u0125\007\u0122\021\u0127" +
    "\113\u0124\114\u0126\130\u012a\143\u0123\144\u0128\145\u012d\146" +
    "\u0121\147\u012c\001\002\000\030\005\u0175\006\u0132\007\u012f" +
    "\011\u0137\013\u0130\014\u0135\015\u0131\017\u0138\020\u012e\021" +
    "\u0136\044\u0134\001\002\000\004\121\u0176\001\002\000\004" +
    "\115\u0100\001\002\000\062\013\uff29\027\uff29\074\uff29\075" +
    "\uff29\076\uff29\077\uff29\100\uff29\101\uff29\102\uff29\103\uff29" +
    "\106\uff29\107\uff29\110\uff29\111\uff29\112\uff29\115\uff29\117" +
    "\uff29\120\uff29\122\uff29\123\uff29\124\uff29\126\uff29\132\uff29" +
    "\145\uff29\001\002\000\056\013\uff2b\027\uff2b\074\uff2b\075" +
    "\uff2b\076\uff2b\077\uff2b\100\uff2b\101\uff2b\102\uff2b\103\uff2b" +
    "\106\uff2b\107\uff2b\110\uff2b\111\uff2b\112\uff2b\115\uff2b\117" +
    "\uff2b\120\uff2b\124\uff2b\126\uff2b\132\uff2b\145\uff2b\001\002" +
    "\000\030\004\u0125\007\u0122\021\u0127\113\u0124\114\u0126\130" +
    "\u012a\143\u0123\144\u0128\145\u012d\146\u0121\147\u012c\001\002" +
    "\000\030\005\u017b\006\u0132\007\u012f\011\u0137\013\u0130\014" +
    "\u0135\015\u0131\017\u0138\020\u012e\021\u0136\044\u0134\001\002" +
    "\000\004\121\u017c\001\002\000\004\115\u0100\001\002\000" +
    "\062\013\uff2a\027\uff2a\074\uff2a\075\uff2a\076\uff2a\077\uff2a" +
    "\100\uff2a\101\uff2a\102\uff2a\103\uff2a\106\uff2a\107\uff2a\110" +
    "\uff2a\111\uff2a\112\uff2a\115\uff2a\117\uff2a\120\uff2a\122\uff2a" +
    "\123\uff2a\124\uff2a\126\uff2a\132\uff2a\145\uff2a\001\002\000" +
    "\056\013\uff2d\027\uff2d\074\uff2d\075\uff2d\076\uff2d\077\uff2d" +
    "\100\uff2d\101\uff2d\102\uff2d\103\uff2d\106\uff2d\107\uff2d\110" +
    "\uff2d\111\uff2d\112\uff2d\115\uff2d\117\uff2d\120\uff2d\124\uff2d" +
    "\126\uff2d\132\uff2d\145\uff2d\001\002\000\004\016\u0181\001" +
    "\002\000\004\013\uffed\001\002\000\004\052\u0182\001\002" +
    "\000\004\014\u0183\001\002\000\004\013\uffb6\001\002\000" +
    "\030\004\u0125\007\u0122\021\u0127\113\u0124\114\u0126\130\u012a" +
    "\143\u0123\144\u0128\145\u012d\146\u0121\147\u012c\001\002\000" +
    "\030\005\u0186\006\u0132\007\u012f\011\u0137\013\u0130\014\u0135" +
    "\015\u0131\017\u0138\020\u012e\021\u0136\044\u0134\001\002\000" +
    "\004\127\u0187\001\002\000\004\115\u0100\001\002\000\056" +
    "\013\uff27\027\uff27\074\uff27\075\uff27\076\uff27\077\uff27\100" +
    "\uff27\101\uff27\102\uff27\103\uff27\106\uff27\107\uff27\110\uff27" +
    "\111\uff27\112\uff27\115\uff27\117\uff27\120\uff27\124\uff27\126" +
    "\uff27\132\uff27\145\uff27\001\002\000\006\023\u019a\031\u0197" +
    "\001\002\000\004\145\u018b\001\002\000\010\011\u0192\023" +
    "\uff58\031\uff58\001\002\000\006\023\u018e\031\u018d\001\002" +
    "\000\004\145\u018f\001\002\000\056\013\uff56\027\uff56\074" +
    "\uff56\075\uff56\076\uff56\077\uff56\100\uff56\101\uff56\102\uff56" +
    "\103\uff56\106\uff56\107\uff56\110\uff56\111\uff56\112\uff56\115" +
    "\uff56\117\uff56\120\uff56\124\uff56\126\uff56\132\uff56\145\uff56" +
    "\001\002\000\004\011\u0190\001\002\000\030\004\u0125\007" +
    "\u0122\021\u0127\113\u0124\114\u0126\130\u012a\143\u0123\144\u0128" +
    "\145\u012d\146\u0121\147\u012c\001\002\000\032\006\u0132\007" +
    "\u012f\011\u0137\013\u0130\014\u0135\015\u0131\017\u0138\020\u012e" +
    "\021\u0136\023\uff53\031\uff53\044\u0134\001\002\000\030\004" +
    "\u0125\007\u0122\021\u0127\113\u0124\114\u0126\130\u012a\143\u0123" +
    "\144\u0128\145\u012d\146\u0121\147\u012c\001\002\000\032\006" +
    "\u0132\007\u012f\011\u0137\013\u0130\014\u0135\015\u0131\017\u0138" +
    "\020\u012e\021\u0136\023\uff54\031\uff54\044\u0134\001\002\000" +
    "\006\023\u0198\031\u0197\001\002\000\006\023\u0196\031\u018d" +
    "\001\002\000\056\013\uff55\027\uff55\074\uff55\075\uff55\076" +
    "\uff55\077\uff55\100\uff55\101\uff55\102\uff55\103\uff55\106\uff55" +
    "\107\uff55\110\uff55\111\uff55\112\uff55\115\uff55\117\uff55\120" +
    "\uff55\124\uff55\126\uff55\132\uff55\145\uff55\001\002\000\004" +
    "\145\u0199\001\002\000\056\013\uff59\027\uff59\074\uff59\075" +
    "\uff59\076\uff59\077\uff59\100\uff59\101\uff59\102\uff59\103\uff59" +
    "\106\uff59\107\uff59\110\uff59\111\uff59\112\uff59\115\uff59\117" +
    "\uff59\120\uff59\124\uff59\126\uff59\132\uff59\145\uff59\001\002" +
    "\000\010\011\uff57\023\uff57\031\uff57\001\002\000\056\013" +
    "\uff5a\027\uff5a\074\uff5a\075\uff5a\076\uff5a\077\uff5a\100\uff5a" +
    "\101\uff5a\102\uff5a\103\uff5a\106\uff5a\107\uff5a\110\uff5a\111" +
    "\uff5a\112\uff5a\115\uff5a\117\uff5a\120\uff5a\124\uff5a\126\uff5a" +
    "\132\uff5a\145\uff5a\001\002\000\004\030\u019c\001\002\000" +
    "\030\074\u0118\075\u0102\076\u011b\077\u011a\100\u011f\101\u0106" +
    "\102\u0114\103\u011e\104\u019d\105\u01a3\117\u0110\001\002\000" +
    "\004\004\u01ab\001\002\000\032\030\uff34\074\uff34\075\uff34" +
    "\076\uff34\077\uff34\100\uff34\101\uff34\102\uff34\103\uff34\104" +
    "\uff34\105\uff34\117\uff34\001\002\000\032\030\uff30\074\uff30" +
    "\075\uff30\076\uff30\077\uff30\100\uff30\101\uff30\102\uff30\103" +
    "\uff30\104\uff30\105\uff30\117\uff30\001\002\000\032\030\uff31" +
    "\074\uff31\075\uff31\076\uff31\077\uff31\100\uff31\101\uff31\102" +
    "\uff31\103\uff31\104\uff31\105\uff31\117\uff31\001\002\000\032" +
    "\030\u01a8\074\u0118\075\u0102\076\u011b\077\u011a\100\u011f\101" +
    "\u0106\102\u0114\103\u011e\104\u019d\105\u01a3\117\u0110\001\002" +
    "\000\032\030\uff32\074\uff32\075\uff32\076\uff32\077\uff32\100" +
    "\uff32\101\uff32\102\uff32\103\uff32\104\uff32\105\uff32\117\uff32" +
    "\001\002\000\004\004\u01a4\001\002\000\004\005\u01a5\001" +
    "\002\000\004\023\u01a6\001\002\000\032\030\uff5c\074\uff5c" +
    "\075\uff5c\076\uff5c\077\uff5c\100\uff5c\101\uff5c\102\uff5c\103" +
    "\uff5c\104\uff5c\105\uff5c\117\uff5c\001\002\000\032\030\uff33" +
    "\074\uff33\075\uff33\076\uff33\077\uff33\100\uff33\101\uff33\102" +
    "\uff33\103\uff33\104\uff33\105\uff33\117\uff33\001\002\000\004" +
    "\025\u01a9\001\002\000\004\116\u01aa\001\002\000\062\013" +
    "\uff2f\027\uff2f\074\uff2f\075\uff2f\076\uff2f\077\uff2f\100\uff2f" +
    "\101\uff2f\102\uff2f\103\uff2f\106\uff2f\107\uff2f\110\uff2f\111" +
    "\uff2f\112\uff2f\115\uff2f\117\uff2f\120\uff2f\122\uff2f\123\uff2f" +
    "\124\uff2f\126\uff2f\132\uff2f\145\uff2f\001\002\000\004\005" +
    "\u01ac\001\002\000\004\023\u01ad\001\002\000\032\030\uff5d" +
    "\074\uff5d\075\uff5d\076\uff5d\077\uff5d\100\uff5d\101\uff5d\102" +
    "\uff5d\103\uff5d\104\uff5d\105\uff5d\117\uff5d\001\002\000\030" +
    "\004\u0125\007\u0122\021\u0127\113\u0124\114\u0126\130\u012a\143" +
    "\u0123\144\u0128\145\u012d\146\u0121\147\u012c\001\002\000\030" +
    "\006\u0132\007\u012f\011\u0137\013\u0130\014\u0135\015\u0131\017" +
    "\u0138\020\u012e\021\u0136\023\u01b0\044\u0134\001\002\000\056" +
    "\013\uff5b\027\uff5b\074\uff5b\075\uff5b\076\uff5b\077\uff5b\100" +
    "\uff5b\101\uff5b\102\uff5b\103\uff5b\106\uff5b\107\uff5b\110\uff5b" +
    "\111\uff5b\112\uff5b\115\uff5b\117\uff5b\120\uff5b\124\uff5b\126" +
    "\uff5b\132\uff5b\145\uff5b\001\002\000\006\013\u01be\150\u01b2" +
    "\001\002\000\006\013\uffe8\150\uffe8\001\002\000\004\150" +
    "\u01b6\001\002\000\004\037\130\001\002\000\006\013\uffe5" +
    "\150\uffe5\001\002\000\004\013\uffe7\001\002\000\004\013" +
    "\u01b8\001\002\000\004\016\u01ba\001\002\000\006\013\uffe6" +
    "\150\uffe6\001\002\000\004\037\u01bb\001\002\000\004\014" +
    "\u01bc\001\002\000\006\013\uffd4\150\uffd4\001\002\000\004" +
    "\013\uffee\001\002\000\006\016\u01c0\037\130\001\002\000" +
    "\006\013\uffe4\150\uffe4\001\002\000\004\051\u01c1\001\002" +
    "\000\004\014\u01c2\001\002\000\004\013\uffb8\001\002\000" +
    "\004\013\ufff1\001\002\000\004\016\u01c5\001\002\000\004" +
    "\046\u01c6\001\002\000\004\014\u01c7\001\002\000\004\013" +
    "\uffc1\001\002\000\004\016\u01ca\001\002\000\004\013\ufff8" +
    "\001\002\000\004\040\u01cb\001\002\000\004\014\u01cc\001" +
    "\002\000\004\013\uffd1\001\002\000\032\016\u01d4\037\130" +
    "\040\123\041\131\042\127\044\125\045\132\046\122\047" +
    "\120\050\121\051\124\052\126\001\002\000\004\013\u01d0" +
    "\001\002\000\004\002\uffff\001\002\000\004\016\u01d1\001" +
    "\002\000\004\032\u01d2\001\002\000\004\014\u01d3\001\002" +
    "\000\004\002\uffe1\001\002\000\004\036\u01d5\001\002\000" +
    "\004\014\u01d6\001\002\000\004\013\uffdc\001\002\000\004" +
    "\013\ufffa\001\002\000\004\013\u01da\001\002\000\004\013" +
    "\ufff9\001\002\000\004\016\u01db\001\002\000\004\050\u01dc" +
    "\001\002\000\004\014\u01dd\001\002\000\004\013\uffbb\001" +
    "\002\000\004\013\ufff7\001\002\000\004\013\u01b8\001\002" +
    "\000\004\013\ufff6\001\002\000\004\033\u01e2\001\002\000" +
    "\004\014\u01e3\001\002\000\004\013\uffdf\001\002\000\004" +
    "\013\u01ea\001\002\000\004\016\u01e6\001\002\000\004\035" +
    "\u01e7\001\002\000\004\014\u01e8\001\002\000\004\013\uffd7" +
    "\001\002\000\004\150\u01ed\001\002\000\004\034\u01eb\001" +
    "\002\000\004\014\u01ec\001\002\000\004\150\uffdb\001\002" +
    "\000\004\013\ufffe\001\002\000\004\013\u01f0\001\002\000" +
    "\004\013\ufffd\001\002\000\004\016\u01f1\001\002\000\004" +
    "\034\u01f2\001\002\000\004\014\u01f3\001\002\000\004\013" +
    "\uffda\001\002\000\006\014\uffe3\026\uffe3\001\002\000\006" +
    "\014\uffb4\026\u01f9\001\002\000\006\014\uffa3\026\uffa3\001" +
    "\002\000\006\014\uffb5\026\u01f9\001\002\000\004\014\u0202" +
    "\001\002\000\006\062\u01fa\063\u01fb\001\002\000\004\011" +
    "\u01ff\001\002\000\004\011\u01fc\001\002\000\004\146\u01fd" +
    "\001\002\000\004\027\u01fe\001\002\000\006\014\uff8c\026" +
    "\uff8c\001\002\000\004\146\u0200\001\002\000\004\027\u0201" +
    "\001\002\000\006\014\uff8d\026\uff8d\001\002\000\004\013" +
    "\uffe2\001\002\000\006\014\uffa2\026\uffa2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0201\000\010\002\006\003\003\013\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\015\023" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u01e3\001\001\000\004\016\034\001" +
    "\001\000\002\001\001\000\004\146\020\001\001\000\010" +
    "\056\023\067\022\100\021\001\001\000\002\001\001\000" +
    "\004\100\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\035\001\001\000\034\005\056\006" +
    "\061\025\053\027\057\031\066\033\064\037\065\041\067" +
    "\043\060\045\070\047\054\051\062\053\063\001\001\000" +
    "\002\001\001\000\004\145\040\001\001\000\010\057\042" +
    "\070\041\101\044\001\001\000\004\101\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\006\114\020" +
    "\u01cd\025\053\027\057\031\066\033\064\037\065\041\067" +
    "\043\060\045\070\047\054\051\062\053\063\001\001\000" +
    "\004\030\u01c8\001\001\000\004\044\u01c2\001\001\000\002" +
    "\001\001\000\010\011\u01b0\012\u01b4\025\u01b2\001\001\000" +
    "\036\111\u0107\112\376\113\u011b\114\u0106\115\u010e\117\u0100" +
    "\120\u0110\121\u0111\124\u0112\126\375\127\u010a\133\u0108\134" +
    "\u0115\135\u010b\001\001\000\010\007\355\010\354\035\352" +
    "\001\001\000\034\005\112\006\061\025\053\027\057\031" +
    "\066\033\064\037\065\041\067\043\060\045\070\047\054" +
    "\051\062\053\063\001\001\000\004\032\105\001\001\000" +
    "\004\042\101\001\001\000\002\001\001\000\004\141\072" +
    "\001\001\000\004\046\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\006\114\025\053\027\057\031\066" +
    "\033\064\037\065\040\115\041\067\043\060\045\070\047" +
    "\054\051\062\053\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\155" +
    "\324\001\001\000\004\156\321\001\001\000\002\001\001" +
    "\000\004\150\274\001\001\000\004\157\271\001\001\000" +
    "\004\153\245\001\001\000\002\001\001\000\004\152\241" +
    "\001\001\000\004\147\225\001\001\000\004\151\165\001" +
    "\001\000\004\154\132\001\001\000\010\064\133\075\135" +
    "\106\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\106\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\062\167\073\166\104" +
    "\171\110\170\001\001\000\006\104\224\110\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\060\227\071\226\102\231\110\230" +
    "\001\001\000\006\102\240\110\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\060\242\071\226\102\231\110\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\063\247" +
    "\074\246\105\251\110\250\001\001\000\006\105\270\110" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\060" +
    "\272\071\226\102\231\110\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\061\276\072\275\103\300\110" +
    "\277\001\001\000\006\103\317\110\277\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\060\322" +
    "\071\226\102\231\110\230\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\065\330\076\327\107\325\110\326" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\107" +
    "\347\110\326\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\360\034\356\035\352\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\142\367\001\001\000\004\036\370\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\126\u0188\130\u018b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\054\u017f\112\u0158\113\u011b\114\u0106\115\u010e\117\u0100" +
    "\120\u0110\121\u0111\124\u0112\126\375\127\u010a\133\u0108\134" +
    "\u0115\135\u010b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\116\u012a\122\u0128\001" +
    "\001\000\002\001\001\000\006\116\u0153\122\u0128\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\116\u0151\122" +
    "\u0128\001\001\000\002\001\001\000\006\116\u0150\122\u0128" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\116\u014c\122\u0128\001\001\000\006\116\u014b\122" +
    "\u0128\001\001\000\006\116\u0149\122\u0128\001\001\000\006" +
    "\116\u0147\122\u0128\001\001\000\006\116\u0146\122\u0128\001" +
    "\001\000\002\001\001\000\006\116\u0140\122\u0128\001\001" +
    "\000\006\116\u013e\122\u0128\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\116\u0138\122\u0128\001\001\000\002" +
    "\001\001\000\006\116\u013a\122\u0128\001\001\000\002\001" +
    "\001\000\006\116\u013c\122\u0128\001\001\000\002\001\001" +
    "\000\006\116\u013f\122\u0128\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\116\u0143\122\u0128\001\001\000\002\001\001\000\004\121" +
    "\u0145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\116\u014a\122\u0128\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\111" +
    "\u0157\112\376\113\u011b\114\u0106\115\u010e\117\u0100\120\u0110" +
    "\121\u0111\124\u0112\126\375\127\u010a\133\u0108\134\u0115\135" +
    "\u010b\001\001\000\034\112\u0158\113\u011b\114\u0106\115\u010e" +
    "\117\u0100\120\u0110\121\u0111\124\u0112\126\375\127\u010a\133" +
    "\u0108\134\u0115\135\u010b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\111" +
    "\u015d\112\376\113\u011b\114\u0106\115\u010e\117\u0100\120\u0110" +
    "\121\u0111\124\u0112\126\375\127\u010a\133\u0108\134\u0115\135" +
    "\u010b\001\001\000\034\112\u0158\113\u011b\114\u0106\115\u010e" +
    "\117\u0100\120\u0110\121\u0111\124\u0112\126\375\127\u010a\133" +
    "\u0108\134\u0115\135\u010b\001\001\000\002\001\001\000\006" +
    "\116\u0160\122\u0128\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\116\u0168\122" +
    "\u0128\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u016b\001\001\000\004\132\u016e\001\001\000\004\121" +
    "\u017d\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u0177\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\116\u0173\122\u0128\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\121\u0176\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\116\u0179\122\u0128\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u017c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\116\u0184\122\u0128\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u0187\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\126\u0193\130\u0194\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\116\u0190\122\u0128" +
    "\001\001\000\002\001\001\000\006\116\u0192\122\u0128\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\113\u01a1\120\u0110\123\u019f\124\u019e\125\u019d\131\u01a0\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\113\u01a1\120\u0110\123\u019f\124" +
    "\u019e\125\u01a6\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\116\u01ae\122\u0128\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\u01be\025\u01b2\052\u01bc\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\143\u01b6\001\001\000\004\026" +
    "\u01b8\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\u01ce\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\137\u01d7\001\001\000\004\050\u01d8\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\140\u01de\001\001\000\004" +
    "\026\u01df\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\u01e8\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\136\u01ed\001\001\000" +
    "\004\022\u01ee\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\144\u01f4\001\001\000\010\055\u01f7\066\u01f6\077\u01f5" +
    "\001\001\000\002\001\001\000\004\077\u0202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    String styleAttributes = "";
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();

     public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right,
                        "Verifica la Sintaxis"));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right,
                        "Ninguna"));
    }

    public LinkedList<Errores> getErrores(){
        return listaErrores;
    }

    public StringBuilder htmlContent = new StringBuilder();
    
    public void addToHtml(String tagContent){
        htmlContent.append(tagContent);
    }
    
    public void exportHtmlFile(String fileName){
        try(BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))){
            writer.write(htmlContent.toString());
        } catch (IOException e){
            e.printStackTrace();
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= BASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BASE ::= INICIO CABEZA_I INTRODUCCION CABEZA_F CUERPO_I CONTENIDOS CUERPO_F FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BASE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT=a; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INTRODUCCION ::= DIREC_I DIREC_F TITU_I VALOR NT$0 TITU_F 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRODUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONTENIDOS ::= CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTENIDOS ::= CONTENIDOS CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT=a; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDO ::= TIH_I VALOR NT$1 TIH_F 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDO ::= INT_I INT_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT=a; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTENIDO ::= BAN_I VALOR NT$2 BAN_F 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDO ::= CUAD_I CUAD_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO ::= SELE_I LIST_OPT SELE_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDO ::= DIV_I CONTENIDOS DIV_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO ::= IMG_I IMG_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO ::= BR_I BR_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT=a; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTENIDO ::= BOTON_I VALOR NT$3 BOTON_F 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTENIDO ::= PARA_I LIST_SPAN PARA_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTENIDO ::= SCRIPT_I INSTRUCCIONES SCRIPT_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT=a; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUAOPT ::= OPT_I VALOR NT$4 OPT_F 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUAOPT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LIST_OPT ::= CUAOPT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_OPT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LIST_OPT ::= LIST_OPT CUAOPT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_OPT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SPAN ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPAN",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$5 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT=a; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SPAN ::= BAN_I VALOR NT$5 BAN_F 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPAN",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LIST_SPAN ::= SPAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_SPAN",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LIST_SPAN ::= LIST_SPAN SPAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_SPAN",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$6 ::= 
            {
              Object RESULT =null;
 RESULT = "<html"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INICIO ::= MENOR CC NT$6 ETIQUETA1 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FIN ::= MENOR DIVI CC MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</html>"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIN",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CABEZA_I ::= MENOR HEAD MAYOR 
            {
              Object RESULT =null;
		 RESULT = "<head>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABEZA_I",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CABEZA_F ::= MENOR DIVI HEAD MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</head>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABEZA_F",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$7 ::= 
            {
              Object RESULT =null;
 RESULT = "<body"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO_I ::= MENOR BODY NT$7 ETIQUETA3 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_I",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUERPO_F ::= MENOR DIVI BODY MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</body>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_F",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TITU_I ::= MENOR TITLE MAYOR 
            {
              Object RESULT =null;
		 RESULT = "<title>"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITU_I",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TITU_F ::= MENOR DIVI TITLE MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</title>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITU_F",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$8 ::= 
            {
              Object RESULT =null;
 RESULT = "<link"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DIREC_I ::= MENOR LINK NT$8 ETIQUETA2 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIREC_I",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DIREC_F ::= MENOR DIVI LINK MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIREC_F",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$9 ::= 
            {
              Object RESULT =null;
 RESULT = "<span"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BAN_I ::= MENOR SPAM NT$9 ETIQUETA4 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAN_I",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BAN_F ::= MENOR DIVI SPAM MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</span>"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAN_F",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$10 ::= 
            {
              Object RESULT =null;
 RESULT = "<input"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INT_I ::= MENOR INPUT NT$10 ETIQUETA5 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INT_I",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INT_F ::= MENOR DIVI INPUT MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INT_F",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$11 ::= 
            {
              Object RESULT =null;
 RESULT = "<textarea"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CUAD_I ::= MENOR TEXTAREA NT$11 ETIQUETA6 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUAD_I",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CUAD_F ::= MENOR DIVI TEXTAREA MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</textarea>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUAD_F",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$12 ::= 
            {
              Object RESULT =null;
 RESULT = "<select"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",104, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SELE_I ::= MENOR SELECT NT$12 ETIQUETA4 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELE_I",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SELE_F ::= MENOR DIVI SELECT MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</select>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELE_F",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPT_I ::= MENOR OPTION MAYOR 
            {
              Object RESULT =null;
		 RESULT = "<option>"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPT_I",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPT_F ::= MENOR DIVI OPTION MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</option>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPT_F",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$13 ::= 
            {
              Object RESULT =null;
 RESULT = "<div"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DIV_I ::= MENOR DIV NT$13 ETIQUETA7 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIV_I",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DIV_F ::= MENOR DIVI DIV MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</div>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIV_F",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$14 ::= 
            {
              Object RESULT =null;
 RESULT = "<img"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IMG_I ::= MENOR IMG NT$14 ETIQUETA8 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMG_I",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IMG_F ::= MENOR DIVI IMG MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMG_F",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BR_I ::= MENOR BR MAYOR 
            {
              Object RESULT =null;
		 RESULT = "<br>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BR_I",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BR_F ::= MENOR DIVI BR MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BR_F",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$15 ::= 
            {
              Object RESULT =null;
 RESULT = "<button"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BOTON_I ::= MENOR BUTTON NT$15 ETIQUETA9 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON_I",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BOTON_F ::= MENOR DIVI BUTTON MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</button>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON_F",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$16 ::= 
            {
              Object RESULT =null;
 RESULT = "<h1"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",108, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIH_I ::= MENOR TITUH NT$16 ETIQUETA4 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIH_I",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIH_F ::= MENOR DIVI TITUH MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</h1>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIH_F",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$17 ::= 
            {
              Object RESULT =null;
 RESULT = "<p"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",109, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARA_I ::= MENOR PARRA NT$17 ETIQUETA4 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA_I",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARA_F ::= MENOR DIVI PARRA MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</p>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA_F",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SCRIPT_I ::= MENOR SCRIPT MAYOR 
            {
              Object RESULT =null;
		 RESULT = "<script>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_I",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SCRIPT_F ::= MENOR DIVI SCRIPT MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</script>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_F",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ETIQUETA1 ::= LIST_VAL1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA1",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ETIQUETA1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA1",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ETIQUETA2 ::= LIST_VAL2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ETIQUETA2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ETIQUETA3 ::= LIST_VAL3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA3",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ETIQUETA3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA3",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ETIQUETA4 ::= LIST_VAL4 
            {
              Object RESULT =null;
		
                if(!styleAttributes.isEmpty()){
                    RESULT = " style=\"" + styleAttributes.trim() + "\" ";
                    addToHtml(RESULT.toString());
                    styleAttributes = "";
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA4",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ETIQUETA4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA4",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ETIQUETA5 ::= LIST_VAL5 
            {
              Object RESULT =null;
		
                if(!styleAttributes.isEmpty()){
                    RESULT = " style=\"" + styleAttributes.trim() + "\" ";
                    addToHtml(RESULT.toString());
                    styleAttributes = "";
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA5",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ETIQUETA5 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA5",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ETIQUETA6 ::= LIST_VAL6 
            {
              Object RESULT =null;
		
                if(!styleAttributes.isEmpty()){
                    RESULT = " style=\"" + styleAttributes.trim() + "\" ";
                    addToHtml(RESULT.toString());
                    styleAttributes = "";
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA6",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ETIQUETA6 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA6",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ETIQUETA7 ::= LIST_VAL7 
            {
              Object RESULT =null;
		
                if(!styleAttributes.isEmpty()){
                    RESULT = " style=\"" + styleAttributes.trim() + "\" ";
                    addToHtml(RESULT.toString());
                    styleAttributes = "";
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA7",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ETIQUETA7 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA7",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ETIQUETA8 ::= LIST_VAL8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA8",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ETIQUETA8 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA8",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ETIQUETA9 ::= LIST_VAL9 
            {
              Object RESULT =null;
		
                if(!styleAttributes.isEmpty()){
                    RESULT = " style=\"" + styleAttributes.trim() + "\" ";
                    addToHtml(RESULT.toString());
                    styleAttributes = "";
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA9",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ETIQUETA9 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA9",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LIST_VAL1 ::= VALOR_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL1",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LIST_VAL1 ::= LIST_VAL1 VALOR_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL1",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LIST_VAL2 ::= VALOR_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL2",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LIST_VAL2 ::= LIST_VAL2 VALOR_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL2",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LIST_VAL3 ::= VALOR_3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL3",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LIST_VAL3 ::= LIST_VAL3 VALOR_3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL3",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LIST_VAL4 ::= VALOR_4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL4",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LIST_VAL4 ::= LIST_VAL4 VALOR_4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL4",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LIST_VAL5 ::= VALOR_5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL5",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LIST_VAL5 ::= LIST_VAL5 VALOR_5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL5",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LIST_VAL6 ::= VALOR_6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL6",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LIST_VAL6 ::= LIST_VAL6 VALOR_6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL6",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LIST_VAL7 ::= VALOR_7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL7",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LIST_VAL7 ::= LIST_VAL7 VALOR_7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL7",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LIST_VAL8 ::= VALOR_8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL8",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LIST_VAL8 ::= LIST_VAL8 VALOR_8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL8",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LIST_VAL9 ::= VALOR_9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL9",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LIST_VAL9 ::= LIST_VAL9 VALOR_9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL9",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VALOR_N ::= CORCHEA FONTSI IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 styleAttributes += "font-size: "+a+";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VALOR_N ::= CORCHEA FONTFA IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    if (a.equals("Arial")) {
                      styleAttributes += "font-family: Arial, Helvetica, sans-serif;";
                  } else if (a.equals("Courier")) {
                      styleAttributes += "font-family: 'Courier New', Courier, monospace;";
                  } else if (a.equals("Verdana")) {
                      styleAttributes += "font-family: Verdana, Geneva, Tahoma, sans-serif;";
                  } else if (a.equals("sans-serif")) {
                      styleAttributes += "font-family:sans-serif;";
                  } else {
                      // Generar error si la fuente no es válida
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Fuente no válida: " + a, 
                          aleft, 
                          aright, 
                          "Verifica la fuente utilizada"
                      ));
                  } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VALOR_N ::= CORCHEA TEXTALI IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                if (a.equals("left") || a.equals("right") || a.equals("center") || a.equals("Justify")) {
                      styleAttributes += "text-align: "+a+";";
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Alineacion no valida: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica las alineaciones"
                      ));
                  }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VALOR_N ::= CORCHEA ID IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            if (a.matches("[-_$][a-zA-Z0-9_$-]*")){
                      RESULT = " id=\""+a+"\" "; addToHtml(RESULT.toString());
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Id no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica la sintaxis del id"
                      ));
                  }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VALOR_1 ::= CORCHEA ID IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                if (a.matches("[-_$][a-zA-Z0-9_$-]*")){
                      RESULT = " id=\""+a+"\" "; addToHtml(RESULT.toString());
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Id no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica la sintaxis del id"
                      ));
                  }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_1",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VALOR_1 ::= CORCHEA NAME IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " name=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_1",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VALOR_2 ::= CORCHEA HREF IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " href=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_2",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VALOR_3 ::= CORCHEA BACKG IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    if (a.matches("#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?") || 
                      a.equals("black") || 
                      a.equals("olive") || 
                      a.equals("teal") || 
                      a.equals("red") || 
                      a.equals("blue") || 
                      a.equals("maroon") || 
                      a.equals("navy") || 
                      a.equals("gray") || 
                      a.equals("lime") || 
                      a.equals("fuchsia") || 
                      a.equals("green") || 
                      a.equals("white") || 
                      a.equals("purple") || 
                      a.equals("silver") || 
                      a.equals("yellow") || 
                      a.equals("aqua")) {
                      styleAttributes += "background: " + a + ";";
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Color no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica el nombre o codigo hexa del color para Background"
                      ));
                  }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_3",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // VALOR_4 ::= CORCHEA COLOR IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                  if (a.matches("#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?") || 
                      a.equals("black") || 
                      a.equals("olive") || 
                      a.equals("teal") || 
                      a.equals("red") || 
                      a.equals("blue") || 
                      a.equals("maroon") || 
                      a.equals("navy") || 
                      a.equals("gray") || 
                      a.equals("lime") || 
                      a.equals("fuchsia") || 
                      a.equals("green") || 
                      a.equals("white") || 
                      a.equals("purple") || 
                      a.equals("silver") || 
                      a.equals("yellow") || 
                      a.equals("aqua")) {
                      styleAttributes += "color: " + a + ";";
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Color no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica el nombre o codigo hexa del color"
                      ));
                  }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_4",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // VALOR_4 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_4",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // VALOR_5 ::= CORCHEA TYPE IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                if (a.equals("text") || a.equals("number") || a.equals("radio") || a.equals("checkbox")) {
                      RESULT = " type=\""+a+"\" "; addToHtml(RESULT.toString());
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "tipos no validos: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica los Tipos"
                      ));
                  }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_5",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // VALOR_5 ::= CORCHEA NAME IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " name=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_5",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // VALOR_5 ::= CORCHEA COLOR IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    if (a.matches("#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?") || 
                      a.equals("black") || 
                      a.equals("olive") || 
                      a.equals("teal") || 
                      a.equals("red") || 
                      a.equals("blue") || 
                      a.equals("maroon") || 
                      a.equals("navy") || 
                      a.equals("gray") || 
                      a.equals("lime") || 
                      a.equals("fuchsia") || 
                      a.equals("green") || 
                      a.equals("white") || 
                      a.equals("purple") || 
                      a.equals("silver") || 
                      a.equals("yellow") || 
                      a.equals("aqua")) {
                      styleAttributes += "color: " + a + ";";
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Color no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica el nombre o codigo hexa del color"
                      ));
                  }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_5",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // VALOR_5 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_5",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // VALOR_6 ::= CORCHEA COLS IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " cols=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_6",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // VALOR_6 ::= CORCHEA ROWS IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " rows=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_6",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // VALOR_6 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_6",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // VALOR_7 ::= CORCHEA COLOR IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                if (a.matches("#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?") || 
                      a.equals("black") || 
                      a.equals("olive") || 
                      a.equals("teal") || 
                      a.equals("red") || 
                      a.equals("blue") || 
                      a.equals("maroon") || 
                      a.equals("navy") || 
                      a.equals("gray") || 
                      a.equals("lime") || 
                      a.equals("fuchsia") || 
                      a.equals("green") || 
                      a.equals("white") || 
                      a.equals("purple") || 
                      a.equals("silver") || 
                      a.equals("yellow") || 
                      a.equals("aqua")) {
                      styleAttributes += "color: " + a + ";";
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Color no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica el nombre o codigo hexa del color"
                      ));
                  }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // VALOR_7 ::= CORCHEA BACKG IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                 if (a.matches("#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?") || 
                      a.equals("black") || 
                      a.equals("olive") || 
                      a.equals("teal") || 
                      a.equals("red") || 
                      a.equals("blue") || 
                      a.equals("maroon") || 
                      a.equals("navy") || 
                      a.equals("gray") || 
                      a.equals("lime") || 
                      a.equals("fuchsia") || 
                      a.equals("green") || 
                      a.equals("white") || 
                      a.equals("purple") || 
                      a.equals("silver") || 
                      a.equals("yellow") || 
                      a.equals("aqua")) {
                      styleAttributes += "background: " + a + ";";
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Color no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica el nombre o codigo hexa del color para Background"
                      ));
                  }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // VALOR_7 ::= CORCHEA CLASS IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                if (a.equals("row") || a.equals("column")) {
                      styleAttributes += "font-family: "+a+";";
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "tipos de clase no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica los Tipos de Clases"
                      ));
                  }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // VALOR_7 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // VALOR_8 ::= CORCHEA ID IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                if (a.matches("[-_$][a-zA-Z0-9_$-]*")){
                      RESULT = " id=\""+a+"\" "; addToHtml(RESULT.toString());
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Id no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica la sintaxis del id"
                      ));
                  }
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // VALOR_8 ::= CORCHEA SRC IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " src=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // VALOR_8 ::= CORCHEA WIDTH IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " width=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // VALOR_8 ::= CORCHEA HEIGHT IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " height=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // VALOR_8 ::= CORCHEA ALT IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " alt=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // VALOR_9 ::= CORCHEA COLOR IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    if (a.matches("#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?") || 
                      a.equals("black") || 
                      a.equals("olive") || 
                      a.equals("teal") || 
                      a.equals("red") || 
                      a.equals("blue") || 
                      a.equals("maroon") || 
                      a.equals("navy") || 
                      a.equals("gray") || 
                      a.equals("lime") || 
                      a.equals("fuchsia") || 
                      a.equals("green") || 
                      a.equals("white") || 
                      a.equals("purple") || 
                      a.equals("silver") || 
                      a.equals("yellow") || 
                      a.equals("aqua")) {
                      styleAttributes += "color: " + a + ";";
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Color no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica el nombre o codigo hexa del color"
                      ));
                  }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // VALOR_9 ::= CORCHEA BACKG IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
             if (a.matches("#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?") || 
                      a.equals("black") || 
                      a.equals("olive") || 
                      a.equals("teal") || 
                      a.equals("red") || 
                      a.equals("blue") || 
                      a.equals("maroon") || 
                      a.equals("navy") || 
                      a.equals("gray") || 
                      a.equals("lime") || 
                      a.equals("fuchsia") || 
                      a.equals("green") || 
                      a.equals("white") || 
                      a.equals("purple") || 
                      a.equals("silver") || 
                      a.equals("yellow") || 
                      a.equals("aqua")) {
                      styleAttributes += "background: " + a + ";";
                  } else {
                      listaErrores.add(new Errores(
                          "SEMANTICO", 
                          "Color no valido: " + a, 
                          aleft, 
                          aright+2, 
                          "Verifica el nombre o codigo hexa del color para Background"
                      ));
                  }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // VALOR_9 ::= CORCHEA ONCLICK IGUAL CADENA CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " onclick=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // VALOR_9 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // INSTRUCCION ::= DECLA_ASIG 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // INSTRUCCION ::= ISTR 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // INSTRUCCION ::= BLOINST 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // INSTRUCCION ::= REPETIR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // INSTRUCCION ::= CICLO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // INSTRUCCION ::= IDENTIFICADOR PAR1 PAR2 CORCHEA INSTRUCCIONES CORCHEC 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // INSTRUCCION ::= LOAD PAR1 PAR2 CORCHEA INSTRUCCIONES CORCHEC 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // IMPRESION ::= FUNCSP PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
              Impresion imp = new Impresion(a.toString(), b.generarCodigo());
              String jscode = imp.interprete();
              addToHtml(jscode);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // FUNCSP ::= ASC 
            {
              Object RESULT =null;
		 RESULT = "ASC"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // FUNCSP ::= DESC 
            {
              Object RESULT =null;
		 RESULT = "DESC"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // FUNCSP ::= LETPAR 
            {
              Object RESULT =null;
		 RESULT = "LETPAR"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // FUNCSP ::= LETIMPAR 
            {
              Object RESULT =null;
		 RESULT = "LETIMPAR"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // FUNCSP ::= REVERSE 
            {
              Object RESULT =null;
		 RESULT = "REVERSE"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // FUNCSP ::= CARALE 
            {
              Object RESULT =null;
		 RESULT = "CARACTER_ALEATORIO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // FUNCSP ::= NUMALE 
            {
              Object RESULT =null;
		 RESULT = "NUM_ALEATORIO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // FUNCSP ::= ALEINF 
            {
              Object RESULT =null;
		 RESULT = "ALERT_INFO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // CSP ::= EXIT PAR1 PAR2 FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CSP",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CSP ::= REDIRECT PAR1 PAR2 FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CSP",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ASIGNACION ::= LISTA_VAR IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // DECLARACION ::= TIPOS LISTA_VAR FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // DECLARACION ::= TIPOS GLOBAL LISTA_VAR FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // LISTA_VAR ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VAR",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // LISTA_VAR ::= LISTA_VAR COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VAR",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // DECLA_ASIG ::= TIPOS LISTA_ASIG FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA_ASIG",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // DECLA_ASIG ::= TIPOS GLOBAL LISTA_ASIG FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA_ASIG",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // LISTA_ASIG ::= IDENTIFICADOR IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ASIG",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // LISTA_ASIG ::= LISTA_ASIG COMA IDENTIFICADOR IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ASIG",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // TIPOS ::= INTEGER 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.INTEGER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TIPOS ::= DECIMAL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.DECIMAL);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // TIPOS ::= STRING 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.STRING);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.CHAR);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TIPOS ::= BOOLEAN 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDato.BOOLEAN);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // GET ::= ELEMENT PAR1 CARACTER PAR2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ISTR ::= INSERT PAR1 CARACTER PAR2 FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ISTR",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // EXPRESION ::= DIFER EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // EXPRESION ::= EXPRESION POR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // EXPRESION ::= EXPRESION IGUAL IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.EQUALS, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // EXPRESION ::= EXPRESION DIFER IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.NOTEQUALS, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // EXPRESION ::= EXPRESION MENOR IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORIGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // EXPRESION ::= EXPRESION MAYOR IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORIGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORQUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORQUE, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(TipoDato.STRING), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(TipoDato.CHAR), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // EXPRESION ::= GET 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // EXPRESION ::= IDENTIFICADOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variables(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(TipoDato.INTEGER), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // EXPRESION ::= DECI 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(TipoDato.DECIMAL), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // EXPRESION ::= TRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(true, new Tipo(TipoDato.BOOLEAN), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // EXPRESION ::= FALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(false, new Tipo(TipoDato.BOOLEAN), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // LISTA_OPCIONES ::= OPCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_OPCIONES",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // LISTA_OPCIONES ::= LISTA_OPCIONES OPCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_OPCIONES",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // OPCIONES ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // OPCIONES ::= CSP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // OPCIONES ::= ISTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // BLOINST ::= INIT LLAVEA DOSPTS LISTA_OPCIONES DOSPTS LLAVEC END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOINST",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // SIF ::= IF PAR1 EXPRESION PAR2 THEN BLOINST 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // SIF ::= IF PAR1 EXPRESION PAR2 THEN BLOINST ELSE BLOINST 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // SIF ::= IF PAR1 EXPRESION PAR2 THEN BLOINST SELIF 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // SIF ::= IF PAR1 EXPRESION PAR2 THEN BLOINST SELIF ELSE BLOINST 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // SELIF ::= ELIF PAR1 EXPRESION PAR2 THEN BLOINST 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIF",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // SELIF ::= SELIF ELIF IF PAR1 EXPRESION PAR2 THEN BLOINST 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIF",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // REPETIR ::= REPEAT PAR1 EXPRESION PAR2 HUNTIL PAR1 EXPRESION PAR2 BLOINST 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REPETIR",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // CICLO ::= WHILE PAR1 EXPRESION PAR2 THENWHILE BLOINST 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLO",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
