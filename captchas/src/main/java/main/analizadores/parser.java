
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main.analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import main.excepciones.Errores;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\334\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\137\002\000\002\004\010\000\002\005\003" +
    "\000\002\005\004\000\002\140\002\000\002\006\006\000" +
    "\002\006\004\000\002\141\002\000\002\006\006\000\002" +
    "\006\004\000\002\006\005\000\002\006\005\000\002\006" +
    "\004\000\002\006\004\000\002\142\002\000\002\006\006" +
    "\000\002\006\005\000\002\006\005\000\002\143\002\000" +
    "\002\010\006\000\002\007\003\000\002\007\004\000\002" +
    "\012\003\000\002\144\002\000\002\012\006\000\002\011" +
    "\003\000\002\011\004\000\002\145\002\000\002\013\007" +
    "\000\002\014\006\000\002\015\005\000\002\016\006\000" +
    "\002\146\002\000\002\017\007\000\002\020\006\000\002" +
    "\021\005\000\002\022\006\000\002\147\002\000\002\023" +
    "\007\000\002\024\006\000\002\150\002\000\002\025\007" +
    "\000\002\026\006\000\002\151\002\000\002\027\007\000" +
    "\002\030\006\000\002\152\002\000\002\031\007\000\002" +
    "\032\006\000\002\153\002\000\002\033\007\000\002\034" +
    "\006\000\002\035\005\000\002\036\006\000\002\154\002" +
    "\000\002\037\007\000\002\040\006\000\002\155\002\000" +
    "\002\041\007\000\002\042\006\000\002\043\005\000\002" +
    "\044\006\000\002\156\002\000\002\045\007\000\002\046" +
    "\006\000\002\157\002\000\002\047\007\000\002\050\006" +
    "\000\002\160\002\000\002\051\007\000\002\052\006\000" +
    "\002\053\005\000\002\054\006\000\002\055\003\000\002" +
    "\055\002\000\002\056\003\000\002\056\002\000\002\057" +
    "\003\000\002\057\002\000\002\060\003\000\002\060\002" +
    "\000\002\061\003\000\002\061\002\000\002\062\003\000" +
    "\002\062\002\000\002\063\003\000\002\063\002\000\002" +
    "\064\003\000\002\064\002\000\002\065\003\000\002\065" +
    "\002\000\002\066\003\000\002\066\004\000\002\067\003" +
    "\000\002\067\004\000\002\070\003\000\002\070\004\000" +
    "\002\071\003\000\002\071\004\000\002\072\003\000\002" +
    "\072\004\000\002\073\003\000\002\073\004\000\002\074" +
    "\003\000\002\074\004\000\002\075\003\000\002\075\004" +
    "\000\002\076\003\000\002\076\004\000\002\110\011\000" +
    "\002\110\011\000\002\110\011\000\002\110\011\000\002" +
    "\077\011\000\002\077\011\000\002\100\011\000\002\101" +
    "\011\000\002\102\011\000\002\102\003\000\002\103\011" +
    "\000\002\103\011\000\002\103\011\000\002\103\003\000" +
    "\002\104\011\000\002\104\011\000\002\104\003\000\002" +
    "\105\011\000\002\105\011\000\002\105\011\000\002\105" +
    "\003\000\002\106\011\000\002\106\011\000\002\106\011" +
    "\000\002\106\011\000\002\106\011\000\002\107\011\000" +
    "\002\107\011\000\002\107\013\000\002\107\003\000\002" +
    "\111\003\000\002\111\004\000\002\112\003\000\002\112" +
    "\003\000\002\112\003\000\002\112\003\000\002\112\003" +
    "\000\002\112\003\000\002\112\003\000\002\112\003\000" +
    "\002\112\003\000\002\112\010\000\002\112\010\000\002" +
    "\113\007\000\002\120\003\000\002\120\003\000\002\120" +
    "\003\000\002\120\003\000\002\120\003\000\002\120\003" +
    "\000\002\120\003\000\002\120\003\000\002\124\006\000" +
    "\002\124\006\000\002\115\006\000\002\114\005\000\002" +
    "\114\006\000\002\127\003\000\002\127\005\000\002\130" +
    "\005\000\002\130\006\000\002\131\005\000\002\131\007" +
    "\000\002\116\003\000\002\116\003\000\002\116\003\000" +
    "\002\116\003\000\002\116\003\000\002\121\005\000\002" +
    "\121\005\000\002\123\010\000\002\125\011\000\002\117" +
    "\004\000\002\117\004\000\002\117\005\000\002\117\005" +
    "\000\002\117\005\000\002\117\005\000\002\117\006\000" +
    "\002\117\006\000\002\117\006\000\002\117\006\000\002" +
    "\117\005\000\002\117\005\000\002\117\005\000\002\117" +
    "\005\000\002\117\003\000\002\117\003\000\002\117\003" +
    "\000\002\117\003\000\002\117\003\000\002\117\003\000" +
    "\002\117\003\000\002\117\005\000\002\132\003\000\002" +
    "\132\004\000\002\126\003\000\002\126\003\000\002\126" +
    "\003\000\002\122\011\000\002\134\010\000\002\134\012" +
    "\000\002\134\011\000\002\134\013\000\002\133\010\000" +
    "\002\133\012\000\002\135\013\000\002\136\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u023d\000\004\013\005\001\002\000\004\002\000\001" +
    "\002\000\004\033\u022c\001\002\000\004\013\012\001\002" +
    "\000\004\002\010\001\002\000\004\002\001\001\002\000" +
    "\004\013\017\001\002\000\004\034\013\001\002\000\004" +
    "\014\014\001\002\000\004\013\uffe0\001\002\000\004\013" +
    "\u021d\001\002\000\004\013\036\001\002\000\004\036\020" +
    "\001\002\000\006\014\uffd9\025\uffd9\001\002\000\006\014" +
    "\uffb2\025\025\001\002\000\006\014\uffa1\025\uffa1\001\002" +
    "\000\006\014\uffb3\025\025\001\002\000\004\014\034\001" +
    "\002\000\004\054\026\001\002\000\004\011\027\001\002" +
    "\000\004\030\030\001\002\000\004\134\031\001\002\000" +
    "\004\030\032\001\002\000\004\026\033\001\002\000\006" +
    "\014\uff8b\025\uff8b\001\002\000\004\013\uffd8\001\002\000" +
    "\006\014\uffa0\025\uffa0\001\002\000\004\016\u0219\001\002" +
    "\000\004\013\041\001\002\000\004\013\062\001\002\000" +
    "\004\037\042\001\002\000\006\014\uffde\025\uffde\001\002" +
    "\000\006\014\uffb0\025\046\001\002\000\006\014\uffb1\025" +
    "\046\001\002\000\004\014\056\001\002\000\004\055\050" +
    "\001\002\000\006\014\uff9f\025\uff9f\001\002\000\004\011" +
    "\051\001\002\000\004\030\052\001\002\000\004\135\053" +
    "\001\002\000\004\030\054\001\002\000\004\026\055\001" +
    "\002\000\006\014\uff8a\025\uff8a\001\002\000\004\013\uffdd" +
    "\001\002\000\006\014\uff9e\025\uff9e\001\002\000\004\147" +
    "\u0216\001\002\000\004\147\u020f\001\002\000\030\040\134" +
    "\041\127\042\135\043\133\045\131\046\136\047\126\050" +
    "\124\051\125\052\130\053\132\001\002\000\004\013\u0205" +
    "\001\002\000\004\013\u0200\001\002\000\004\013\u01fc\001" +
    "\002\000\004\013\ufffc\001\002\000\006\013\u01ec\147\u01ea" +
    "\001\002\000\052\075\u0148\076\u0132\077\u014b\100\u014a\101" +
    "\u014f\102\u0136\103\u0144\104\u014d\107\u0149\110\u013d\111\u013e" +
    "\112\u0133\113\u0134\116\u0130\120\u0140\121\u013a\125\u014e\127" +
    "\u0135\133\u0145\146\u0147\001\002\000\004\013\u011c\001\002" +
    "\000\004\013\062\001\002\000\004\013\113\001\002\000" +
    "\004\013\105\001\002\000\004\147\076\001\002\000\004" +
    "\013\ufff0\001\002\000\004\013\100\001\002\000\004\016" +
    "\102\001\002\000\004\013\uffef\001\002\000\004\050\103" +
    "\001\002\000\004\014\104\001\002\000\004\013\uffbe\001" +
    "\002\000\004\016\107\001\002\000\004\013\ufff2\001\002" +
    "\000\004\046\110\001\002\000\004\014\111\001\002\000" +
    "\004\013\uffc3\001\002\000\004\013\ufff5\001\002\000\004" +
    "\016\114\001\002\000\004\042\115\001\002\000\004\014" +
    "\116\001\002\000\004\013\uffce\001\002\000\004\013\120" +
    "\001\002\000\032\016\123\040\134\041\127\042\135\043" +
    "\133\045\131\046\136\047\126\050\124\051\125\052\130" +
    "\053\132\001\002\000\004\013\ufffb\001\002\000\004\013" +
    "\ufff3\001\002\000\004\045\u0119\001\002\000\006\014\uffc0" +
    "\025\uffc0\001\002\000\006\014\uffbd\025\uffbd\001\002\000" +
    "\004\014\371\001\002\000\006\014\uffd3\025\uffd3\001\002" +
    "\000\006\014\uffba\025\uffba\001\002\000\006\014\uffc8\025" +
    "\uffc8\001\002\000\004\014\301\001\002\000\006\014\uffcd" +
    "\025\uffcd\001\002\000\006\014\uffd6\025\uffd6\001\002\000" +
    "\006\014\uffd0\025\uffd0\001\002\000\006\014\uffc5\025\uffc5" +
    "\001\002\000\006\014\uffa6\025\143\001\002\000\004\014" +
    "\203\001\002\000\006\014\uff95\025\uff95\001\002\000\006" +
    "\014\uffa7\025\143\001\002\000\014\063\144\070\147\071" +
    "\145\072\150\073\146\001\002\000\004\011\175\001\002" +
    "\000\004\011\170\001\002\000\004\011\163\001\002\000" +
    "\004\011\156\001\002\000\004\011\151\001\002\000\004" +
    "\030\152\001\002\000\004\143\153\001\002\000\004\030" +
    "\154\001\002\000\004\026\155\001\002\000\006\014\uff79" +
    "\025\uff79\001\002\000\004\030\157\001\002\000\004\134" +
    "\160\001\002\000\004\030\161\001\002\000\004\026\162" +
    "\001\002\000\006\014\uff7b\025\uff7b\001\002\000\004\030" +
    "\164\001\002\000\004\147\165\001\002\000\004\030\166" +
    "\001\002\000\004\026\167\001\002\000\006\014\uff78\025" +
    "\uff78\001\002\000\004\030\171\001\002\000\004\143\172" +
    "\001\002\000\004\030\173\001\002\000\004\026\174\001" +
    "\002\000\006\014\uff7a\025\uff7a\001\002\000\004\030\176" +
    "\001\002\000\004\146\177\001\002\000\004\030\200\001" +
    "\002\000\004\026\201\001\002\000\006\014\uff7c\025\uff7c" +
    "\001\002\000\006\014\uff94\025\uff94\001\002\000\004\013" +
    "\uffc4\001\002\000\006\014\uffaa\025\211\001\002\000\006" +
    "\014\uffab\025\211\001\002\000\004\014\256\001\002\000" +
    "\006\014\uff81\025\uff81\001\002\000\006\014\uff99\025\uff99" +
    "\001\002\000\016\057\216\060\215\061\217\063\212\065" +
    "\214\066\213\001\002\000\004\011\251\001\002\000\004" +
    "\011\244\001\002\000\004\011\237\001\002\000\004\011" +
    "\232\001\002\000\004\011\225\001\002\000\004\011\220" +
    "\001\002\000\004\030\221\001\002\000\004\140\222\001" +
    "\002\000\004\030\223\001\002\000\004\026\224\001\002" +
    "\000\006\014\uff8f\025\uff8f\001\002\000\004\030\226\001" +
    "\002\000\004\137\227\001\002\000\004\030\230\001\002" +
    "\000\004\026\231\001\002\000\006\014\uff90\025\uff90\001" +
    "\002\000\004\030\233\001\002\000\004\136\234\001\002" +
    "\000\004\030\235\001\002\000\004\026\236\001\002\000" +
    "\006\014\uff91\025\uff91\001\002\000\004\030\240\001\002" +
    "\000\004\144\241\001\002\000\004\030\242\001\002\000" +
    "\004\026\243\001\002\000\006\014\uff83\025\uff83\001\002" +
    "\000\004\030\245\001\002\000\004\144\246\001\002\000" +
    "\004\030\247\001\002\000\004\026\250\001\002\000\006" +
    "\014\uff82\025\uff82\001\002\000\004\030\252\001\002\000" +
    "\004\146\253\001\002\000\004\030\254\001\002\000\004" +
    "\026\255\001\002\000\006\014\uff8e\025\uff8e\001\002\000" +
    "\004\013\uffcf\001\002\000\006\014\uff98\025\uff98\001\002" +
    "\000\006\014\uffae\025\265\001\002\000\006\014\uffaf\025" +
    "\265\001\002\000\004\014\274\001\002\000\006\014\uff88" +
    "\025\uff88\001\002\000\006\014\uff9d\025\uff9d\001\002\000" +
    "\014\056\266\057\216\060\215\061\217\063\212\001\002" +
    "\000\004\011\267\001\002\000\004\030\270\001\002\000" +
    "\004\135\271\001\002\000\004\030\272\001\002\000\004" +
    "\026\273\001\002\000\006\014\uff89\025\uff89\001\002\000" +
    "\004\147\uffd5\001\002\000\006\014\uff9c\025\uff9c\001\002" +
    "\000\006\014\uffae\025\265\001\002\000\004\014\300\001" +
    "\002\000\004\013\uffcc\001\002\000\052\075\uffb7\076\uffb7" +
    "\077\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7\107" +
    "\uffb7\110\uffb7\111\uffb7\112\uffb7\113\uffb7\116\uffb7\120\uffb7" +
    "\121\uffb7\125\uffb7\127\uffb7\133\uffb7\146\uffb7\001\002\000" +
    "\006\014\uffa8\025\307\001\002\000\006\014\uffa9\025\307" +
    "\001\002\000\004\014\332\001\002\000\006\014\uff7d\025" +
    "\uff7d\001\002\000\006\014\uff97\025\uff97\001\002\000\020" +
    "\055\310\056\311\057\216\060\215\061\217\063\212\067" +
    "\312\001\002\000\004\011\325\001\002\000\004\011\320" +
    "\001\002\000\004\011\313\001\002\000\004\030\314\001" +
    "\002\000\004\142\315\001\002\000\004\030\316\001\002" +
    "\000\004\026\317\001\002\000\006\014\uff7e\025\uff7e\001" +
    "\002\000\004\030\321\001\002\000\004\135\322\001\002" +
    "\000\004\030\323\001\002\000\004\026\324\001\002\000" +
    "\006\014\uff80\025\uff80\001\002\000\004\030\326\001\002" +
    "\000\004\135\327\001\002\000\004\030\330\001\002\000" +
    "\004\026\331\001\002\000\006\014\uff7f\025\uff7f\001\002" +
    "\000\004\013\uffc7\001\002\000\006\014\uff96\025\uff96\001" +
    "\002\000\006\014\uffae\025\265\001\002\000\004\014\336" +
    "\001\002\000\006\013\uffb9\147\uffb9\001\002\000\006\014" +
    "\uffac\025\344\001\002\000\006\014\uffad\025\344\001\002" +
    "\000\004\014\367\001\002\000\006\014\uff84\025\uff84\001" +
    "\002\000\006\014\uff9b\025\uff9b\001\002\000\020\056\345" +
    "\057\216\060\215\061\217\062\347\063\212\064\346\001" +
    "\002\000\004\011\362\001\002\000\004\011\355\001\002" +
    "\000\004\011\350\001\002\000\004\030\351\001\002\000" +
    "\004\141\352\001\002\000\004\030\353\001\002\000\004" +
    "\026\354\001\002\000\006\014\uff87\025\uff87\001\002\000" +
    "\004\030\356\001\002\000\004\147\357\001\002\000\004" +
    "\030\360\001\002\000\004\026\361\001\002\000\006\014" +
    "\uff86\025\uff86\001\002\000\004\030\363\001\002\000\004" +
    "\135\364\001\002\000\004\030\365\001\002\000\004\026" +
    "\366\001\002\000\006\014\uff85\025\uff85\001\002\000\004" +
    "\013\uffd2\001\002\000\006\014\uff9a\025\uff9a\001\002\000" +
    "\004\013\uffc2\001\002\000\006\014\uffae\025\265\001\002" +
    "\000\004\014\374\001\002\000\004\147\uffbc\001\002\000" +
    "\006\014\uffa4\025\u0102\001\002\000\006\014\uff93\025\uff93" +
    "\001\002\000\006\014\uff74\025\uff74\001\002\000\006\014" +
    "\uffa5\025\u0102\001\002\000\004\014\u0117\001\002\000\020" +
    "\055\u0103\056\u0104\057\216\060\215\061\217\063\212\074" +
    "\u0105\001\002\000\004\011\u0112\001\002\000\004\011\u010d" +
    "\001\002\000\004\011\u0106\001\002\000\004\030\u0107\001" +
    "\002\000\004\146\u0108\001\002\000\004\004\u0109\001\002" +
    "\000\004\005\u010a\001\002\000\004\030\u010b\001\002\000" +
    "\004\026\u010c\001\002\000\006\014\uff75\025\uff75\001\002" +
    "\000\004\030\u010e\001\002\000\004\135\u010f\001\002\000" +
    "\004\030\u0110\001\002\000\004\026\u0111\001\002\000\006" +
    "\014\uff77\025\uff77\001\002\000\004\030\u0113\001\002\000" +
    "\004\135\u0114\001\002\000\004\030\u0115\001\002\000\004" +
    "\026\u0116\001\002\000\006\014\uff76\025\uff76\001\002\000" +
    "\004\147\uffbf\001\002\000\006\014\uff92\025\uff92\001\002" +
    "\000\004\014\u011a\001\002\000\004\013\uffc6\001\002\000" +
    "\004\147\u0127\001\002\000\004\044\u0122\001\002\000\004" +
    "\013\uffea\001\002\000\004\013\u0120\001\002\000\004\013" +
    "\ufff4\001\002\000\006\016\u0123\044\u0122\001\002\000\004" +
    "\013\uffe9\001\002\000\004\014\u0126\001\002\000\004\043" +
    "\u0124\001\002\000\004\014\u0125\001\002\000\004\013\uffcb" +
    "\001\002\000\004\147\uffca\001\002\000\004\013\uffec\001" +
    "\002\000\004\013\u012a\001\002\000\004\013\uffeb\001\002" +
    "\000\004\016\u012b\001\002\000\004\044\u012c\001\002\000" +
    "\004\014\u012d\001\002\000\004\013\uffc9\001\002\000\006" +
    "\011\u01e6\031\u01cf\001\002\000\056\013\uff73\026\uff73\075" +
    "\uff73\076\uff73\077\uff73\100\uff73\101\uff73\102\uff73\103\uff73" +
    "\104\uff73\107\uff73\110\uff73\111\uff73\112\uff73\113\uff73\116" +
    "\uff73\120\uff73\121\uff73\125\uff73\127\uff73\133\uff73\146\uff73" +
    "\001\002\000\004\023\u01d3\001\002\000\006\132\u01c2\146" +
    "\u01c3\001\002\000\004\004\uff64\001\002\000\006\132\uff51" +
    "\146\uff51\001\002\000\006\132\uff4f\146\uff4f\001\002\000" +
    "\004\004\u01bc\001\002\000\004\004\uff60\001\002\000\056" +
    "\013\uff70\026\uff70\075\uff70\076\uff70\077\uff70\100\uff70\101" +
    "\uff70\102\uff70\103\uff70\104\uff70\107\uff70\110\uff70\111\uff70" +
    "\112\uff70\113\uff70\116\uff70\120\uff70\121\uff70\125\uff70\127" +
    "\uff70\133\uff70\146\uff70\001\002\000\054\013\u01b7\075\u0148" +
    "\076\u0132\077\u014b\100\u014a\101\u014f\102\u0136\103\u0144\104" +
    "\u014d\107\u0149\110\u013d\111\u013e\112\u0133\113\u0134\116\u0130" +
    "\120\u0140\121\u013a\125\u014e\127\u0135\133\u0145\146\u0147\001" +
    "\002\000\056\013\uff6b\026\uff6b\075\uff6b\076\uff6b\077\uff6b" +
    "\100\uff6b\101\uff6b\102\uff6b\103\uff6b\104\uff6b\107\uff6b\110" +
    "\uff6b\111\uff6b\112\uff6b\113\uff6b\116\uff6b\120\uff6b\121\uff6b" +
    "\125\uff6b\127\uff6b\133\uff6b\146\uff6b\001\002\000\004\004" +
    "\u01a0\001\002\000\056\013\uff6e\026\uff6e\075\uff6e\076\uff6e" +
    "\077\uff6e\100\uff6e\101\uff6e\102\uff6e\103\uff6e\104\uff6e\107" +
    "\uff6e\110\uff6e\111\uff6e\112\uff6e\113\uff6e\116\uff6e\120\uff6e" +
    "\121\uff6e\125\uff6e\127\uff6e\133\uff6e\146\uff6e\001\002\000" +
    "\056\013\uff69\026\uff69\075\uff69\076\uff69\077\uff69\100\uff69" +
    "\101\uff69\102\uff69\103\uff69\104\uff69\107\uff69\110\uff69\111" +
    "\uff69\112\uff69\113\uff69\116\uff69\120\uff69\121\uff69\125\uff69" +
    "\127\uff69\133\uff69\146\uff69\001\002\000\006\132\uff4e\146" +
    "\uff4e\001\002\000\006\132\uff50\146\uff50\001\002\000\056" +
    "\013\uff6f\026\uff6f\075\uff6f\076\uff6f\077\uff6f\100\uff6f\101" +
    "\uff6f\102\uff6f\103\uff6f\104\uff6f\107\uff6f\110\uff6f\111\uff6f" +
    "\112\uff6f\113\uff6f\116\uff6f\120\uff6f\121\uff6f\125\uff6f\127" +
    "\uff6f\133\uff6f\146\uff6f\001\002\000\004\004\u019a\001\002" +
    "\000\004\004\u0196\001\002\000\056\013\uff6c\026\uff6c\075" +
    "\uff6c\076\uff6c\077\uff6c\100\uff6c\101\uff6c\102\uff6c\103\uff6c" +
    "\104\uff6c\107\uff6c\110\uff6c\111\uff6c\112\uff6c\113\uff6c\116" +
    "\uff6c\120\uff6c\121\uff6c\125\uff6c\127\uff6c\133\uff6c\146\uff6c" +
    "\001\002\000\056\013\uff6d\026\uff6d\075\uff6d\076\uff6d\077" +
    "\uff6d\100\uff6d\101\uff6d\102\uff6d\103\uff6d\104\uff6d\107\uff6d" +
    "\110\uff6d\111\uff6d\112\uff6d\113\uff6d\116\uff6d\120\uff6d\121" +
    "\uff6d\125\uff6d\127\uff6d\133\uff6d\146\uff6d\001\002\000\004" +
    "\004\uff5f\001\002\000\004\004\u0191\001\002\000\056\013" +
    "\uff6a\026\uff6a\075\uff6a\076\uff6a\077\uff6a\100\uff6a\101\uff6a" +
    "\102\uff6a\103\uff6a\104\uff6a\107\uff6a\110\uff6a\111\uff6a\112" +
    "\uff6a\113\uff6a\116\uff6a\120\uff6a\121\uff6a\125\uff6a\127\uff6a" +
    "\133\uff6a\146\uff6a\001\002\000\010\004\u018b\011\uff58\031" +
    "\uff58\001\002\000\004\004\uff65\001\002\000\006\132\uff52" +
    "\146\uff52\001\002\000\004\004\uff62\001\002\000\004\004" +
    "\uff63\001\002\000\056\013\uff71\026\uff71\075\uff71\076\uff71" +
    "\077\uff71\100\uff71\101\uff71\102\uff71\103\uff71\104\uff71\107" +
    "\uff71\110\uff71\111\uff71\112\uff71\113\uff71\116\uff71\120\uff71" +
    "\121\uff71\125\uff71\127\uff71\133\uff71\146\uff71\001\002\000" +
    "\004\004\uff5e\001\002\000\004\004\u0150\001\002\000\004" +
    "\004\uff61\001\002\000\026\004\u0155\007\u0152\021\u0157\030" +
    "\u015d\114\u0154\115\u0156\131\u015a\144\u0153\145\u0158\146\u015c" +
    "\001\002\000\034\005\uff3b\006\uff3b\007\uff3b\011\uff3b\013" +
    "\uff3b\014\uff3b\015\uff3b\017\uff3b\020\uff3b\021\uff3b\022\uff3b" +
    "\031\uff3b\045\uff3b\001\002\000\026\004\u0155\007\u0152\021" +
    "\u0157\030\u015d\114\u0154\115\u0156\131\u015a\144\u0153\145\u0158" +
    "\146\u015c\001\002\000\034\005\uff38\006\uff38\007\uff38\011" +
    "\uff38\013\uff38\014\uff38\015\uff38\017\uff38\020\uff38\021\uff38" +
    "\022\uff38\031\uff38\045\uff38\001\002\000\034\005\uff36\006" +
    "\uff36\007\uff36\011\uff36\013\uff36\014\uff36\015\uff36\017\uff36" +
    "\020\uff36\021\uff36\022\uff36\031\uff36\045\uff36\001\002\000" +
    "\026\004\u0155\007\u0152\021\u0157\030\u015d\114\u0154\115\u0156" +
    "\131\u015a\144\u0153\145\u0158\146\u015c\001\002\000\034\005" +
    "\uff35\006\uff35\007\uff35\011\uff35\013\uff35\014\uff35\015\uff35" +
    "\017\uff35\020\uff35\021\uff35\022\uff35\031\uff35\045\uff35\001" +
    "\002\000\026\004\u0155\007\u0152\021\u0157\030\u015d\114\u0154" +
    "\115\u0156\131\u015a\144\u0153\145\u0158\146\u015c\001\002\000" +
    "\034\005\uff37\006\uff37\007\uff37\011\uff37\013\uff37\014\uff37" +
    "\015\uff37\017\uff37\020\uff37\021\uff37\022\uff37\031\uff37\045" +
    "\uff37\001\002\000\034\005\uff3a\006\uff3a\007\uff3a\011\uff3a" +
    "\013\uff3a\014\uff3a\015\uff3a\017\uff3a\020\uff3a\021\uff3a\022" +
    "\uff3a\031\uff3a\045\uff3a\001\002\000\004\004\u0182\001\002" +
    "\000\030\005\u0167\006\u0166\007\u0163\011\u016a\013\u0164\014" +
    "\u0168\015\u0165\017\u016c\020\u0162\021\u016b\045\u0169\001\002" +
    "\000\034\005\uff39\006\uff39\007\uff39\011\uff39\013\uff39\014" +
    "\uff39\015\uff39\017\uff39\020\uff39\021\uff39\022\uff39\031\uff39" +
    "\045\uff39\001\002\000\006\144\u015f\147\u015e\001\002\000" +
    "\004\030\u0161\001\002\000\004\030\u0160\001\002\000\034" +
    "\005\uff4c\006\uff4c\007\uff4c\011\uff4c\013\uff4c\014\uff4c\015" +
    "\uff4c\017\uff4c\020\uff4c\021\uff4c\022\uff4c\031\uff4c\045\uff4c" +
    "\001\002\000\034\005\uff4d\006\uff4d\007\uff4d\011\uff4d\013" +
    "\uff4d\014\uff4d\015\uff4d\017\uff4d\020\uff4d\021\uff4d\022\uff4d" +
    "\031\uff4d\045\uff4d\001\002\000\026\004\u0155\007\u0152\021" +
    "\u0157\030\u015d\114\u0154\115\u0156\131\u015a\144\u0153\145\u0158" +
    "\146\u015c\001\002\000\026\004\u0155\007\u0152\021\u0157\030" +
    "\u015d\114\u0154\115\u0156\131\u015a\144\u0153\145\u0158\146\u015c" +
    "\001\002\000\030\004\u0155\007\u0152\011\u017d\021\u0157\030" +
    "\u015d\114\u0154\115\u0156\131\u015a\144\u0153\145\u0158\146\u015c" +
    "\001\002\000\026\004\u0155\007\u0152\021\u0157\030\u015d\114" +
    "\u0154\115\u0156\131\u015a\144\u0153\145\u0158\146\u015c\001\002" +
    "\000\026\004\u0155\007\u0152\021\u0157\030\u015d\114\u0154\115" +
    "\u0156\131\u015a\144\u0153\145\u0158\146\u015c\001\002\000\004" +
    "\126\u0176\001\002\000\030\004\u0155\007\u0152\011\u0173\021" +
    "\u0157\030\u015d\114\u0154\115\u0156\131\u015a\144\u0153\145\u0158" +
    "\146\u015c\001\002\000\026\004\u0155\007\u0152\021\u0157\030" +
    "\u015d\114\u0154\115\u0156\131\u015a\144\u0153\145\u0158\146\u015c" +
    "\001\002\000\004\011\u0170\001\002\000\004\011\u016e\001" +
    "\002\000\026\004\u0155\007\u0152\021\u0157\030\u015d\114\u0154" +
    "\115\u0156\131\u015a\144\u0153\145\u0158\146\u015c\001\002\000" +
    "\034\005\uff3d\006\u0166\007\u0163\011\uff3d\013\u0164\014\u0168" +
    "\015\u0165\017\uff3d\020\uff3d\021\uff3d\022\uff3d\031\uff3d\045" +
    "\u0169\001\002\000\026\004\u0155\007\u0152\021\u0157\030\u015d" +
    "\114\u0154\115\u0156\131\u015a\144\u0153\145\u0158\146\u015c\001" +
    "\002\000\034\005\uff42\006\u0166\007\u0163\011\uff42\013\uff42" +
    "\014\uff42\015\u0165\017\uff42\020\uff42\021\uff42\022\uff42\031" +
    "\uff42\045\u0169\001\002\000\026\004\u0155\007\u0152\021\u0157" +
    "\030\u015d\114\u0154\115\u0156\131\u015a\144\u0153\145\u0158\146" +
    "\u015c\001\002\000\034\005\uff43\006\u0166\007\u0163\011\uff43" +
    "\013\uff43\014\uff43\015\u0165\017\uff43\020\uff43\021\uff43\022" +
    "\uff43\031\uff43\045\u0169\001\002\000\034\005\uff44\006\uff44" +
    "\007\uff44\011\uff44\013\uff44\014\uff44\015\uff44\017\uff44\020" +
    "\uff44\021\uff44\022\uff44\031\uff44\045\uff44\001\002\000\026" +
    "\004\u0155\007\u0152\021\u0157\030\u015d\114\u0154\115\u0156\131" +
    "\u015a\144\u0153\145\u0158\146\u015c\001\002\000\034\005\uff3e" +
    "\006\u0166\007\u0163\011\uff3e\013\uff3e\014\uff3e\015\u0165\017" +
    "\uff3e\020\uff3e\021\uff3e\022\uff3e\031\uff3e\045\u0169\001\002" +
    "\000\034\005\uff40\006\u0166\007\u0163\011\uff40\013\uff40\014" +
    "\uff40\015\u0165\017\uff40\020\uff40\021\uff40\022\uff40\031\uff40" +
    "\045\u0169\001\002\000\004\004\u0177\001\002\000\026\004" +
    "\u0155\007\u0152\021\u0157\030\u015d\114\u0154\115\u0156\131\u015a" +
    "\144\u0153\145\u0158\146\u015c\001\002\000\030\005\u0179\006" +
    "\u0166\007\u0163\011\u016a\013\u0164\014\u0168\015\u0165\017\u016c" +
    "\020\u0162\021\u016b\045\u0169\001\002\000\004\116\u0130\001" +
    "\002\000\056\013\uff27\026\uff27\075\uff27\076\uff27\077\uff27" +
    "\100\uff27\101\uff27\102\uff27\103\uff27\104\uff27\107\uff27\110" +
    "\uff27\111\uff27\112\uff27\113\uff27\116\uff27\120\uff27\121\uff27" +
    "\125\uff27\127\uff27\133\uff27\146\uff27\001\002\000\034\005" +
    "\uff47\006\uff47\007\uff47\011\uff47\013\uff47\014\uff47\015\u0165" +
    "\017\uff47\020\uff47\021\uff47\022\uff47\031\uff47\045\u0169\001" +
    "\002\000\034\005\uff45\006\uff45\007\uff45\011\uff45\013\uff45" +
    "\014\uff45\015\uff45\017\uff45\020\uff45\021\uff45\022\uff45\031" +
    "\uff45\045\uff45\001\002\000\026\004\u0155\007\u0152\021\u0157" +
    "\030\u015d\114\u0154\115\u0156\131\u015a\144\u0153\145\u0158\146" +
    "\u015c\001\002\000\034\005\uff3f\006\u0166\007\u0163\011\uff3f" +
    "\013\uff3f\014\uff3f\015\u0165\017\uff3f\020\uff3f\021\uff3f\022" +
    "\uff3f\031\uff3f\045\u0169\001\002\000\034\005\uff41\006\u0166" +
    "\007\u0163\011\uff41\013\uff41\014\uff41\015\u0165\017\uff41\020" +
    "\uff41\021\uff41\022\uff41\031\uff41\045\u0169\001\002\000\034" +
    "\005\uff46\006\uff46\007\uff46\011\uff46\013\uff46\014\uff46\015" +
    "\u0165\017\uff46\020\uff46\021\uff46\022\uff46\031\uff46\045\u0169" +
    "\001\002\000\034\005\uff3c\006\u0166\007\u0163\011\uff3c\013" +
    "\u0164\014\u0168\015\u0165\017\uff3c\020\uff3c\021\uff3c\022\uff3c" +
    "\031\uff3c\045\u0169\001\002\000\004\032\u0183\001\002\000" +
    "\004\146\u0184\001\002\000\004\032\u0185\001\002\000\004" +
    "\005\u0186\001\002\000\034\005\uff4b\006\uff4b\007\uff4b\011" +
    "\uff4b\013\uff4b\014\uff4b\015\uff4b\017\uff4b\020\uff4b\021\uff4b" +
    "\022\uff4b\031\uff4b\045\uff4b\001\002\000\034\005\uff48\006" +
    "\u0166\007\u0163\011\uff48\013\u0164\014\u0168\015\u0165\017\uff48" +
    "\020\uff48\021\uff48\022\uff48\031\uff48\045\u0169\001\002\000" +
    "\030\005\u0189\006\u0166\007\u0163\011\u016a\013\u0164\014\u0168" +
    "\015\u0165\017\u016c\020\u0162\021\u016b\045\u0169\001\002\000" +
    "\034\005\uff34\006\uff34\007\uff34\011\uff34\013\uff34\014\uff34" +
    "\015\uff34\017\uff34\020\uff34\021\uff34\022\uff34\031\uff34\045" +
    "\uff34\001\002\000\034\005\uff49\006\uff49\007\uff49\011\uff49" +
    "\013\uff49\014\uff49\015\uff49\017\uff49\020\uff49\021\uff49\022" +
    "\uff49\031\uff49\045\uff49\001\002\000\004\005\u018c\001\002" +
    "\000\004\025\u018d\001\002\000\052\075\u0148\076\u0132\077" +
    "\u014b\100\u014a\101\u014f\102\u0136\103\u0144\104\u014d\107\u0149" +
    "\110\u013d\111\u013e\112\u0133\113\u0134\116\u0130\120\u0140\121" +
    "\u013a\125\u014e\127\u0135\133\u0145\146\u0147\001\002\000\054" +
    "\026\u0190\075\u0148\076\u0132\077\u014b\100\u014a\101\u014f\102" +
    "\u0136\103\u0144\104\u014d\107\u0149\110\u013d\111\u013e\112\u0133" +
    "\113\u0134\116\u0130\120\u0140\121\u013a\125\u014e\127\u0135\133" +
    "\u0145\146\u0147\001\002\000\056\013\uff72\026\uff72\075\uff72" +
    "\076\uff72\077\uff72\100\uff72\101\uff72\102\uff72\103\uff72\104" +
    "\uff72\107\uff72\110\uff72\111\uff72\112\uff72\113\uff72\116\uff72" +
    "\120\uff72\121\uff72\125\uff72\127\uff72\133\uff72\146\uff72\001" +
    "\002\000\056\013\uff68\026\uff68\075\uff68\076\uff68\077\uff68" +
    "\100\uff68\101\uff68\102\uff68\103\uff68\104\uff68\107\uff68\110" +
    "\uff68\111\uff68\112\uff68\113\uff68\116\uff68\120\uff68\121\uff68" +
    "\125\uff68\127\uff68\133\uff68\146\uff68\001\002\000\004\005" +
    "\u0192\001\002\000\004\025\u0193\001\002\000\052\075\u0148" +
    "\076\u0132\077\u014b\100\u014a\101\u014f\102\u0136\103\u0144\104" +
    "\u014d\107\u0149\110\u013d\111\u013e\112\u0133\113\u0134\116\u0130" +
    "\120\u0140\121\u013a\125\u014e\127\u0135\133\u0145\146\u0147\001" +
    "\002\000\054\026\u0195\075\u0148\076\u0132\077\u014b\100\u014a" +
    "\101\u014f\102\u0136\103\u0144\104\u014d\107\u0149\110\u013d\111" +
    "\u013e\112\u0133\113\u0134\116\u0130\120\u0140\121\u013a\125\u014e" +
    "\127\u0135\133\u0145\146\u0147\001\002\000\056\013\uff67\026" +
    "\uff67\075\uff67\076\uff67\077\uff67\100\uff67\101\uff67\102\uff67" +
    "\103\uff67\104\uff67\107\uff67\110\uff67\111\uff67\112\uff67\113" +
    "\uff67\116\uff67\120\uff67\121\uff67\125\uff67\127\uff67\133\uff67" +
    "\146\uff67\001\002\000\026\004\u0155\007\u0152\021\u0157\030" +
    "\u015d\114\u0154\115\u0156\131\u015a\144\u0153\145\u0158\146\u015c" +
    "\001\002\000\030\005\u0198\006\u0166\007\u0163\011\u016a\013" +
    "\u0164\014\u0168\015\u0165\017\u016c\020\u0162\021\u016b\045\u0169" +
    "\001\002\000\004\022\u0199\001\002\000\064\013\uff66\026" +
    "\uff66\027\uff66\075\uff66\076\uff66\077\uff66\100\uff66\101\uff66" +
    "\102\uff66\103\uff66\104\uff66\105\uff66\106\uff66\107\uff66\110" +
    "\uff66\111\uff66\112\uff66\113\uff66\116\uff66\120\uff66\121\uff66" +
    "\125\uff66\127\uff66\133\uff66\146\uff66\001\002\000\004\032" +
    "\u019b\001\002\000\004\146\u019c\001\002\000\004\032\u019d" +
    "\001\002\000\004\005\u019e\001\002\000\004\022\u019f\001" +
    "\002\000\064\013\uff4a\026\uff4a\027\uff4a\075\uff4a\076\uff4a" +
    "\077\uff4a\100\uff4a\101\uff4a\102\uff4a\103\uff4a\104\uff4a\105" +
    "\uff4a\106\uff4a\107\uff4a\110\uff4a\111\uff4a\112\uff4a\113\uff4a" +
    "\116\uff4a\120\uff4a\121\uff4a\125\uff4a\127\uff4a\133\uff4a\146" +
    "\uff4a\001\002\000\026\004\u0155\007\u0152\021\u0157\030\u015d" +
    "\114\u0154\115\u0156\131\u015a\144\u0153\145\u0158\146\u015c\001" +
    "\002\000\030\005\u01a2\006\u0166\007\u0163\011\u016a\013\u0164" +
    "\014\u0168\015\u0165\017\u016c\020\u0162\021\u016b\045\u0169\001" +
    "\002\000\004\122\u01a3\001\002\000\004\116\u0130\001\002" +
    "\000\062\013\uff2d\026\uff2d\075\uff2d\076\uff2d\077\uff2d\100" +
    "\uff2d\101\uff2d\102\uff2d\103\uff2d\104\uff2d\107\uff2d\110\uff2d" +
    "\111\uff2d\112\uff2d\113\uff2d\116\uff2d\120\uff2d\121\uff2d\123" +
    "\u01a5\124\u01a6\125\uff2d\127\uff2d\133\uff2d\146\uff2d\001\002" +
    "\000\004\116\u0130\001\002\000\004\004\u01b1\001\002\000" +
    "\062\013\uff2b\026\uff2b\075\uff2b\076\uff2b\077\uff2b\100\uff2b" +
    "\101\uff2b\102\uff2b\103\uff2b\104\uff2b\107\uff2b\110\uff2b\111" +
    "\uff2b\112\uff2b\113\uff2b\116\uff2b\120\uff2b\121\uff2b\123\u01a8" +
    "\124\u01a9\125\uff2b\127\uff2b\133\uff2b\146\uff2b\001\002\000" +
    "\004\116\u0130\001\002\000\004\121\u01aa\001\002\000\004" +
    "\004\u01ab\001\002\000\026\004\u0155\007\u0152\021\u0157\030" +
    "\u015d\114\u0154\115\u0156\131\u015a\144\u0153\145\u0158\146\u015c" +
    "\001\002\000\030\005\u01ad\006\u0166\007\u0163\011\u016a\013" +
    "\u0164\014\u0168\015\u0165\017\u016c\020\u0162\021\u016b\045\u0169" +
    "\001\002\000\004\122\u01ae\001\002\000\004\116\u0130\001" +
    "\002\000\062\013\uff28\026\uff28\075\uff28\076\uff28\077\uff28" +
    "\100\uff28\101\uff28\102\uff28\103\uff28\104\uff28\107\uff28\110" +
    "\uff28\111\uff28\112\uff28\113\uff28\116\uff28\120\uff28\121\uff28" +
    "\123\uff28\124\uff28\125\uff28\127\uff28\133\uff28\146\uff28\001" +
    "\002\000\056\013\uff2a\026\uff2a\075\uff2a\076\uff2a\077\uff2a" +
    "\100\uff2a\101\uff2a\102\uff2a\103\uff2a\104\uff2a\107\uff2a\110" +
    "\uff2a\111\uff2a\112\uff2a\113\uff2a\116\uff2a\120\uff2a\121\uff2a" +
    "\125\uff2a\127\uff2a\133\uff2a\146\uff2a\001\002\000\026\004" +
    "\u0155\007\u0152\021\u0157\030\u015d\114\u0154\115\u0156\131\u015a" +
    "\144\u0153\145\u0158\146\u015c\001\002\000\030\005\u01b3\006" +
    "\u0166\007\u0163\011\u016a\013\u0164\014\u0168\015\u0165\017\u016c" +
    "\020\u0162\021\u016b\045\u0169\001\002\000\004\122\u01b4\001" +
    "\002\000\004\116\u0130\001\002\000\062\013\uff29\026\uff29" +
    "\075\uff29\076\uff29\077\uff29\100\uff29\101\uff29\102\uff29\103" +
    "\uff29\104\uff29\107\uff29\110\uff29\111\uff29\112\uff29\113\uff29" +
    "\116\uff29\120\uff29\121\uff29\123\uff29\124\uff29\125\uff29\127" +
    "\uff29\133\uff29\146\uff29\001\002\000\056\013\uff2c\026\uff2c" +
    "\075\uff2c\076\uff2c\077\uff2c\100\uff2c\101\uff2c\102\uff2c\103" +
    "\uff2c\104\uff2c\107\uff2c\110\uff2c\111\uff2c\112\uff2c\113\uff2c" +
    "\116\uff2c\120\uff2c\121\uff2c\125\uff2c\127\uff2c\133\uff2c\146" +
    "\uff2c\001\002\000\004\016\u01b9\001\002\000\004\013\uffed" +
    "\001\002\000\004\053\u01ba\001\002\000\004\014\u01bb\001" +
    "\002\000\004\013\uffb6\001\002\000\026\004\u0155\007\u0152" +
    "\021\u0157\030\u015d\114\u0154\115\u0156\131\u015a\144\u0153\145" +
    "\u0158\146\u015c\001\002\000\030\005\u01be\006\u0166\007\u0163" +
    "\011\u016a\013\u0164\014\u0168\015\u0165\017\u016c\020\u0162\021" +
    "\u016b\045\u0169\001\002\000\004\130\u01bf\001\002\000\004" +
    "\116\u0130\001\002\000\056\013\uff26\026\uff26\075\uff26\076" +
    "\uff26\077\uff26\100\uff26\101\uff26\102\uff26\103\uff26\104\uff26" +
    "\107\uff26\110\uff26\111\uff26\112\uff26\113\uff26\116\uff26\120" +
    "\uff26\121\uff26\125\uff26\127\uff26\133\uff26\146\uff26\001\002" +
    "\000\006\022\u01d2\031\u01cf\001\002\000\004\146\u01c3\001" +
    "\002\000\010\011\u01ca\022\uff58\031\uff58\001\002\000\006" +
    "\022\u01c6\031\u01c5\001\002\000\004\146\u01c7\001\002\000" +
    "\056\013\uff56\026\uff56\075\uff56\076\uff56\077\uff56\100\uff56" +
    "\101\uff56\102\uff56\103\uff56\104\uff56\107\uff56\110\uff56\111" +
    "\uff56\112\uff56\113\uff56\116\uff56\120\uff56\121\uff56\125\uff56" +
    "\127\uff56\133\uff56\146\uff56\001\002\000\004\011\u01c8\001" +
    "\002\000\026\004\u0155\007\u0152\021\u0157\030\u015d\114\u0154" +
    "\115\u0156\131\u015a\144\u0153\145\u0158\146\u015c\001\002\000" +
    "\032\006\u0166\007\u0163\011\u016a\013\u0164\014\u0168\015\u0165" +
    "\017\u016c\020\u0162\021\u016b\022\uff53\031\uff53\045\u0169\001" +
    "\002\000\026\004\u0155\007\u0152\021\u0157\030\u015d\114\u0154" +
    "\115\u0156\131\u015a\144\u0153\145\u0158\146\u015c\001\002\000" +
    "\032\006\u0166\007\u0163\011\u016a\013\u0164\014\u0168\015\u0165" +
    "\017\u016c\020\u0162\021\u016b\022\uff54\031\uff54\045\u0169\001" +
    "\002\000\006\022\u01d0\031\u01cf\001\002\000\006\022\u01ce" +
    "\031\u01c5\001\002\000\056\013\uff55\026\uff55\075\uff55\076" +
    "\uff55\077\uff55\100\uff55\101\uff55\102\uff55\103\uff55\104\uff55" +
    "\107\uff55\110\uff55\111\uff55\112\uff55\113\uff55\116\uff55\120" +
    "\uff55\121\uff55\125\uff55\127\uff55\133\uff55\146\uff55\001\002" +
    "\000\004\146\u01d1\001\002\000\056\013\uff59\026\uff59\075" +
    "\uff59\076\uff59\077\uff59\100\uff59\101\uff59\102\uff59\103\uff59" +
    "\104\uff59\107\uff59\110\uff59\111\uff59\112\uff59\113\uff59\116" +
    "\uff59\120\uff59\121\uff59\125\uff59\127\uff59\133\uff59\146\uff59" +
    "\001\002\000\010\011\uff57\022\uff57\031\uff57\001\002\000" +
    "\056\013\uff5a\026\uff5a\075\uff5a\076\uff5a\077\uff5a\100\uff5a" +
    "\101\uff5a\102\uff5a\103\uff5a\104\uff5a\107\uff5a\110\uff5a\111" +
    "\uff5a\112\uff5a\113\uff5a\116\uff5a\120\uff5a\121\uff5a\125\uff5a" +
    "\127\uff5a\133\uff5a\146\uff5a\001\002\000\004\027\u01d4\001" +
    "\002\000\030\075\u0148\076\u0132\077\u014b\100\u014a\101\u014f" +
    "\102\u0136\103\u0144\104\u014d\105\u01d5\106\u01db\120\u0140\001" +
    "\002\000\004\004\u01e3\001\002\000\032\027\uff2f\075\uff2f" +
    "\076\uff2f\077\uff2f\100\uff2f\101\uff2f\102\uff2f\103\uff2f\104" +
    "\uff2f\105\uff2f\106\uff2f\120\uff2f\001\002\000\032\027\uff30" +
    "\075\uff30\076\uff30\077\uff30\100\uff30\101\uff30\102\uff30\103" +
    "\uff30\104\uff30\105\uff30\106\uff30\120\uff30\001\002\000\032" +
    "\027\uff33\075\uff33\076\uff33\077\uff33\100\uff33\101\uff33\102" +
    "\uff33\103\uff33\104\uff33\105\uff33\106\uff33\120\uff33\001\002" +
    "\000\032\027\u01e0\075\u0148\076\u0132\077\u014b\100\u014a\101" +
    "\u014f\102\u0136\103\u0144\104\u014d\105\u01d5\106\u01db\120\u0140" +
    "\001\002\000\032\027\uff31\075\uff31\076\uff31\077\uff31\100" +
    "\uff31\101\uff31\102\uff31\103\uff31\104\uff31\105\uff31\106\uff31" +
    "\120\uff31\001\002\000\004\004\u01dc\001\002\000\004\005" +
    "\u01dd\001\002\000\004\022\u01de\001\002\000\032\027\uff5c" +
    "\075\uff5c\076\uff5c\077\uff5c\100\uff5c\101\uff5c\102\uff5c\103" +
    "\uff5c\104\uff5c\105\uff5c\106\uff5c\120\uff5c\001\002\000\032" +
    "\027\uff32\075\uff32\076\uff32\077\uff32\100\uff32\101\uff32\102" +
    "\uff32\103\uff32\104\uff32\105\uff32\106\uff32\120\uff32\001\002" +
    "\000\004\024\u01e1\001\002\000\004\117\u01e2\001\002\000" +
    "\062\013\uff2e\026\uff2e\075\uff2e\076\uff2e\077\uff2e\100\uff2e" +
    "\101\uff2e\102\uff2e\103\uff2e\104\uff2e\107\uff2e\110\uff2e\111" +
    "\uff2e\112\uff2e\113\uff2e\116\uff2e\120\uff2e\121\uff2e\123\uff2e" +
    "\124\uff2e\125\uff2e\127\uff2e\133\uff2e\146\uff2e\001\002\000" +
    "\004\005\u01e4\001\002\000\004\022\u01e5\001\002\000\032" +
    "\027\uff5d\075\uff5d\076\uff5d\077\uff5d\100\uff5d\101\uff5d\102" +
    "\uff5d\103\uff5d\104\uff5d\105\uff5d\106\uff5d\120\uff5d\001\002" +
    "\000\026\004\u0155\007\u0152\021\u0157\030\u015d\114\u0154\115" +
    "\u0156\131\u015a\144\u0153\145\u0158\146\u015c\001\002\000\030" +
    "\006\u0166\007\u0163\011\u016a\013\u0164\014\u0168\015\u0165\017" +
    "\u016c\020\u0162\021\u016b\022\u01e8\045\u0169\001\002\000\056" +
    "\013\uff5b\026\uff5b\075\uff5b\076\uff5b\077\uff5b\100\uff5b\101" +
    "\uff5b\102\uff5b\103\uff5b\104\uff5b\107\uff5b\110\uff5b\111\uff5b" +
    "\112\uff5b\113\uff5b\116\uff5b\120\uff5b\121\uff5b\125\uff5b\127" +
    "\uff5b\133\uff5b\146\uff5b\001\002\000\006\013\u01f6\147\u01ea" +
    "\001\002\000\006\013\uffe8\147\uffe8\001\002\000\004\147" +
    "\u01ee\001\002\000\004\040\134\001\002\000\006\013\uffe5" +
    "\147\uffe5\001\002\000\004\013\uffe7\001\002\000\004\013" +
    "\u01f0\001\002\000\004\016\u01f2\001\002\000\006\013\uffe6" +
    "\147\uffe6\001\002\000\004\040\u01f3\001\002\000\004\014" +
    "\u01f4\001\002\000\006\013\uffd4\147\uffd4\001\002\000\004" +
    "\013\uffee\001\002\000\006\016\u01f8\040\134\001\002\000" +
    "\006\013\uffe4\147\uffe4\001\002\000\004\052\u01f9\001\002" +
    "\000\004\014\u01fa\001\002\000\004\013\uffb8\001\002\000" +
    "\004\013\ufff1\001\002\000\004\016\u01fd\001\002\000\004" +
    "\047\u01fe\001\002\000\004\014\u01ff\001\002\000\004\013" +
    "\uffc1\001\002\000\004\016\u0202\001\002\000\004\013\ufff8" +
    "\001\002\000\004\041\u0203\001\002\000\004\014\u0204\001" +
    "\002\000\004\013\uffd1\001\002\000\032\016\u020c\040\134" +
    "\041\127\042\135\043\133\045\131\046\136\047\126\050" +
    "\124\051\125\052\130\053\132\001\002\000\004\013\u0208" +
    "\001\002\000\004\002\uffff\001\002\000\004\016\u0209\001" +
    "\002\000\004\033\u020a\001\002\000\004\014\u020b\001\002" +
    "\000\004\002\uffe1\001\002\000\004\037\u020d\001\002\000" +
    "\004\014\u020e\001\002\000\004\013\uffdc\001\002\000\004" +
    "\013\ufffa\001\002\000\004\013\u0212\001\002\000\004\013" +
    "\ufff9\001\002\000\004\016\u0213\001\002\000\004\051\u0214" +
    "\001\002\000\004\014\u0215\001\002\000\004\013\uffbb\001" +
    "\002\000\004\013\ufff7\001\002\000\004\013\u01f0\001\002" +
    "\000\004\013\ufff6\001\002\000\004\034\u021a\001\002\000" +
    "\004\014\u021b\001\002\000\004\013\uffdf\001\002\000\004" +
    "\013\u0222\001\002\000\004\016\u021e\001\002\000\004\036" +
    "\u021f\001\002\000\004\014\u0220\001\002\000\004\013\uffd7" +
    "\001\002\000\004\147\u0225\001\002\000\004\035\u0223\001" +
    "\002\000\004\014\u0224\001\002\000\004\147\uffdb\001\002" +
    "\000\004\013\ufffe\001\002\000\004\013\u0228\001\002\000" +
    "\004\013\ufffd\001\002\000\004\016\u0229\001\002\000\004" +
    "\035\u022a\001\002\000\004\014\u022b\001\002\000\004\013" +
    "\uffda\001\002\000\006\014\uffe3\025\uffe3\001\002\000\006" +
    "\014\uffb4\025\u0231\001\002\000\006\014\uffa3\025\uffa3\001" +
    "\002\000\006\014\uffb5\025\u0231\001\002\000\004\014\u023e" +
    "\001\002\000\006\063\u0232\064\u0233\001\002\000\004\011" +
    "\u0239\001\002\000\004\011\u0234\001\002\000\004\030\u0235" +
    "\001\002\000\004\147\u0236\001\002\000\004\030\u0237\001" +
    "\002\000\004\026\u0238\001\002\000\006\014\uff8c\025\uff8c" +
    "\001\002\000\004\030\u023a\001\002\000\004\146\u023b\001" +
    "\002\000\004\030\u023c\001\002\000\004\026\u023d\001\002" +
    "\000\006\014\uff8d\025\uff8d\001\002\000\004\013\uffe2\001" +
    "\002\000\006\014\uffa2\025\uffa2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u023d\000\010\002\006\003\003\013\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\015\023" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u021b\001\001\000\004\016\036\001" +
    "\001\000\002\001\001\000\004\147\020\001\001\000\010" +
    "\056\023\067\022\100\021\001\001\000\002\001\001\000" +
    "\004\100\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\037\001\001\000\034\005\062\006\065\025\057\027\063" +
    "\031\072\033\070\037\071\041\073\043\064\045\074\047" +
    "\060\051\066\053\067\001\001\000\002\001\001\000\004" +
    "\146\042\001\001\000\010\057\044\070\043\101\046\001" +
    "\001\000\004\101\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\006\120\020\u0205\025\057\027\063\031\072\033\070\037" +
    "\071\041\073\043\064\045\074\047\060\051\066\053\067" +
    "\001\001\000\004\030\u0200\001\001\000\004\044\u01fa\001" +
    "\001\000\002\001\001\000\010\011\u01e8\012\u01ec\025\u01ea" +
    "\001\001\000\036\111\u0137\112\u012e\113\u014b\114\u0136\115" +
    "\u013e\116\u0130\120\u0140\122\u0141\125\u0142\127\u012d\130\u013a" +
    "\134\u0138\135\u0145\136\u013b\001\001\000\010\007\u011d\010" +
    "\u011c\035\u011a\001\001\000\034\005\116\006\065\025\057" +
    "\027\063\031\072\033\070\037\071\041\073\043\064\045" +
    "\074\047\060\051\066\053\067\001\001\000\004\032\111" +
    "\001\001\000\004\042\105\001\001\000\002\001\001\000" +
    "\004\142\076\001\001\000\004\046\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\006\120\025\057\027" +
    "\063\031\072\033\070\037\071\040\121\041\073\043\064" +
    "\045\074\047\060\051\066\053\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\156\374\001\001\000\004\157\371\001\001\000" +
    "\002\001\001\000\004\151\336\001\001\000\004\160\333" +
    "\001\001\000\004\154\301\001\001\000\002\001\001\000" +
    "\004\153\275\001\001\000\004\150\257\001\001\000\004" +
    "\152\203\001\001\000\004\155\136\001\001\000\010\064" +
    "\137\075\141\106\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\106\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\062" +
    "\205\073\204\104\207\110\206\001\001\000\006\104\256" +
    "\110\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\060\261\071\260\102\263\110\262" +
    "\001\001\000\006\102\274\110\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\060\276\071\260\102" +
    "\263\110\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\063\303\074\302\105\305\110" +
    "\304\001\001\000\006\105\332\110\304\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\060\334\071\260\102\263\110\262" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\061" +
    "\340\072\337\103\342\110\341\001\001\000\006\103\367" +
    "\110\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\060\372\071\260\102\263\110\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\065\u0100\076\377" +
    "\107\375\110\376\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\107\u0117\110\376\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\u0120\034" +
    "\u011e\035\u011a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\143\u0127\001\001\000\004\036\u0128\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\127\u01c0\131\u01c3\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\054\u01b7" +
    "\112\u018e\113\u014b\114\u0136\115\u013e\116\u0130\120\u0140\122" +
    "\u0141\125\u0142\127\u012d\130\u013a\134\u0138\135\u0145\136\u013b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\117\u015a\121\u0150\123\u0158\001\001" +
    "\000\002\001\001\000\010\117\u0189\121\u0150\123\u0158\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\117\u0187" +
    "\121\u0150\123\u0158\001\001\000\002\001\001\000\010\117" +
    "\u0186\121\u0150\123\u0158\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\117\u0180\121" +
    "\u0150\123\u0158\001\001\000\010\117\u017f\121\u0150\123\u0158" +
    "\001\001\000\010\117\u017d\121\u0150\123\u0158\001\001\000" +
    "\010\117\u017b\121\u0150\123\u0158\001\001\000\010\117\u017a" +
    "\121\u0150\123\u0158\001\001\000\002\001\001\000\010\117" +
    "\u0173\121\u0150\123\u0158\001\001\000\010\117\u0171\121\u0150" +
    "\123\u0158\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\117\u016c\121\u0150\123\u0158\001\001\000\002\001\001" +
    "\000\010\117\u016e\121\u0150\123\u0158\001\001\000\002\001" +
    "\001\000\010\117\u0170\121\u0150\123\u0158\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\117\u0174\121\u0150\123" +
    "\u0158\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\117\u0177\121\u0150\123\u0158\001\001\000" +
    "\002\001\001\000\004\122\u0179\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\117\u017e\121" +
    "\u0150\123\u0158\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\111\u018d\112\u012e\113\u014b\114\u0136\115\u013e\116" +
    "\u0130\120\u0140\122\u0141\125\u0142\127\u012d\130\u013a\134\u0138" +
    "\135\u0145\136\u013b\001\001\000\034\112\u018e\113\u014b\114" +
    "\u0136\115\u013e\116\u0130\120\u0140\122\u0141\125\u0142\127\u012d" +
    "\130\u013a\134\u0138\135\u0145\136\u013b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\111\u0193\112\u012e\113\u014b\114\u0136\115\u013e\116" +
    "\u0130\120\u0140\122\u0141\125\u0142\127\u012d\130\u013a\134\u0138" +
    "\135\u0145\136\u013b\001\001\000\034\112\u018e\113\u014b\114" +
    "\u0136\115\u013e\116\u0130\120\u0140\122\u0141\125\u0142\127\u012d" +
    "\130\u013a\134\u0138\135\u0145\136\u013b\001\001\000\002\001" +
    "\001\000\010\117\u0196\121\u0150\123\u0158\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\117\u01a0\121" +
    "\u0150\123\u0158\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\122\u01a3\001\001\000\004\133\u01a6\001\001\000" +
    "\004\122\u01b5\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\122\u01af\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\117\u01ab\121\u0150\123\u0158\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\122\u01ae\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\117\u01b1\121\u0150" +
    "\123\u0158\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\122\u01b4\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\117\u01bc\121\u0150" +
    "\123\u0158\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\122\u01bf\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\127\u01cb\131\u01cc\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\117\u01c8\121\u0150\123\u0158\001\001\000" +
    "\002\001\001\000\010\117\u01ca\121\u0150\123\u0158\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\113" +
    "\u01d9\120\u0140\124\u01d6\125\u01d5\126\u01d7\132\u01d8\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\113\u01d9\120\u0140\124\u01d6\125\u01d5" +
    "\126\u01de\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\117\u01e6\121\u0150\123\u0158\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\u01f6\025\u01ea\052\u01f4" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\144\u01ee\001\001\000\004" +
    "\026\u01f0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\u0206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\140\u020f\001\001\000\004\050\u0210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\141\u0216\001\001\000" +
    "\004\026\u0217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u0220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\137\u0225\001\001" +
    "\000\004\022\u0226\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\145\u022c\001\001\000\010\055\u022f\066\u022e\077" +
    "\u022d\001\001\000\002\001\001\000\004\077\u023e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    String styleAttributes = "";
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();

     public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right,
                        "Verifica la Sintaxis"));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right,
                        "Ninguna"));
    }

    public LinkedList<Errores> getErrores(){
        return listaErrores;
    }

    public StringBuilder htmlContent = new StringBuilder();
    
    public void addToHtml(String tagContent){
        htmlContent.append(tagContent);
    }
    
    public void exportHtmlFile(String fileName){
        try(BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))){
            writer.write(htmlContent.toString());
        } catch (IOException e){
            e.printStackTrace();
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= BASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BASE ::= INICIO CABEZA_I INTRODUCCION CABEZA_F CUERPO_I CONTENIDOS CUERPO_F FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BASE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT=a; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INTRODUCCION ::= DIREC_I DIREC_F TITU_I VALOR NT$0 TITU_F 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRODUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONTENIDOS ::= CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTENIDOS ::= CONTENIDOS CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT=a; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDO ::= TIH_I VALOR NT$1 TIH_F 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDO ::= INT_I INT_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT=a; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTENIDO ::= BAN_I VALOR NT$2 BAN_F 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDO ::= CUAD_I CUAD_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO ::= SELE_I LIST_OPT SELE_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDO ::= DIV_I CONTENIDOS DIV_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO ::= IMG_I IMG_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO ::= BR_I BR_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT=a; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTENIDO ::= BOTON_I VALOR NT$3 BOTON_F 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTENIDO ::= PARA_I LIST_SPAN PARA_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTENIDO ::= SCRIPT_I INSTRUCCIONES SCRIPT_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT=a; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUAOPT ::= OPT_I VALOR NT$4 OPT_F 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUAOPT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LIST_OPT ::= CUAOPT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_OPT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LIST_OPT ::= LIST_OPT CUAOPT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_OPT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SPAN ::= VALOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPAN",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$5 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT=a; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SPAN ::= BAN_I VALOR NT$5 BAN_F 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPAN",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LIST_SPAN ::= SPAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_SPAN",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LIST_SPAN ::= LIST_SPAN SPAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_SPAN",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$6 ::= 
            {
              Object RESULT =null;
 RESULT = "<html"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INICIO ::= MENOR CC NT$6 ETIQUETA1 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FIN ::= MENOR DIVI CC MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</html>"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIN",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CABEZA_I ::= MENOR HEAD MAYOR 
            {
              Object RESULT =null;
		 RESULT = "<head>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABEZA_I",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CABEZA_F ::= MENOR DIVI HEAD MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</head>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABEZA_F",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$7 ::= 
            {
              Object RESULT =null;
 RESULT = "<body"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO_I ::= MENOR BODY NT$7 ETIQUETA3 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_I",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUERPO_F ::= MENOR DIVI BODY MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</body>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_F",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TITU_I ::= MENOR TITLE MAYOR 
            {
              Object RESULT =null;
		 RESULT = "<title>"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITU_I",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TITU_F ::= MENOR DIVI TITLE MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</title>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITU_F",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$8 ::= 
            {
              Object RESULT =null;
 RESULT = "<link"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DIREC_I ::= MENOR LINK NT$8 ETIQUETA2 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIREC_I",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DIREC_F ::= MENOR DIVI LINK MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIREC_F",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$9 ::= 
            {
              Object RESULT =null;
 RESULT = "<span"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BAN_I ::= MENOR SPAM NT$9 ETIQUETA4 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAN_I",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BAN_F ::= MENOR DIVI SPAM MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</span>"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAN_F",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$10 ::= 
            {
              Object RESULT =null;
 RESULT = "<input"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INT_I ::= MENOR INPUT NT$10 ETIQUETA5 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INT_I",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INT_F ::= MENOR DIVI INPUT MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INT_F",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$11 ::= 
            {
              Object RESULT =null;
 RESULT = "<textarea"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",104, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CUAD_I ::= MENOR TEXTAREA NT$11 ETIQUETA6 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUAD_I",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CUAD_F ::= MENOR DIVI TEXTAREA MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</textarea>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUAD_F",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$12 ::= 
            {
              Object RESULT =null;
 RESULT = "<select"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SELE_I ::= MENOR SELECT NT$12 ETIQUETA4 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELE_I",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SELE_F ::= MENOR DIVI SELECT MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</select>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELE_F",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPT_I ::= MENOR OPTION MAYOR 
            {
              Object RESULT =null;
		 RESULT = "<option>"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPT_I",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPT_F ::= MENOR DIVI OPTION MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</option>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPT_F",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$13 ::= 
            {
              Object RESULT =null;
 RESULT = "<div"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DIV_I ::= MENOR DIV NT$13 ETIQUETA7 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIV_I",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DIV_F ::= MENOR DIVI DIV MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</div>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIV_F",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$14 ::= 
            {
              Object RESULT =null;
 RESULT = "<img"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IMG_I ::= MENOR IMG NT$14 ETIQUETA8 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMG_I",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IMG_F ::= MENOR DIVI IMG MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMG_F",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BR_I ::= MENOR BR MAYOR 
            {
              Object RESULT =null;
		 RESULT = "<br>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BR_I",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BR_F ::= MENOR DIVI BR MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BR_F",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$15 ::= 
            {
              Object RESULT =null;
 RESULT = "<button"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",108, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BOTON_I ::= MENOR BUTTON NT$15 ETIQUETA9 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON_I",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BOTON_F ::= MENOR DIVI BUTTON MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</button>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON_F",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$16 ::= 
            {
              Object RESULT =null;
 RESULT = "<h1"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",109, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIH_I ::= MENOR TITUH NT$16 ETIQUETA4 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIH_I",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIH_F ::= MENOR DIVI TITUH MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</h1>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIH_F",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$17 ::= 
            {
              Object RESULT =null;
 RESULT = "<p"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARA_I ::= MENOR PARRA NT$17 ETIQUETA4 MAYOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ">"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA_I",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARA_F ::= MENOR DIVI PARRA MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</p>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA_F",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SCRIPT_I ::= MENOR SCRIPT MAYOR 
            {
              Object RESULT =null;
		 RESULT = "<script>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_I",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SCRIPT_F ::= MENOR DIVI SCRIPT MAYOR 
            {
              Object RESULT =null;
		 RESULT = "</script>\n"; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_F",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ETIQUETA1 ::= LIST_VAL1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA1",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ETIQUETA1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA1",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ETIQUETA2 ::= LIST_VAL2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ETIQUETA2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ETIQUETA3 ::= LIST_VAL3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA3",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ETIQUETA3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA3",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ETIQUETA4 ::= LIST_VAL4 
            {
              Object RESULT =null;
		
                if(!styleAttributes.isEmpty()){
                    RESULT = " style=\"" + styleAttributes.trim() + "\" ";
                    addToHtml(RESULT.toString());
                    styleAttributes = "";
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA4",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ETIQUETA4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA4",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ETIQUETA5 ::= LIST_VAL5 
            {
              Object RESULT =null;
		
                if(!styleAttributes.isEmpty()){
                    RESULT = " style=\"" + styleAttributes.trim() + "\" ";
                    addToHtml(RESULT.toString());
                    styleAttributes = "";
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA5",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ETIQUETA5 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA5",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ETIQUETA6 ::= LIST_VAL6 
            {
              Object RESULT =null;
		
                if(!styleAttributes.isEmpty()){
                    RESULT = " style=\"" + styleAttributes.trim() + "\" ";
                    addToHtml(RESULT.toString());
                    styleAttributes = "";
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA6",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ETIQUETA6 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA6",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ETIQUETA7 ::= LIST_VAL7 
            {
              Object RESULT =null;
		
                if(!styleAttributes.isEmpty()){
                    RESULT = " style=\"" + styleAttributes.trim() + "\" ";
                    addToHtml(RESULT.toString());
                    styleAttributes = "";
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA7",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ETIQUETA7 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA7",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ETIQUETA8 ::= LIST_VAL8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA8",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ETIQUETA8 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA8",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ETIQUETA9 ::= LIST_VAL9 
            {
              Object RESULT =null;
		
                if(!styleAttributes.isEmpty()){
                    RESULT = " style=\"" + styleAttributes.trim() + "\" ";
                    addToHtml(RESULT.toString());
                    styleAttributes = "";
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA9",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ETIQUETA9 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA9",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LIST_VAL1 ::= VALOR_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL1",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LIST_VAL1 ::= LIST_VAL1 VALOR_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL1",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LIST_VAL2 ::= VALOR_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL2",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LIST_VAL2 ::= LIST_VAL2 VALOR_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL2",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LIST_VAL3 ::= VALOR_3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL3",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LIST_VAL3 ::= LIST_VAL3 VALOR_3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL3",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LIST_VAL4 ::= VALOR_4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL4",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LIST_VAL4 ::= LIST_VAL4 VALOR_4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL4",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LIST_VAL5 ::= VALOR_5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL5",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LIST_VAL5 ::= LIST_VAL5 VALOR_5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL5",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LIST_VAL6 ::= VALOR_6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL6",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LIST_VAL6 ::= LIST_VAL6 VALOR_6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL6",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LIST_VAL7 ::= VALOR_7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL7",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LIST_VAL7 ::= LIST_VAL7 VALOR_7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL7",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LIST_VAL8 ::= VALOR_8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL8",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LIST_VAL8 ::= LIST_VAL8 VALOR_8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL8",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LIST_VAL9 ::= VALOR_9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL9",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LIST_VAL9 ::= LIST_VAL9 VALOR_9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL9",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VALOR_N ::= CORCHEA FONTSI IGUAL COMID size COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 styleAttributes += "font-size: "+a+";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VALOR_N ::= CORCHEA FONTFA IGUAL COMID family COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 styleAttributes += "font-family: "+a+";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VALOR_N ::= CORCHEA TEXTALI IGUAL COMID aling COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		styleAttributes += "text-align: "+a+";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VALOR_N ::= CORCHEA ID IGUAL COMID IDENTIFICADOR COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = " id=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VALOR_1 ::= CORCHEA ID IGUAL COMID IDENTIFICADOR COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = " id=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_1",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VALOR_1 ::= CORCHEA NAME IGUAL COMID VALOR COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = " name=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_1",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VALOR_2 ::= CORCHEA HREF IGUAL COMID enlace COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = " href=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_2",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VALOR_3 ::= CORCHEA BACKG IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = " style=\"background: "+a+";\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_3",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // VALOR_4 ::= CORCHEA COLOR IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 styleAttributes += "color: "+a+";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_4",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // VALOR_4 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_4",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // VALOR_5 ::= CORCHEA TYPE IGUAL COMID tipos COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = " type=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_5",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // VALOR_5 ::= CORCHEA NAME IGUAL COMID VALOR COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = " name=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_5",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // VALOR_5 ::= CORCHEA COLOR IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 styleAttributes += "color: "+a+";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_5",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // VALOR_5 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_5",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // VALOR_6 ::= CORCHEA COLS IGUAL COMID ENTERO COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = " cols=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_6",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // VALOR_6 ::= CORCHEA ROWS IGUAL COMID ENTERO COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = " rows=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_6",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // VALOR_6 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_6",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // VALOR_7 ::= CORCHEA COLOR IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 styleAttributes += "color: "+a+";";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // VALOR_7 ::= CORCHEA BACKG IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 styleAttributes += "background: "+a+";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // VALOR_7 ::= CORCHEA CLASS IGUAL COMID clase COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = " class=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // VALOR_7 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // VALOR_8 ::= CORCHEA ID IGUAL COMID IDENTIFICADOR COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = " id=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // VALOR_8 ::= CORCHEA SRC IGUAL COMID enlace COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = " src=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // VALOR_8 ::= CORCHEA WIDTH IGUAL COMID th COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = " width=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // VALOR_8 ::= CORCHEA HEIGHT IGUAL COMID th COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = " height=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // VALOR_8 ::= CORCHEA ALT IGUAL COMID VALOR COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = " alt=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // VALOR_9 ::= CORCHEA COLOR IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 styleAttributes += "color: "+a+";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // VALOR_9 ::= CORCHEA BACKG IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 styleAttributes += "background: "+a+";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // VALOR_9 ::= CORCHEA ONCLICK IGUAL COMID IDENTIFICADOR PAR1 PAR2 COMID CORCHEC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = " onclick=\""+a+"\" "; addToHtml(RESULT.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // VALOR_9 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // INSTRUCCION ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // INSTRUCCION ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // INSTRUCCION ::= DECLA_ASIG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // INSTRUCCION ::= ISTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // INSTRUCCION ::= BLOINST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // INSTRUCCION ::= SIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // INSTRUCCION ::= REPETIR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // INSTRUCCION ::= CICLO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // INSTRUCCION ::= IDENTIFICADOR PAR1 PAR2 CORCHEA INSTRUCCIONES CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // INSTRUCCION ::= LOAD PAR1 PAR2 CORCHEA INSTRUCCIONES CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // IMPRESION ::= FUNCSP PAR1 EXPRESION PAR2 FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // FUNCSP ::= ASC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // FUNCSP ::= DESC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // FUNCSP ::= LETPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // FUNCSP ::= LETIMPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // FUNCSP ::= REVERSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // FUNCSP ::= CARALE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // FUNCSP ::= NUMALE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // FUNCSP ::= ALEINF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // CSP ::= EXIT PAR1 PAR2 FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CSP",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CSP ::= REDIRECT PAR1 PAR2 FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CSP",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ASIGNACION ::= LISTA_VAR IGUAL EXPRESION FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // DECLARACION ::= TIPOS LISTA_VAR FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // DECLARACION ::= TIPOS GLOBAL LISTA_VAR FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // LISTA_VAR ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VAR",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // LISTA_VAR ::= LISTA_VAR COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VAR",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // DECLA_ASIG ::= TIPOS LISTA_ASIG FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA_ASIG",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // DECLA_ASIG ::= TIPOS GLOBAL LISTA_ASIG FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA_ASIG",86, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // LISTA_ASIG ::= IDENTIFICADOR IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ASIG",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // LISTA_ASIG ::= LISTA_ASIG COMA IDENTIFICADOR IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ASIG",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // TIPOS ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TIPOS ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // TIPOS ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TIPOS ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TIPOS ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // CADENA ::= COMID VALOR COMID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // CADENA ::= COMID ENTERO COMID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // GET ::= ELEMENT PAR1 COMIS IDENTIFICADOR COMIS PAR2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // ISTR ::= INSERT PAR1 COMIS IDENTIFICADOR COMIS PAR2 FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ISTR",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // EXPRESION ::= MENOS EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // EXPRESION ::= DIFER EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // EXPRESION ::= EXPRESION POR EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // EXPRESION ::= EXPRESION IGUAL IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // EXPRESION ::= EXPRESION DIFER IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // EXPRESION ::= EXPRESION MENOR IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // EXPRESION ::= EXPRESION MAYOR IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // EXPRESION ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // EXPRESION ::= GET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // EXPRESION ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // EXPRESION ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // EXPRESION ::= DECI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // EXPRESION ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // EXPRESION ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // LISTA_OPCIONES ::= OPCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_OPCIONES",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // LISTA_OPCIONES ::= LISTA_OPCIONES OPCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_OPCIONES",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // OPCIONES ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // OPCIONES ::= CSP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // OPCIONES ::= ISTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // BLOINST ::= INIT LLAVEA DOSPTS LISTA_OPCIONES DOSPTS LLAVEC END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOINST",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // SIF ::= IF PAR1 EXPRESION PAR2 THEN BLOINST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // SIF ::= IF PAR1 EXPRESION PAR2 THEN BLOINST ELSE BLOINST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // SIF ::= IF PAR1 EXPRESION PAR2 THEN BLOINST SELIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // SIF ::= IF PAR1 EXPRESION PAR2 THEN BLOINST SELIF ELSE BLOINST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // SELIF ::= ELIF PAR1 EXPRESION PAR2 THEN BLOINST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIF",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // SELIF ::= SELIF ELIF IF PAR1 EXPRESION PAR2 THEN BLOINST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIF",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // REPETIR ::= REPEAT PAR1 EXPRESION PAR2 HUNTIL PAR1 EXPRESION PAR2 BLOINST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REPETIR",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // CICLO ::= WHILE PAR1 EXPRESION PAR2 THENWHILE BLOINST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLO",92, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
