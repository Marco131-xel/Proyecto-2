
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main.analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import main.excepciones.Errores;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\304\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\004\007\000\002\005\003\000\002\005\004" +
    "\000\002\006\005\000\002\006\003\000\002\006\005\000" +
    "\002\006\004\000\002\006\005\000\002\006\005\000\002" +
    "\006\004\000\002\006\003\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\010\005\000\002\007\003" +
    "\000\002\007\004\000\002\012\003\000\002\012\005\000" +
    "\002\011\003\000\002\011\004\000\002\013\006\000\002" +
    "\014\006\000\002\015\005\000\002\016\006\000\002\017" +
    "\006\000\002\020\006\000\002\021\005\000\002\022\006" +
    "\000\002\023\006\000\002\024\006\000\002\025\006\000" +
    "\002\026\006\000\002\027\006\000\002\030\006\000\002" +
    "\031\006\000\002\032\006\000\002\033\006\000\002\034" +
    "\005\000\002\035\006\000\002\036\006\000\002\037\006" +
    "\000\002\040\006\000\002\041\006\000\002\042\005\000" +
    "\002\043\006\000\002\044\006\000\002\045\006\000\002" +
    "\046\006\000\002\047\006\000\002\050\006\000\002\051" +
    "\005\000\002\052\006\000\002\053\003\000\002\053\002" +
    "\000\002\054\003\000\002\054\002\000\002\055\003\000" +
    "\002\055\002\000\002\056\003\000\002\056\002\000\002" +
    "\057\003\000\002\057\002\000\002\060\003\000\002\060" +
    "\002\000\002\061\003\000\002\061\002\000\002\062\003" +
    "\000\002\062\002\000\002\063\003\000\002\063\002\000" +
    "\002\064\003\000\002\064\004\000\002\065\003\000\002" +
    "\065\004\000\002\066\003\000\002\066\004\000\002\067" +
    "\003\000\002\067\004\000\002\070\003\000\002\070\004" +
    "\000\002\071\003\000\002\071\004\000\002\072\003\000" +
    "\002\072\004\000\002\073\003\000\002\073\004\000\002" +
    "\074\003\000\002\074\004\000\002\106\011\000\002\106" +
    "\011\000\002\106\011\000\002\106\011\000\002\075\011" +
    "\000\002\075\011\000\002\076\011\000\002\077\011\000" +
    "\002\100\011\000\002\100\003\000\002\101\011\000\002" +
    "\101\011\000\002\101\003\000\002\102\011\000\002\102" +
    "\011\000\002\102\003\000\002\103\011\000\002\103\011" +
    "\000\002\103\011\000\002\103\003\000\002\104\011\000" +
    "\002\104\011\000\002\104\011\000\002\104\011\000\002" +
    "\104\011\000\002\105\011\000\002\105\011\000\002\105" +
    "\013\000\002\105\003\000\002\107\003\000\002\107\004" +
    "\000\002\110\003\000\002\110\003\000\002\110\003\000" +
    "\002\110\003\000\002\110\003\000\002\110\003\000\002" +
    "\110\003\000\002\110\003\000\002\110\003\000\002\110" +
    "\010\000\002\110\010\000\002\111\007\000\002\116\003" +
    "\000\002\116\003\000\002\116\003\000\002\116\003\000" +
    "\002\116\003\000\002\116\003\000\002\116\003\000\002" +
    "\116\003\000\002\122\003\000\002\122\003\000\002\113" +
    "\006\000\002\112\005\000\002\112\006\000\002\125\003" +
    "\000\002\125\005\000\002\126\005\000\002\126\006\000" +
    "\002\127\005\000\002\127\007\000\002\114\003\000\002" +
    "\114\003\000\002\114\003\000\002\114\003\000\002\114" +
    "\003\000\002\117\005\000\002\121\011\000\002\123\011" +
    "\000\002\115\004\000\002\115\004\000\002\115\005\000" +
    "\002\115\005\000\002\115\005\000\002\115\005\000\002" +
    "\115\006\000\002\115\006\000\002\115\006\000\002\115" +
    "\006\000\002\115\005\000\002\115\005\000\002\115\005" +
    "\000\002\115\005\000\002\115\003\000\002\115\003\000" +
    "\002\115\003\000\002\115\003\000\002\115\003\000\002" +
    "\115\003\000\002\115\003\000\002\115\005\000\002\124" +
    "\003\000\002\124\004\000\002\124\003\000\002\120\011" +
    "\000\002\132\010\000\002\132\012\000\002\132\011\000" +
    "\002\132\013\000\002\131\010\000\002\131\012\000\002" +
    "\133\013\000\002\134\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0213\000\004\013\005\001\002\000\004\002\000\001" +
    "\002\000\004\033\u0203\001\002\000\004\013\012\001\002" +
    "\000\004\002\010\001\002\000\004\002\001\001\002\000" +
    "\004\013\017\001\002\000\004\034\013\001\002\000\004" +
    "\014\014\001\002\000\004\013\uffe7\001\002\000\004\013" +
    "\u01f5\001\002\000\004\013\035\001\002\000\004\036\020" +
    "\001\002\000\006\014\uffc6\025\024\001\002\000\006\014" +
    "\uffb5\025\uffb5\001\002\000\006\014\uffc7\025\024\001\002" +
    "\000\004\014\033\001\002\000\004\054\025\001\002\000" +
    "\004\011\026\001\002\000\004\030\027\001\002\000\004" +
    "\133\030\001\002\000\004\030\031\001\002\000\004\026" +
    "\032\001\002\000\006\014\uff9f\025\uff9f\001\002\000\004" +
    "\013\uffe1\001\002\000\006\014\uffb4\025\uffb4\001\002\000" +
    "\004\016\u01f1\001\002\000\004\013\040\001\002\000\004" +
    "\013\060\001\002\000\004\037\041\001\002\000\006\014" +
    "\uffc4\025\044\001\002\000\006\014\uffc5\025\044\001\002" +
    "\000\004\014\054\001\002\000\004\055\046\001\002\000" +
    "\006\014\uffb3\025\uffb3\001\002\000\004\011\047\001\002" +
    "\000\004\030\050\001\002\000\004\134\051\001\002\000" +
    "\004\030\052\001\002\000\004\026\053\001\002\000\006" +
    "\014\uff9e\025\uff9e\001\002\000\004\013\uffe5\001\002\000" +
    "\006\014\uffb2\025\uffb2\001\002\000\004\146\u01ef\001\002" +
    "\000\004\146\u01e9\001\002\000\030\040\131\041\124\042" +
    "\132\043\130\045\126\046\133\047\123\050\121\051\122" +
    "\052\125\053\127\001\002\000\004\013\u01df\001\002\000" +
    "\004\013\ufffa\001\002\000\004\013\ufffd\001\002\000\004" +
    "\013\ufff4\001\002\000\050\075\u0146\076\u0130\077\u014a\100" +
    "\u0147\101\u014d\102\u0134\103\u0142\104\u014c\107\u0148\110\u013b" +
    "\111\u013c\112\u0133\113\u0131\116\u012f\120\u013e\121\u0138\125" +
    "\u014b\127\u0132\145\u0145\001\002\000\006\013\u011e\146\u011c" +
    "\001\002\000\004\013\u010c\001\002\000\004\013\060\001" +
    "\002\000\004\013\110\001\002\000\004\013\102\001\002" +
    "\000\004\146\074\001\002\000\004\013\076\001\002\000" +
    "\004\013\ufff3\001\002\000\004\016\077\001\002\000\004" +
    "\050\100\001\002\000\004\014\101\001\002\000\004\013" +
    "\uffd0\001\002\000\004\016\104\001\002\000\004\013\ufff5" +
    "\001\002\000\004\046\105\001\002\000\004\014\106\001" +
    "\002\000\004\013\uffd3\001\002\000\004\013\ufff8\001\002" +
    "\000\004\016\111\001\002\000\004\042\112\001\002\000" +
    "\004\014\113\001\002\000\004\013\uffdb\001\002\000\004" +
    "\013\115\001\002\000\032\016\120\040\131\041\124\042" +
    "\132\043\130\045\126\046\133\047\123\050\121\051\122" +
    "\052\125\053\127\001\002\000\004\013\ufffc\001\002\000" +
    "\004\013\ufff6\001\002\000\004\045\u0107\001\002\000\006" +
    "\014\uffb8\025\357\001\002\000\006\014\uffc2\025\257\001" +
    "\002\000\004\014\351\001\002\000\006\014\uffc0\025\332" +
    "\001\002\000\006\014\uffc2\025\257\001\002\000\006\014" +
    "\uffbc\025\277\001\002\000\004\014\272\001\002\000\006" +
    "\014\uffc2\025\257\001\002\000\006\014\uffc2\025\257\001" +
    "\002\000\006\014\uffbe\025\204\001\002\000\006\014\uffba" +
    "\025\137\001\002\000\004\014\177\001\002\000\006\014" +
    "\uffa9\025\uffa9\001\002\000\006\014\uffbb\025\137\001\002" +
    "\000\014\063\140\070\143\071\142\072\144\073\141\001" +
    "\002\000\004\011\171\001\002\000\004\011\164\001\002" +
    "\000\004\011\157\001\002\000\004\011\152\001\002\000" +
    "\004\011\145\001\002\000\004\030\146\001\002\000\004" +
    "\142\147\001\002\000\004\030\150\001\002\000\004\026" +
    "\151\001\002\000\006\014\uff8e\025\uff8e\001\002\000\004" +
    "\030\153\001\002\000\004\133\154\001\002\000\004\030" +
    "\155\001\002\000\004\026\156\001\002\000\006\014\uff90" +
    "\025\uff90\001\002\000\004\030\160\001\002\000\004\142" +
    "\161\001\002\000\004\030\162\001\002\000\004\026\163" +
    "\001\002\000\006\014\uff8f\025\uff8f\001\002\000\004\030" +
    "\165\001\002\000\004\146\166\001\002\000\004\030\167" +
    "\001\002\000\004\026\170\001\002\000\006\014\uff8d\025" +
    "\uff8d\001\002\000\004\030\172\001\002\000\004\145\173" +
    "\001\002\000\004\030\174\001\002\000\004\026\175\001" +
    "\002\000\006\014\uff91\025\uff91\001\002\000\006\014\uffa8" +
    "\025\uffa8\001\002\000\004\013\uffd4\001\002\000\006\014" +
    "\uffbf\025\204\001\002\000\004\014\251\001\002\000\006" +
    "\014\uff96\025\uff96\001\002\000\006\014\uffad\025\uffad\001" +
    "\002\000\016\057\211\060\210\061\212\063\205\065\207" +
    "\066\206\001\002\000\004\011\244\001\002\000\004\011" +
    "\237\001\002\000\004\011\232\001\002\000\004\011\225" +
    "\001\002\000\004\011\220\001\002\000\004\011\213\001" +
    "\002\000\004\030\214\001\002\000\004\137\215\001\002" +
    "\000\004\030\216\001\002\000\004\026\217\001\002\000" +
    "\006\014\uffa3\025\uffa3\001\002\000\004\030\221\001\002" +
    "\000\004\136\222\001\002\000\004\030\223\001\002\000" +
    "\004\026\224\001\002\000\006\014\uffa4\025\uffa4\001\002" +
    "\000\004\030\226\001\002\000\004\135\227\001\002\000" +
    "\004\030\230\001\002\000\004\026\231\001\002\000\006" +
    "\014\uffa5\025\uffa5\001\002\000\004\030\233\001\002\000" +
    "\004\143\234\001\002\000\004\030\235\001\002\000\004" +
    "\026\236\001\002\000\006\014\uff98\025\uff98\001\002\000" +
    "\004\030\240\001\002\000\004\143\241\001\002\000\004" +
    "\030\242\001\002\000\004\026\243\001\002\000\006\014" +
    "\uff97\025\uff97\001\002\000\004\030\245\001\002\000\004" +
    "\145\246\001\002\000\004\030\247\001\002\000\004\026" +
    "\250\001\002\000\006\014\uffa2\025\uffa2\001\002\000\004" +
    "\013\uffdc\001\002\000\006\014\uffac\025\uffac\001\002\000" +
    "\006\014\uffc3\025\257\001\002\000\004\014\266\001\002" +
    "\000\006\014\uff9c\025\uff9c\001\002\000\006\014\uffb1\025" +
    "\uffb1\001\002\000\014\056\260\057\211\060\210\061\212" +
    "\063\205\001\002\000\004\011\261\001\002\000\004\030" +
    "\262\001\002\000\004\134\263\001\002\000\004\030\264" +
    "\001\002\000\004\026\265\001\002\000\006\014\uff9d\025" +
    "\uff9d\001\002\000\004\146\uffdf\001\002\000\006\014\uffb0" +
    "\025\uffb0\001\002\000\004\014\271\001\002\000\004\013" +
    "\uffda\001\002\000\050\075\uffcb\076\uffcb\077\uffcb\100\uffcb" +
    "\101\uffcb\102\uffcb\103\uffcb\104\uffcb\107\uffcb\110\uffcb\111" +
    "\uffcb\112\uffcb\113\uffcb\116\uffcb\120\uffcb\121\uffcb\125\uffcb" +
    "\127\uffcb\145\uffcb\001\002\000\006\014\uffbd\025\277\001" +
    "\002\000\004\014\322\001\002\000\006\014\uff92\025\uff92" +
    "\001\002\000\006\014\uffab\025\uffab\001\002\000\020\055" +
    "\300\056\301\057\211\060\210\061\212\063\205\067\302" +
    "\001\002\000\004\011\315\001\002\000\004\011\310\001" +
    "\002\000\004\011\303\001\002\000\004\030\304\001\002" +
    "\000\004\141\305\001\002\000\004\030\306\001\002\000" +
    "\004\026\307\001\002\000\006\014\uff93\025\uff93\001\002" +
    "\000\004\030\311\001\002\000\004\134\312\001\002\000" +
    "\004\030\313\001\002\000\004\026\314\001\002\000\006" +
    "\014\uff95\025\uff95\001\002\000\004\030\316\001\002\000" +
    "\004\134\317\001\002\000\004\030\320\001\002\000\004" +
    "\026\321\001\002\000\006\014\uff94\025\uff94\001\002\000" +
    "\004\013\uffd6\001\002\000\006\014\uffaa\025\uffaa\001\002" +
    "\000\004\014\325\001\002\000\006\013\uffcd\146\uffcd\001" +
    "\002\000\006\014\uffc1\025\332\001\002\000\004\014\347" +
    "\001\002\000\006\014\uff99\025\uff99\001\002\000\006\014" +
    "\uffaf\025\uffaf\001\002\000\016\056\333\057\211\060\210" +
    "\061\212\062\334\063\205\001\002\000\004\011\342\001" +
    "\002\000\004\011\335\001\002\000\004\030\336\001\002" +
    "\000\004\140\337\001\002\000\004\030\340\001\002\000" +
    "\004\026\341\001\002\000\006\014\uff9b\025\uff9b\001\002" +
    "\000\004\030\343\001\002\000\004\134\344\001\002\000" +
    "\004\030\345\001\002\000\004\026\346\001\002\000\006" +
    "\014\uff9a\025\uff9a\001\002\000\004\013\uffdd\001\002\000" +
    "\006\014\uffae\025\uffae\001\002\000\004\013\uffd2\001\002" +
    "\000\004\014\353\001\002\000\004\146\uffcf\001\002\000" +
    "\006\014\uffa7\025\uffa7\001\002\000\006\014\uff89\025\uff89" +
    "\001\002\000\006\014\uffb9\025\357\001\002\000\020\055" +
    "\362\056\363\057\211\060\210\061\212\063\205\074\364" +
    "\001\002\000\004\014\361\001\002\000\004\146\uffd1\001" +
    "\002\000\004\011\u0101\001\002\000\004\011\374\001\002" +
    "\000\004\011\365\001\002\000\004\030\366\001\002\000" +
    "\004\145\367\001\002\000\004\004\370\001\002\000\004" +
    "\005\371\001\002\000\004\030\372\001\002\000\004\026" +
    "\373\001\002\000\006\014\uff8a\025\uff8a\001\002\000\004" +
    "\030\375\001\002\000\004\134\376\001\002\000\004\030" +
    "\377\001\002\000\004\026\u0100\001\002\000\006\014\uff8c" +
    "\025\uff8c\001\002\000\004\030\u0102\001\002\000\004\134" +
    "\u0103\001\002\000\004\030\u0104\001\002\000\004\026\u0105" +
    "\001\002\000\006\014\uff8b\025\uff8b\001\002\000\006\014" +
    "\uffa6\025\uffa6\001\002\000\004\014\u0108\001\002\000\004" +
    "\013\uffd5\001\002\000\004\146\u0115\001\002\000\004\013" +
    "\uffef\001\002\000\004\013\u0111\001\002\000\004\044\u010d" +
    "\001\002\000\004\014\u010e\001\002\000\004\146\uffd8\001" +
    "\002\000\004\013\ufff7\001\002\000\004\013\uffee\001\002" +
    "\000\006\016\u0112\044\u010d\001\002\000\004\043\u0113\001" +
    "\002\000\004\014\u0114\001\002\000\004\013\uffd9\001\002" +
    "\000\004\013\u0117\001\002\000\004\013\ufff0\001\002\000" +
    "\004\016\u0118\001\002\000\004\044\u0119\001\002\000\004" +
    "\014\u011a\001\002\000\004\013\uffd7\001\002\000\006\013" +
    "\u0127\146\u011c\001\002\000\006\013\uffed\146\uffed\001\002" +
    "\000\004\146\u0120\001\002\000\004\040\131\001\002\000" +
    "\006\013\uffeb\146\uffeb\001\002\000\004\013\u0121\001\002" +
    "\000\004\016\u0123\001\002\000\006\013\uffec\146\uffec\001" +
    "\002\000\004\040\u0124\001\002\000\004\014\u0125\001\002" +
    "\000\006\013\uffde\146\uffde\001\002\000\004\013\ufff2\001" +
    "\002\000\006\016\u0129\040\131\001\002\000\006\013\uffea" +
    "\146\uffea\001\002\000\004\052\u012a\001\002\000\004\014" +
    "\u012b\001\002\000\004\013\uffcc\001\002\000\054\013\uff88" +
    "\026\uff88\075\uff88\076\uff88\077\uff88\100\uff88\101\uff88\102" +
    "\uff88\103\uff88\104\uff88\107\uff88\110\uff88\111\uff88\112\uff88" +
    "\113\uff88\116\uff88\120\uff88\121\uff88\125\uff88\127\uff88\145" +
    "\uff88\001\002\000\006\011\u01dc\031\u01d8\001\002\000\006" +
    "\132\u01cb\145\u01cc\001\002\000\004\023\u01be\001\002\000" +
    "\004\004\uff79\001\002\000\006\132\uff64\145\uff64\001\002" +
    "\000\004\004\u01b9\001\002\000\006\132\uff66\145\uff66\001" +
    "\002\000\004\004\uff75\001\002\000\054\013\uff85\026\uff85" +
    "\075\uff85\076\uff85\077\uff85\100\uff85\101\uff85\102\uff85\103" +
    "\uff85\104\uff85\107\uff85\110\uff85\111\uff85\112\uff85\113\uff85" +
    "\116\uff85\120\uff85\121\uff85\125\uff85\127\uff85\145\uff85\001" +
    "\002\000\052\013\u01b4\075\u0146\076\u0130\077\u014a\100\u0147" +
    "\101\u014d\102\u0134\103\u0142\104\u014c\107\u0148\110\u013b\111" +
    "\u013c\112\u0133\113\u0131\116\u012f\120\u013e\121\u0138\125\u014b" +
    "\127\u0132\145\u0145\001\002\000\054\013\uff80\026\uff80\075" +
    "\uff80\076\uff80\077\uff80\100\uff80\101\uff80\102\uff80\103\uff80" +
    "\104\uff80\107\uff80\110\uff80\111\uff80\112\uff80\113\uff80\116" +
    "\uff80\120\uff80\121\uff80\125\uff80\127\uff80\145\uff80\001\002" +
    "\000\004\004\u019d\001\002\000\054\013\uff83\026\uff83\075" +
    "\uff83\076\uff83\077\uff83\100\uff83\101\uff83\102\uff83\103\uff83" +
    "\104\uff83\107\uff83\110\uff83\111\uff83\112\uff83\113\uff83\116" +
    "\uff83\120\uff83\121\uff83\125\uff83\127\uff83\145\uff83\001\002" +
    "\000\054\013\uff7e\026\uff7e\075\uff7e\076\uff7e\077\uff7e\100" +
    "\uff7e\101\uff7e\102\uff7e\103\uff7e\104\uff7e\107\uff7e\110\uff7e" +
    "\111\uff7e\112\uff7e\113\uff7e\116\uff7e\120\uff7e\121\uff7e\125" +
    "\uff7e\127\uff7e\145\uff7e\001\002\000\006\132\uff63\145\uff63" +
    "\001\002\000\006\132\uff65\145\uff65\001\002\000\054\013" +
    "\uff84\026\uff84\075\uff84\076\uff84\077\uff84\100\uff84\101\uff84" +
    "\102\uff84\103\uff84\104\uff84\107\uff84\110\uff84\111\uff84\112" +
    "\uff84\113\uff84\116\uff84\120\uff84\121\uff84\125\uff84\127\uff84" +
    "\145\uff84\001\002\000\004\004\u0197\001\002\000\004\004" +
    "\u0193\001\002\000\054\013\uff81\026\uff81\075\uff81\076\uff81" +
    "\077\uff81\100\uff81\101\uff81\102\uff81\103\uff81\104\uff81\107" +
    "\uff81\110\uff81\111\uff81\112\uff81\113\uff81\116\uff81\120\uff81" +
    "\121\uff81\125\uff81\127\uff81\145\uff81\001\002\000\054\013" +
    "\uff82\026\uff82\075\uff82\076\uff82\077\uff82\100\uff82\101\uff82" +
    "\102\uff82\103\uff82\104\uff82\107\uff82\110\uff82\111\uff82\112" +
    "\uff82\113\uff82\116\uff82\120\uff82\121\uff82\125\uff82\127\uff82" +
    "\145\uff82\001\002\000\004\004\uff74\001\002\000\004\004" +
    "\u018e\001\002\000\054\013\uff7f\026\uff7f\075\uff7f\076\uff7f" +
    "\077\uff7f\100\uff7f\101\uff7f\102\uff7f\103\uff7f\104\uff7f\107" +
    "\uff7f\110\uff7f\111\uff7f\112\uff7f\113\uff7f\116\uff7f\120\uff7f" +
    "\121\uff7f\125\uff7f\127\uff7f\145\uff7f\001\002\000\010\004" +
    "\u0188\011\uff6d\031\uff6d\001\002\000\004\004\uff7a\001\002" +
    "\000\004\004\uff77\001\002\000\006\132\uff67\145\uff67\001" +
    "\002\000\054\013\uff86\026\uff86\075\uff86\076\uff86\077\uff86" +
    "\100\uff86\101\uff86\102\uff86\103\uff86\104\uff86\107\uff86\110" +
    "\uff86\111\uff86\112\uff86\113\uff86\116\uff86\120\uff86\121\uff86" +
    "\125\uff86\127\uff86\145\uff86\001\002\000\004\004\uff78\001" +
    "\002\000\004\004\u014e\001\002\000\004\004\uff73\001\002" +
    "\000\004\004\uff76\001\002\000\026\004\u0153\007\u0150\021" +
    "\u0155\030\u015b\114\u0152\115\u0154\131\u0158\143\u0151\144\u0156" +
    "\145\u015a\001\002\000\034\005\uff51\006\uff51\007\uff51\011" +
    "\uff51\013\uff51\014\uff51\015\uff51\017\uff51\020\uff51\021\uff51" +
    "\022\uff51\031\uff51\045\uff51\001\002\000\026\004\u0153\007" +
    "\u0150\021\u0155\030\u015b\114\u0152\115\u0154\131\u0158\143\u0151" +
    "\144\u0156\145\u015a\001\002\000\034\005\uff4e\006\uff4e\007" +
    "\uff4e\011\uff4e\013\uff4e\014\uff4e\015\uff4e\017\uff4e\020\uff4e" +
    "\021\uff4e\022\uff4e\031\uff4e\045\uff4e\001\002\000\034\005" +
    "\uff4c\006\uff4c\007\uff4c\011\uff4c\013\uff4c\014\uff4c\015\uff4c" +
    "\017\uff4c\020\uff4c\021\uff4c\022\uff4c\031\uff4c\045\uff4c\001" +
    "\002\000\026\004\u0153\007\u0150\021\u0155\030\u015b\114\u0152" +
    "\115\u0154\131\u0158\143\u0151\144\u0156\145\u015a\001\002\000" +
    "\034\005\uff4b\006\uff4b\007\uff4b\011\uff4b\013\uff4b\014\uff4b" +
    "\015\uff4b\017\uff4b\020\uff4b\021\uff4b\022\uff4b\031\uff4b\045" +
    "\uff4b\001\002\000\026\004\u0153\007\u0150\021\u0155\030\u015b" +
    "\114\u0152\115\u0154\131\u0158\143\u0151\144\u0156\145\u015a\001" +
    "\002\000\034\005\uff4d\006\uff4d\007\uff4d\011\uff4d\013\uff4d" +
    "\014\uff4d\015\uff4d\017\uff4d\020\uff4d\021\uff4d\022\uff4d\031" +
    "\uff4d\045\uff4d\001\002\000\034\005\uff50\006\uff50\007\uff50" +
    "\011\uff50\013\uff50\014\uff50\015\uff50\017\uff50\020\uff50\021" +
    "\uff50\022\uff50\031\uff50\045\uff50\001\002\000\004\004\u017e" +
    "\001\002\000\030\005\u0163\006\u0162\007\u015f\011\u0167\013" +
    "\u0160\014\u0165\015\u0161\017\u0168\020\u015e\021\u0166\045\u0164" +
    "\001\002\000\034\005\uff4f\006\uff4f\007\uff4f\011\uff4f\013" +
    "\uff4f\014\uff4f\015\uff4f\017\uff4f\020\uff4f\021\uff4f\022\uff4f" +
    "\031\uff4f\045\uff4f\001\002\000\004\146\u015c\001\002\000" +
    "\004\030\u015d\001\002\000\034\005\uff62\006\uff62\007\uff62" +
    "\011\uff62\013\uff62\014\uff62\015\uff62\017\uff62\020\uff62\021" +
    "\uff62\022\uff62\031\uff62\045\uff62\001\002\000\026\004\u0153" +
    "\007\u0150\021\u0155\030\u015b\114\u0152\115\u0154\131\u0158\143" +
    "\u0151\144\u0156\145\u015a\001\002\000\026\004\u0153\007\u0150" +
    "\021\u0155\030\u015b\114\u0152\115\u0154\131\u0158\143\u0151\144" +
    "\u0156\145\u015a\001\002\000\030\004\u0153\007\u0150\011\u0179" +
    "\021\u0155\030\u015b\114\u0152\115\u0154\131\u0158\143\u0151\144" +
    "\u0156\145\u015a\001\002\000\026\004\u0153\007\u0150\021\u0155" +
    "\030\u015b\114\u0152\115\u0154\131\u0158\143\u0151\144\u0156\145" +
    "\u015a\001\002\000\026\004\u0153\007\u0150\021\u0155\030\u015b" +
    "\114\u0152\115\u0154\131\u0158\143\u0151\144\u0156\145\u015a\001" +
    "\002\000\004\126\u0172\001\002\000\026\004\u0153\007\u0150" +
    "\021\u0155\030\u015b\114\u0152\115\u0154\131\u0158\143\u0151\144" +
    "\u0156\145\u015a\001\002\000\030\004\u0153\007\u0150\011\u016e" +
    "\021\u0155\030\u015b\114\u0152\115\u0154\131\u0158\143\u0151\144" +
    "\u0156\145\u015a\001\002\000\004\011\u016c\001\002\000\004" +
    "\011\u016a\001\002\000\026\004\u0153\007\u0150\021\u0155\030" +
    "\u015b\114\u0152\115\u0154\131\u0158\143\u0151\144\u0156\145\u015a" +
    "\001\002\000\034\005\uff53\006\u0162\007\u015f\011\uff53\013" +
    "\u0160\014\u0165\015\u0161\017\uff53\020\uff53\021\uff53\022\uff53" +
    "\031\uff53\045\u0164\001\002\000\026\004\u0153\007\u0150\021" +
    "\u0155\030\u015b\114\u0152\115\u0154\131\u0158\143\u0151\144\u0156" +
    "\145\u015a\001\002\000\034\005\uff59\006\u0162\007\u015f\011" +
    "\uff59\013\uff59\014\uff59\015\u0161\017\uff59\020\uff59\021\uff59" +
    "\022\uff59\031\uff59\045\u0164\001\002\000\026\004\u0153\007" +
    "\u0150\021\u0155\030\u015b\114\u0152\115\u0154\131\u0158\143\u0151" +
    "\144\u0156\145\u015a\001\002\000\034\005\uff58\006\u0162\007" +
    "\u015f\011\uff58\013\uff58\014\uff58\015\u0161\017\uff58\020\uff58" +
    "\021\uff58\022\uff58\031\uff58\045\u0164\001\002\000\026\004" +
    "\u0153\007\u0150\021\u0155\030\u015b\114\u0152\115\u0154\131\u0158" +
    "\143\u0151\144\u0156\145\u015a\001\002\000\034\005\uff54\006" +
    "\u0162\007\u015f\011\uff54\013\uff54\014\uff54\015\u0161\017\uff54" +
    "\020\uff54\021\uff54\022\uff54\031\uff54\045\u0164\001\002\000" +
    "\034\005\uff56\006\u0162\007\u015f\011\uff56\013\uff56\014\uff56" +
    "\015\u0161\017\uff56\020\uff56\021\uff56\022\uff56\031\uff56\045" +
    "\u0164\001\002\000\034\005\uff5a\006\uff5a\007\uff5a\011\uff5a" +
    "\013\uff5a\014\uff5a\015\uff5a\017\uff5a\020\uff5a\021\uff5a\022" +
    "\uff5a\031\uff5a\045\uff5a\001\002\000\004\004\u0173\001\002" +
    "\000\026\004\u0153\007\u0150\021\u0155\030\u015b\114\u0152\115" +
    "\u0154\131\u0158\143\u0151\144\u0156\145\u015a\001\002\000\030" +
    "\005\u0175\006\u0162\007\u015f\011\u0167\013\u0160\014\u0165\015" +
    "\u0161\017\u0168\020\u015e\021\u0166\045\u0164\001\002\000\004" +
    "\116\u012f\001\002\000\054\013\uff3f\026\uff3f\075\uff3f\076" +
    "\uff3f\077\uff3f\100\uff3f\101\uff3f\102\uff3f\103\uff3f\104\uff3f" +
    "\107\uff3f\110\uff3f\111\uff3f\112\uff3f\113\uff3f\116\uff3f\120" +
    "\uff3f\121\uff3f\125\uff3f\127\uff3f\145\uff3f\001\002\000\034" +
    "\005\uff5d\006\uff5d\007\uff5d\011\uff5d\013\uff5d\014\uff5d\015" +
    "\u0161\017\uff5d\020\uff5d\021\uff5d\022\uff5d\031\uff5d\045\u0164" +
    "\001\002\000\034\005\uff5b\006\uff5b\007\uff5b\011\uff5b\013" +
    "\uff5b\014\uff5b\015\uff5b\017\uff5b\020\uff5b\021\uff5b\022\uff5b" +
    "\031\uff5b\045\uff5b\001\002\000\026\004\u0153\007\u0150\021" +
    "\u0155\030\u015b\114\u0152\115\u0154\131\u0158\143\u0151\144\u0156" +
    "\145\u015a\001\002\000\034\005\uff55\006\u0162\007\u015f\011" +
    "\uff55\013\uff55\014\uff55\015\u0161\017\uff55\020\uff55\021\uff55" +
    "\022\uff55\031\uff55\045\u0164\001\002\000\034\005\uff57\006" +
    "\u0162\007\u015f\011\uff57\013\uff57\014\uff57\015\u0161\017\uff57" +
    "\020\uff57\021\uff57\022\uff57\031\uff57\045\u0164\001\002\000" +
    "\034\005\uff5c\006\uff5c\007\uff5c\011\uff5c\013\uff5c\014\uff5c" +
    "\015\u0161\017\uff5c\020\uff5c\021\uff5c\022\uff5c\031\uff5c\045" +
    "\u0164\001\002\000\034\005\uff52\006\u0162\007\u015f\011\uff52" +
    "\013\u0160\014\u0165\015\u0161\017\uff52\020\uff52\021\uff52\022" +
    "\uff52\031\uff52\045\u0164\001\002\000\004\032\u017f\001\002" +
    "\000\004\145\u0180\001\002\000\004\032\u0181\001\002\000" +
    "\004\005\u0182\001\002\000\004\022\u0183\001\002\000\034" +
    "\005\uff61\006\uff61\007\uff61\011\uff61\013\uff61\014\uff61\015" +
    "\uff61\017\uff61\020\uff61\021\uff61\022\uff61\031\uff61\045\uff61" +
    "\001\002\000\034\005\uff5e\006\u0162\007\u015f\011\uff5e\013" +
    "\u0160\014\u0165\015\u0161\017\uff5e\020\uff5e\021\uff5e\022\uff5e" +
    "\031\uff5e\045\u0164\001\002\000\030\005\u0186\006\u0162\007" +
    "\u015f\011\u0167\013\u0160\014\u0165\015\u0161\017\u0168\020\u015e" +
    "\021\u0166\045\u0164\001\002\000\034\005\uff4a\006\uff4a\007" +
    "\uff4a\011\uff4a\013\uff4a\014\uff4a\015\uff4a\017\uff4a\020\uff4a" +
    "\021\uff4a\022\uff4a\031\uff4a\045\uff4a\001\002\000\034\005" +
    "\uff5f\006\uff5f\007\uff5f\011\uff5f\013\uff5f\014\uff5f\015\uff5f" +
    "\017\uff5f\020\uff5f\021\uff5f\022\uff5f\031\uff5f\045\uff5f\001" +
    "\002\000\004\005\u0189\001\002\000\004\025\u018a\001\002" +
    "\000\050\075\u0146\076\u0130\077\u014a\100\u0147\101\u014d\102" +
    "\u0134\103\u0142\104\u014c\107\u0148\110\u013b\111\u013c\112\u0133" +
    "\113\u0131\116\u012f\120\u013e\121\u0138\125\u014b\127\u0132\145" +
    "\u0145\001\002\000\052\026\u018d\075\u0146\076\u0130\077\u014a" +
    "\100\u0147\101\u014d\102\u0134\103\u0142\104\u014c\107\u0148\110" +
    "\u013b\111\u013c\112\u0133\113\u0131\116\u012f\120\u013e\121\u0138" +
    "\125\u014b\127\u0132\145\u0145\001\002\000\054\013\uff87\026" +
    "\uff87\075\uff87\076\uff87\077\uff87\100\uff87\101\uff87\102\uff87" +
    "\103\uff87\104\uff87\107\uff87\110\uff87\111\uff87\112\uff87\113" +
    "\uff87\116\uff87\120\uff87\121\uff87\125\uff87\127\uff87\145\uff87" +
    "\001\002\000\054\013\uff7d\026\uff7d\075\uff7d\076\uff7d\077" +
    "\uff7d\100\uff7d\101\uff7d\102\uff7d\103\uff7d\104\uff7d\107\uff7d" +
    "\110\uff7d\111\uff7d\112\uff7d\113\uff7d\116\uff7d\120\uff7d\121" +
    "\uff7d\125\uff7d\127\uff7d\145\uff7d\001\002\000\004\005\u018f" +
    "\001\002\000\004\025\u0190\001\002\000\050\075\u0146\076" +
    "\u0130\077\u014a\100\u0147\101\u014d\102\u0134\103\u0142\104\u014c" +
    "\107\u0148\110\u013b\111\u013c\112\u0133\113\u0131\116\u012f\120" +
    "\u013e\121\u0138\125\u014b\127\u0132\145\u0145\001\002\000\052" +
    "\026\u0192\075\u0146\076\u0130\077\u014a\100\u0147\101\u014d\102" +
    "\u0134\103\u0142\104\u014c\107\u0148\110\u013b\111\u013c\112\u0133" +
    "\113\u0131\116\u012f\120\u013e\121\u0138\125\u014b\127\u0132\145" +
    "\u0145\001\002\000\054\013\uff7c\026\uff7c\075\uff7c\076\uff7c" +
    "\077\uff7c\100\uff7c\101\uff7c\102\uff7c\103\uff7c\104\uff7c\107" +
    "\uff7c\110\uff7c\111\uff7c\112\uff7c\113\uff7c\116\uff7c\120\uff7c" +
    "\121\uff7c\125\uff7c\127\uff7c\145\uff7c\001\002\000\026\004" +
    "\u0153\007\u0150\021\u0155\030\u015b\114\u0152\115\u0154\131\u0158" +
    "\143\u0151\144\u0156\145\u015a\001\002\000\030\005\u0195\006" +
    "\u0162\007\u015f\011\u0167\013\u0160\014\u0165\015\u0161\017\u0168" +
    "\020\u015e\021\u0166\045\u0164\001\002\000\004\022\u0196\001" +
    "\002\000\056\013\uff7b\026\uff7b\027\uff7b\075\uff7b\076\uff7b" +
    "\077\uff7b\100\uff7b\101\uff7b\102\uff7b\103\uff7b\104\uff7b\107" +
    "\uff7b\110\uff7b\111\uff7b\112\uff7b\113\uff7b\116\uff7b\120\uff7b" +
    "\121\uff7b\125\uff7b\127\uff7b\145\uff7b\001\002\000\004\032" +
    "\u0198\001\002\000\004\145\u0199\001\002\000\004\032\u019a" +
    "\001\002\000\004\005\u019b\001\002\000\004\022\u019c\001" +
    "\002\000\056\013\uff60\026\uff60\027\uff60\075\uff60\076\uff60" +
    "\077\uff60\100\uff60\101\uff60\102\uff60\103\uff60\104\uff60\107" +
    "\uff60\110\uff60\111\uff60\112\uff60\113\uff60\116\uff60\120\uff60" +
    "\121\uff60\125\uff60\127\uff60\145\uff60\001\002\000\026\004" +
    "\u0153\007\u0150\021\u0155\030\u015b\114\u0152\115\u0154\131\u0158" +
    "\143\u0151\144\u0156\145\u015a\001\002\000\030\005\u019f\006" +
    "\u0162\007\u015f\011\u0167\013\u0160\014\u0165\015\u0161\017\u0168" +
    "\020\u015e\021\u0166\045\u0164\001\002\000\004\122\u01a0\001" +
    "\002\000\004\116\u012f\001\002\000\060\013\uff45\026\uff45" +
    "\075\uff45\076\uff45\077\uff45\100\uff45\101\uff45\102\uff45\103" +
    "\uff45\104\uff45\107\uff45\110\uff45\111\uff45\112\uff45\113\uff45" +
    "\116\uff45\120\uff45\121\uff45\123\u01a2\124\u01a3\125\uff45\127" +
    "\uff45\145\uff45\001\002\000\004\116\u012f\001\002\000\004" +
    "\004\u01ae\001\002\000\060\013\uff43\026\uff43\075\uff43\076" +
    "\uff43\077\uff43\100\uff43\101\uff43\102\uff43\103\uff43\104\uff43" +
    "\107\uff43\110\uff43\111\uff43\112\uff43\113\uff43\116\uff43\120" +
    "\uff43\121\uff43\123\u01a5\124\u01a6\125\uff43\127\uff43\145\uff43" +
    "\001\002\000\004\116\u012f\001\002\000\004\121\u01a7\001" +
    "\002\000\004\004\u01a8\001\002\000\026\004\u0153\007\u0150" +
    "\021\u0155\030\u015b\114\u0152\115\u0154\131\u0158\143\u0151\144" +
    "\u0156\145\u015a\001\002\000\030\005\u01aa\006\u0162\007\u015f" +
    "\011\u0167\013\u0160\014\u0165\015\u0161\017\u0168\020\u015e\021" +
    "\u0166\045\u0164\001\002\000\004\122\u01ab\001\002\000\004" +
    "\116\u012f\001\002\000\060\013\uff40\026\uff40\075\uff40\076" +
    "\uff40\077\uff40\100\uff40\101\uff40\102\uff40\103\uff40\104\uff40" +
    "\107\uff40\110\uff40\111\uff40\112\uff40\113\uff40\116\uff40\120" +
    "\uff40\121\uff40\123\uff40\124\uff40\125\uff40\127\uff40\145\uff40" +
    "\001\002\000\054\013\uff42\026\uff42\075\uff42\076\uff42\077" +
    "\uff42\100\uff42\101\uff42\102\uff42\103\uff42\104\uff42\107\uff42" +
    "\110\uff42\111\uff42\112\uff42\113\uff42\116\uff42\120\uff42\121" +
    "\uff42\125\uff42\127\uff42\145\uff42\001\002\000\026\004\u0153" +
    "\007\u0150\021\u0155\030\u015b\114\u0152\115\u0154\131\u0158\143" +
    "\u0151\144\u0156\145\u015a\001\002\000\030\005\u01b0\006\u0162" +
    "\007\u015f\011\u0167\013\u0160\014\u0165\015\u0161\017\u0168\020" +
    "\u015e\021\u0166\045\u0164\001\002\000\004\122\u01b1\001\002" +
    "\000\004\116\u012f\001\002\000\060\013\uff41\026\uff41\075" +
    "\uff41\076\uff41\077\uff41\100\uff41\101\uff41\102\uff41\103\uff41" +
    "\104\uff41\107\uff41\110\uff41\111\uff41\112\uff41\113\uff41\116" +
    "\uff41\120\uff41\121\uff41\123\uff41\124\uff41\125\uff41\127\uff41" +
    "\145\uff41\001\002\000\054\013\uff44\026\uff44\075\uff44\076" +
    "\uff44\077\uff44\100\uff44\101\uff44\102\uff44\103\uff44\104\uff44" +
    "\107\uff44\110\uff44\111\uff44\112\uff44\113\uff44\116\uff44\120" +
    "\uff44\121\uff44\125\uff44\127\uff44\145\uff44\001\002\000\004" +
    "\016\u01b6\001\002\000\004\013\ufff1\001\002\000\004\053" +
    "\u01b7\001\002\000\004\014\u01b8\001\002\000\004\013\uffca" +
    "\001\002\000\026\004\u0153\007\u0150\021\u0155\030\u015b\114" +
    "\u0152\115\u0154\131\u0158\143\u0151\144\u0156\145\u015a\001\002" +
    "\000\030\005\u01bb\006\u0162\007\u015f\011\u0167\013\u0160\014" +
    "\u0165\015\u0161\017\u0168\020\u015e\021\u0166\045\u0164\001\002" +
    "\000\004\130\u01bc\001\002\000\004\116\u012f\001\002\000" +
    "\054\013\uff3e\026\uff3e\075\uff3e\076\uff3e\077\uff3e\100\uff3e" +
    "\101\uff3e\102\uff3e\103\uff3e\104\uff3e\107\uff3e\110\uff3e\111" +
    "\uff3e\112\uff3e\113\uff3e\116\uff3e\120\uff3e\121\uff3e\125\uff3e" +
    "\127\uff3e\145\uff3e\001\002\000\004\027\u01bf\001\002\000" +
    "\030\075\u0146\076\u0130\077\u014a\100\u0147\101\u014d\102\u0134" +
    "\103\u0142\104\u014c\105\u01c0\106\u01c5\120\u013e\001\002\000" +
    "\004\022\uff72\001\002\000\004\027\u01c7\001\002\000\004" +
    "\022\u01c6\001\002\000\004\027\uff47\001\002\000\004\027" +
    "\uff49\001\002\000\004\022\uff71\001\002\000\004\027\uff48" +
    "\001\002\000\004\024\u01c8\001\002\000\004\117\u01c9\001" +
    "\002\000\060\013\uff46\026\uff46\075\uff46\076\uff46\077\uff46" +
    "\100\uff46\101\uff46\102\uff46\103\uff46\104\uff46\107\uff46\110" +
    "\uff46\111\uff46\112\uff46\113\uff46\116\uff46\120\uff46\121\uff46" +
    "\123\uff46\124\uff46\125\uff46\127\uff46\145\uff46\001\002\000" +
    "\006\022\u01db\031\u01d8\001\002\000\004\145\u01cc\001\002" +
    "\000\010\011\u01d3\022\uff6d\031\uff6d\001\002\000\006\022" +
    "\u01cf\031\u01ce\001\002\000\004\145\u01d0\001\002\000\054" +
    "\013\uff6b\026\uff6b\075\uff6b\076\uff6b\077\uff6b\100\uff6b\101" +
    "\uff6b\102\uff6b\103\uff6b\104\uff6b\107\uff6b\110\uff6b\111\uff6b" +
    "\112\uff6b\113\uff6b\116\uff6b\120\uff6b\121\uff6b\125\uff6b\127" +
    "\uff6b\145\uff6b\001\002\000\004\011\u01d1\001\002\000\026" +
    "\004\u0153\007\u0150\021\u0155\030\u015b\114\u0152\115\u0154\131" +
    "\u0158\143\u0151\144\u0156\145\u015a\001\002\000\032\006\u0162" +
    "\007\u015f\011\u0167\013\u0160\014\u0165\015\u0161\017\u0168\020" +
    "\u015e\021\u0166\022\uff68\031\uff68\045\u0164\001\002\000\026" +
    "\004\u0153\007\u0150\021\u0155\030\u015b\114\u0152\115\u0154\131" +
    "\u0158\143\u0151\144\u0156\145\u015a\001\002\000\032\006\u0162" +
    "\007\u015f\011\u0167\013\u0160\014\u0165\015\u0161\017\u0168\020" +
    "\u015e\021\u0166\022\uff69\031\uff69\045\u0164\001\002\000\006" +
    "\022\u01d9\031\u01d8\001\002\000\006\022\u01d7\031\u01ce\001" +
    "\002\000\054\013\uff6a\026\uff6a\075\uff6a\076\uff6a\077\uff6a" +
    "\100\uff6a\101\uff6a\102\uff6a\103\uff6a\104\uff6a\107\uff6a\110" +
    "\uff6a\111\uff6a\112\uff6a\113\uff6a\116\uff6a\120\uff6a\121\uff6a" +
    "\125\uff6a\127\uff6a\145\uff6a\001\002\000\004\145\u01da\001" +
    "\002\000\054\013\uff6e\026\uff6e\075\uff6e\076\uff6e\077\uff6e" +
    "\100\uff6e\101\uff6e\102\uff6e\103\uff6e\104\uff6e\107\uff6e\110" +
    "\uff6e\111\uff6e\112\uff6e\113\uff6e\116\uff6e\120\uff6e\121\uff6e" +
    "\125\uff6e\127\uff6e\145\uff6e\001\002\000\010\011\uff6c\022" +
    "\uff6c\031\uff6c\001\002\000\054\013\uff6f\026\uff6f\075\uff6f" +
    "\076\uff6f\077\uff6f\100\uff6f\101\uff6f\102\uff6f\103\uff6f\104" +
    "\uff6f\107\uff6f\110\uff6f\111\uff6f\112\uff6f\113\uff6f\116\uff6f" +
    "\120\uff6f\121\uff6f\125\uff6f\127\uff6f\145\uff6f\001\002\000" +
    "\026\004\u0153\007\u0150\021\u0155\030\u015b\114\u0152\115\u0154" +
    "\131\u0158\143\u0151\144\u0156\145\u015a\001\002\000\030\006" +
    "\u0162\007\u015f\011\u0167\013\u0160\014\u0165\015\u0161\017\u0168" +
    "\020\u015e\021\u0166\022\u01de\045\u0164\001\002\000\054\013" +
    "\uff70\026\uff70\075\uff70\076\uff70\077\uff70\100\uff70\101\uff70" +
    "\102\uff70\103\uff70\104\uff70\107\uff70\110\uff70\111\uff70\112" +
    "\uff70\113\uff70\116\uff70\120\uff70\121\uff70\125\uff70\127\uff70" +
    "\145\uff70\001\002\000\032\016\u01e6\040\131\041\124\042" +
    "\132\043\130\045\126\046\133\047\123\050\121\051\122" +
    "\052\125\053\127\001\002\000\004\013\u01e1\001\002\000" +
    "\004\016\u01e3\001\002\000\004\002\uffff\001\002\000\004" +
    "\033\u01e4\001\002\000\004\014\u01e5\001\002\000\004\002" +
    "\uffe8\001\002\000\004\037\u01e7\001\002\000\004\014\u01e8" +
    "\001\002\000\004\013\uffe4\001\002\000\004\013\u01eb\001" +
    "\002\000\004\013\ufffb\001\002\000\004\016\u01ec\001\002" +
    "\000\004\051\u01ed\001\002\000\004\014\u01ee\001\002\000" +
    "\004\013\uffce\001\002\000\004\013\u0121\001\002\000\004" +
    "\013\ufff9\001\002\000\004\034\u01f2\001\002\000\004\014" +
    "\u01f3\001\002\000\004\013\uffe6\001\002\000\004\013\u01fa" +
    "\001\002\000\004\016\u01f6\001\002\000\004\036\u01f7\001" +
    "\002\000\004\014\u01f8\001\002\000\004\013\uffe0\001\002" +
    "\000\004\146\u01fd\001\002\000\004\035\u01fb\001\002\000" +
    "\004\014\u01fc\001\002\000\004\146\uffe3\001\002\000\004" +
    "\013\u01ff\001\002\000\004\013\ufffe\001\002\000\004\016" +
    "\u0200\001\002\000\004\035\u0201\001\002\000\004\014\u0202" +
    "\001\002\000\004\013\uffe2\001\002\000\006\014\uffc8\025" +
    "\u0207\001\002\000\006\014\uffb7\025\uffb7\001\002\000\006" +
    "\014\uffc9\025\u0207\001\002\000\004\014\u0214\001\002\000" +
    "\006\063\u0208\064\u0209\001\002\000\004\011\u020f\001\002" +
    "\000\004\011\u020a\001\002\000\004\030\u020b\001\002\000" +
    "\004\146\u020c\001\002\000\004\030\u020d\001\002\000\004" +
    "\026\u020e\001\002\000\006\014\uffa0\025\uffa0\001\002\000" +
    "\004\030\u0210\001\002\000\004\145\u0211\001\002\000\004" +
    "\030\u0212\001\002\000\004\026\u0213\001\002\000\006\014" +
    "\uffa1\025\uffa1\001\002\000\004\013\uffe9\001\002\000\006" +
    "\014\uffb6\025\uffb6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0213\000\010\002\006\003\003\013\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\015\023" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u01f3\001\001\000\004\016\035\001" +
    "\001\000\002\001\001\000\010\054\022\065\021\076\020" +
    "\001\001\000\002\001\001\000\004\076\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\036\001\001\000\034\005" +
    "\060\006\062\025\055\027\061\030\070\032\066\036\067" +
    "\040\071\042\063\043\072\045\056\047\065\051\064\001" +
    "\001\000\002\001\001\000\010\055\042\066\041\077\044" +
    "\001\001\000\004\077\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\006\115\020\u01df\025\055\027\061\030\070\032\066" +
    "\036\067\040\071\042\063\043\072\045\056\047\065\051" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\107\u0135\110\u012b\111\u0148\112\u0134\113" +
    "\u013c\114\u012d\116\u013e\120\u013f\123\u0140\125\u012c\126\u0138" +
    "\130\u0142\132\u0136\133\u0143\134\u0139\001\001\000\010\011" +
    "\u011a\012\u011e\025\u011c\001\001\000\010\007\u010a\010\u0109" +
    "\034\u0108\001\001\000\034\005\113\006\062\025\055\027" +
    "\061\030\070\032\066\036\067\040\071\042\063\043\072" +
    "\045\056\047\065\051\064\001\001\000\004\031\106\001" +
    "\001\000\004\041\102\001\001\000\002\001\001\000\004" +
    "\044\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\006\115\025\055\027\061\030\070\032\066\036\067" +
    "\037\116\040\071\042\063\043\072\045\056\047\065\051" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\063\357\074\355\105" +
    "\353\106\354\001\001\000\012\056\351\067\252\100\255" +
    "\106\254\001\001\000\002\001\001\000\012\057\326\070" +
    "\325\101\330\106\327\001\001\000\012\056\323\067\252" +
    "\100\255\106\254\001\001\000\012\061\273\072\272\103" +
    "\275\106\274\001\001\000\002\001\001\000\012\056\267" +
    "\067\252\100\255\106\254\001\001\000\012\056\253\067" +
    "\252\100\255\106\254\001\001\000\012\060\200\071\177" +
    "\102\202\106\201\001\001\000\010\062\133\073\135\104" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\104\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\102\251\106\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\100\266\106\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\103\322\106\274\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\101\347\106\327\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\105\u0105\106\354" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\u010f\033\u010e\034\u0108\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\u0115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\u0127\025\u011c\050\u0125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\u0121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\125" +
    "\u01c9\127\u01cc\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\052\u01b4\110\u018b" +
    "\111\u0148\112\u0134\113\u013c\114\u012d\116\u013e\120\u013f\123" +
    "\u0140\125\u012c\126\u0138\130\u0142\132\u0136\133\u0143\134\u0139" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\115\u0158\117\u014e\121\u0156\001\001" +
    "\000\002\001\001\000\010\115\u0186\117\u014e\121\u0156\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\115\u0184" +
    "\117\u014e\121\u0156\001\001\000\002\001\001\000\010\115" +
    "\u0183\117\u014e\121\u0156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\115\u017c\117\u014e\121\u0156\001\001\000\010\115" +
    "\u017b\117\u014e\121\u0156\001\001\000\010\115\u0179\117\u014e" +
    "\121\u0156\001\001\000\010\115\u0177\117\u014e\121\u0156\001" +
    "\001\000\010\115\u0176\117\u014e\121\u0156\001\001\000\002" +
    "\001\001\000\010\115\u0170\117\u014e\121\u0156\001\001\000" +
    "\010\115\u016e\117\u014e\121\u0156\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\115\u0168\117\u014e\121\u0156\001" +
    "\001\000\002\001\001\000\010\115\u016a\117\u014e\121\u0156" +
    "\001\001\000\002\001\001\000\010\115\u016c\117\u014e\121" +
    "\u0156\001\001\000\002\001\001\000\010\115\u016f\117\u014e" +
    "\121\u0156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\115\u0173\117\u014e" +
    "\121\u0156\001\001\000\002\001\001\000\004\120\u0175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\115\u017a\117\u014e\121\u0156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\107\u018a" +
    "\110\u012b\111\u0148\112\u0134\113\u013c\114\u012d\116\u013e\120" +
    "\u013f\123\u0140\125\u012c\126\u0138\130\u0142\132\u0136\133\u0143" +
    "\134\u0139\001\001\000\036\110\u018b\111\u0148\112\u0134\113" +
    "\u013c\114\u012d\116\u013e\120\u013f\123\u0140\125\u012c\126\u0138" +
    "\130\u0142\132\u0136\133\u0143\134\u0139\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\107\u0190\110\u012b\111\u0148\112\u0134\113\u013c\114" +
    "\u012d\116\u013e\120\u013f\123\u0140\125\u012c\126\u0138\130\u0142" +
    "\132\u0136\133\u0143\134\u0139\001\001\000\036\110\u018b\111" +
    "\u0148\112\u0134\113\u013c\114\u012d\116\u013e\120\u013f\123\u0140" +
    "\125\u012c\126\u0138\130\u0142\132\u0136\133\u0143\134\u0139\001" +
    "\001\000\002\001\001\000\010\115\u0193\117\u014e\121\u0156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\115\u019d\117\u014e\121\u0156\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\120\u01a0\001\001\000\004\131" +
    "\u01a3\001\001\000\004\120\u01b2\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\120\u01ac\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\115\u01a8\117\u014e\121\u0156" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\120" +
    "\u01ab\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\115\u01ae\117\u014e\121\u0156\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\120\u01b1\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\115\u01b9\117\u014e\121\u0156\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\120\u01bc\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\111\u01c3\116\u013e\122\u01c1\123" +
    "\u01c2\124\u01c0\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\125" +
    "\u01d4\127\u01d5\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\115\u01d1\117\u014e\121\u0156\001\001\000\002\001\001" +
    "\000\010\115\u01d3\117\u014e\121\u0156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\115\u01dc\117\u014e\121\u0156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\u01e1\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\u01e9\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\u01ef\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\u01f8\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\u01fd\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\053\u0205\064\u0204\075" +
    "\u0203\001\001\000\002\001\001\000\004\075\u0214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();

     public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right,
                        "Verifica la Sintaxis"));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right,
                        "Ninguna"));
    }

    public LinkedList<Errores> getErrores(){
        return listaErrores;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= BASE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BASE ::= INICIO CABEZA_I INTRODUCCION CABEZA_F CUERPO_I CONTENIDOS CUERPO_F FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BASE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INTRODUCCION ::= DIREC_I DIREC_F TITU_I VALOR TITU_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTRODUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONTENIDOS ::= CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONTENIDOS ::= CONTENIDOS CONTENIDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTENIDO ::= TIH_I VALOR TIH_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDO ::= INT_I 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDO ::= BAN_I VALOR BAN_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDO ::= CUAD_I CUAD_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTENIDO ::= SELE_I LIST_OPT SELE_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTENIDO ::= DIV_I CONTENIDOS DIV_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDO ::= IMG_I IMG_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO ::= BR_I 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDO ::= BOTON_I VALOR BOTON_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO ::= PARA_I LIST_SPAN PARA_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO ::= SCRIPT_I INSTRUCCIONES SCRIPT_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUAOPT ::= OPT_I VALOR OPT_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUAOPT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LIST_OPT ::= CUAOPT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_OPT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LIST_OPT ::= LIST_OPT CUAOPT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_OPT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SPAN ::= VALOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPAN",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SPAN ::= BAN_I VALOR BAN_F 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SPAN",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LIST_SPAN ::= SPAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_SPAN",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LIST_SPAN ::= LIST_SPAN SPAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_SPAN",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INICIO ::= MENOR CC ETIQUETA1 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FIN ::= MENOR DIVI CC MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIN",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CABEZA_I ::= MENOR HEAD MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABEZA_I",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CABEZA_F ::= MENOR DIVI HEAD MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABEZA_F",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO_I ::= MENOR BODY ETIQUETA3 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_I",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO_F ::= MENOR DIVI BODY MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_F",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TITU_I ::= MENOR TITLE MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITU_I",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TITU_F ::= MENOR DIVI TITLE MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITU_F",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DIREC_I ::= MENOR LINK ETIQUETA2 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIREC_I",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DIREC_F ::= MENOR DIVI LINK MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIREC_F",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BAN_I ::= MENOR SPAM ETIQUETA4 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAN_I",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BAN_F ::= MENOR DIVI SPAM MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BAN_F",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INT_I ::= MENOR INPUT ETIQUETA5 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INT_I",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUAD_I ::= MENOR TEXTAREA ETIQUETA6 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUAD_I",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CUAD_F ::= MENOR DIVI TEXTAREA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUAD_F",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SELE_I ::= MENOR SELECT ETIQUETA4 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELE_I",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SELE_F ::= MENOR DIVI SELECT MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELE_F",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPT_I ::= MENOR OPTION MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPT_I",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPT_F ::= MENOR DIVI OPTION MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPT_F",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DIV_I ::= MENOR DIV ETIQUETA7 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIV_I",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DIV_F ::= MENOR DIVI DIV MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIV_F",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IMG_I ::= MENOR IMG ETIQUETA8 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMG_I",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IMG_F ::= MENOR DIVI IMG MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMG_F",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BR_I ::= MENOR BR MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BR_I",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BOTON_I ::= MENOR BUTTON ETIQUETA9 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON_I",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BOTON_F ::= MENOR DIVI BUTTON MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOTON_F",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIH_I ::= MENOR TITUH ETIQUETA4 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIH_I",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIH_F ::= MENOR DIVI TITUH MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIH_F",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PARA_I ::= MENOR PARRA ETIQUETA4 MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA_I",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARA_F ::= MENOR DIVI PARRA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA_F",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SCRIPT_I ::= MENOR SCRIPT MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_I",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SCRIPT_F ::= MENOR DIVI SCRIPT MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCRIPT_F",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ETIQUETA1 ::= LIST_VAL1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA1",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ETIQUETA1 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA1",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ETIQUETA2 ::= LIST_VAL2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA2",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ETIQUETA2 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA2",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ETIQUETA3 ::= LIST_VAL3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA3",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ETIQUETA3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA3",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ETIQUETA4 ::= LIST_VAL4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA4",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ETIQUETA4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA4",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ETIQUETA5 ::= LIST_VAL5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA5",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ETIQUETA5 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA5",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ETIQUETA6 ::= LIST_VAL6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA6",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ETIQUETA6 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA6",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ETIQUETA7 ::= LIST_VAL7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA7",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ETIQUETA7 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA7",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ETIQUETA8 ::= LIST_VAL8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA8",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ETIQUETA8 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA8",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ETIQUETA9 ::= LIST_VAL9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA9",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ETIQUETA9 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA9",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LIST_VAL1 ::= VALOR_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LIST_VAL1 ::= LIST_VAL1 VALOR_1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LIST_VAL2 ::= VALOR_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LIST_VAL2 ::= LIST_VAL2 VALOR_2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL2",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LIST_VAL3 ::= VALOR_3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL3",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LIST_VAL3 ::= LIST_VAL3 VALOR_3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL3",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LIST_VAL4 ::= VALOR_4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL4",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LIST_VAL4 ::= LIST_VAL4 VALOR_4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL4",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LIST_VAL5 ::= VALOR_5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL5",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LIST_VAL5 ::= LIST_VAL5 VALOR_5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL5",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LIST_VAL6 ::= VALOR_6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL6",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LIST_VAL6 ::= LIST_VAL6 VALOR_6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL6",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LIST_VAL7 ::= VALOR_7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL7",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LIST_VAL7 ::= LIST_VAL7 VALOR_7 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL7",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LIST_VAL8 ::= VALOR_8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL8",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LIST_VAL8 ::= LIST_VAL8 VALOR_8 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL8",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LIST_VAL9 ::= VALOR_9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL9",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LIST_VAL9 ::= LIST_VAL9 VALOR_9 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIST_VAL9",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VALOR_N ::= CORCHEA FONTSI IGUAL COMID size COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VALOR_N ::= CORCHEA FONTFA IGUAL COMID family COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VALOR_N ::= CORCHEA TEXTALI IGUAL COMID aling COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALOR_N ::= CORCHEA ID IGUAL COMID IDENTIFICADOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_N",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALOR_1 ::= CORCHEA ID IGUAL COMID IDENTIFICADOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VALOR_1 ::= CORCHEA NAME IGUAL COMID VALOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_1",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALOR_2 ::= CORCHEA HREF IGUAL COMID enlace COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_2",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALOR_3 ::= CORCHEA BACKG IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_3",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALOR_4 ::= CORCHEA COLOR IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_4",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALOR_4 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_4",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALOR_5 ::= CORCHEA TYPE IGUAL COMID tipos COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_5",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALOR_5 ::= CORCHEA COLOR IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_5",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALOR_5 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_5",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VALOR_6 ::= CORCHEA COLS IGUAL COMID ENTERO COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_6",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VALOR_6 ::= CORCHEA ROWS IGUAL COMID ENTERO COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_6",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VALOR_6 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_6",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VALOR_7 ::= CORCHEA COLOR IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VALOR_7 ::= CORCHEA BACKG IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VALOR_7 ::= CORCHEA CLASS IGUAL COMID clase COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VALOR_7 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_7",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VALOR_8 ::= CORCHEA ID IGUAL COMID IDENTIFICADOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VALOR_8 ::= CORCHEA SRC IGUAL COMID enlace COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VALOR_8 ::= CORCHEA WIDTH IGUAL COMID th COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VALOR_8 ::= CORCHEA HEIGHT IGUAL COMID th COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VALOR_8 ::= CORCHEA ALT IGUAL COMID VALOR COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_8",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VALOR_9 ::= CORCHEA COLOR IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VALOR_9 ::= CORCHEA BACKG IGUAL COMID colo COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VALOR_9 ::= CORCHEA ONCLICK IGUAL COMID IDENTIFICADOR PAR1 PAR2 COMID CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // VALOR_9 ::= VALOR_N 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_9",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // INSTRUCCION ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // INSTRUCCION ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // INSTRUCCION ::= DECLA_ASIG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // INSTRUCCION ::= ISTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // INSTRUCCION ::= BLOINST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // INSTRUCCION ::= SIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // INSTRUCCION ::= REPETIR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // INSTRUCCION ::= CICLO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // INSTRUCCION ::= IDENTIFICADOR PAR1 PAR2 CORCHEA INSTRUCCIONES CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // INSTRUCCION ::= LOAD PAR1 PAR2 CORCHEA INSTRUCCIONES CORCHEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // IMPRESION ::= FUNCSP PAR1 EXPRESION PAR2 FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // FUNCSP ::= ASC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // FUNCSP ::= DESC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // FUNCSP ::= LETPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // FUNCSP ::= LETIMPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // FUNCSP ::= REVERSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // FUNCSP ::= CARALE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // FUNCSP ::= NUMALE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // FUNCSP ::= ALEINF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCSP",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CSP ::= EXIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CSP",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CSP ::= REDIRECT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CSP",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ASIGNACION ::= LISTA_VAR IGUAL EXPRESION FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DECLARACION ::= TIPOS LISTA_VAR FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DECLARACION ::= TIPOS GLOBAL LISTA_VAR FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // LISTA_VAR ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VAR",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // LISTA_VAR ::= LISTA_VAR COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VAR",83, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DECLA_ASIG ::= TIPOS LISTA_ASIG FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA_ASIG",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // DECLA_ASIG ::= TIPOS GLOBAL LISTA_ASIG FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLA_ASIG",84, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LISTA_ASIG ::= IDENTIFICADOR IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ASIG",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // LISTA_ASIG ::= LISTA_ASIG COMA IDENTIFICADOR IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ASIG",85, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TIPOS ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TIPOS ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TIPOS ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TIPOS ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TIPOS ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CADENA ::= COMID VALOR COMID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // GET ::= ELEMENT PAR1 COMIS IDENTIFICADOR COMIS PAR2 FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GET",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ISTR ::= INSERT PAR1 COMIS IDENTIFICADOR COMIS PAR2 FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ISTR",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // EXPRESION ::= MENOS EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // EXPRESION ::= DIFER EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // EXPRESION ::= EXPRESION POR EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // EXPRESION ::= EXPRESION IGUAL IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // EXPRESION ::= EXPRESION DIFER IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // EXPRESION ::= EXPRESION MENOR IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // EXPRESION ::= EXPRESION MAYOR IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // EXPRESION ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // EXPRESION ::= GET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // EXPRESION ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // EXPRESION ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // EXPRESION ::= DECI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // EXPRESION ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // EXPRESION ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // OPCIONES ::= IMPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // OPCIONES ::= CSP FINCADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",82, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // OPCIONES ::= ISTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCIONES",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // BLOINST ::= INIT LLAVEA DOSPTS OPCIONES DOSPTS LLAVEC END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOINST",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SIF ::= IF PAR1 EXPRESION PAR2 THEN BLOINST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SIF ::= IF PAR1 EXPRESION PAR2 THEN BLOINST ELSE BLOINST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SIF ::= IF PAR1 EXPRESION PAR2 THEN BLOINST SELIF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // SIF ::= IF PAR1 EXPRESION PAR2 THEN BLOINST SELIF ELSE BLOINST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",88, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // SELIF ::= ELIF PAR1 EXPRESION PAR2 THEN BLOINST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIF",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // SELIF ::= SELIF ELIF IF PAR1 EXPRESION PAR2 THEN BLOINST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELIF",87, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // REPETIR ::= REPEAT PAR1 EXPRESION PAR2 HUNTIL PAR1 EXPRESION PAR2 BLOINST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REPETIR",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // CICLO ::= WHILE PAR1 EXPRESION PAR2 THENWHILE BLOINST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CICLO",90, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
